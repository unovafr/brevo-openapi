x-samples-languages: ['curl', 'node', 'php', 'go', 'ruby', 'python', 'java', 'csharp']
swagger: '2.0'
info:
  version: '3.0.0'
  title: SendinBlue API
  description: |
    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :
      - Manage your campaigns and get the statistics
      - Manage your contacts
      - Send transactional Emails and SMS
      - and much more...

    You can download our wrappers at https://github.com/orgs/sendinblue

    **Possible responses**
      | Code | Message |
      | :-------------: | ------------- |
      | 200  | OK. Successful Request  |
      | 201  | OK. Successful Creation |
      | 202  | OK. Request accepted |
      | 204  | OK. Successful Update/Deletion  |
      | 400  | Error. Bad Request  |
      | 401  | Error. Authentication Needed  |
      | 402  | Error. Not enough credit, plan upgrade needed  |
      | 403  | Error. Permission denied  |
      | 404  | Error. Object does not exist |
      | 405  | Error. Method not allowed  |
      | 406  | Error. Not Acceptable  |
  contact:
    name: Sendinblue Support
    email: contact@sendinblue.com
    url: https://account.sendinblue.com/support
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: api.sendinblue.com
basePath: /v3
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /emailCampaigns:
    get:
        tags:
          - Email Campaigns
        summary: Return all your created email campaigns
        operationId: getEmailCampaigns
        parameters:
          - name: type
            description: Filter on the type of the campaigns
            in: query
            required: false
            type: string
            enum:
              - classic
              - trigger
          - name: status
            description: Filter on the status of the campaign
            in: query
            required: false
            type: string
            enum:
              - suspended
              - archive
              - sent
              - queued
              - draft
              - inProcess
          - name: statistics
            in: query
            description: Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
            required : false
            type: string
            enum:
              - globalStats
              - linksStats
              - statsByDomain
          - name: startDate
            description: Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )
            in: query
            required: false
            type: string
            format: date-time
          - name: endDate
            description: Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )
            in: query
            required: false
            type: string
            format: date-time
          - name: limit
            description: Number of documents per page
            in: query
            required: false
            type: integer
            format: int64
            default: 500
            maximum: 1000
          - name: offset
            description: Index of the first document in the page
            in: query
            required: false
            type: integer
            format : int64
            default: 0
          - name: excludeHtmlContent
            in : query
            description: Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body
            type : boolean
            enum :
              - true
              - false
        responses:
            '200':
              description: Email campaigns informations
              schema:
                $ref: '#/definitions/getEmailCampaigns'
              examples:
                applications/json:
                    {
                      "campaigns": [
                        {
                          "id": 12,
                          "name": "EN - Sales Summer 2017",
                          "subject": "20% OFF for 2017 Summer Sales",
                          "type": "classic",
                          "status": "sent",
                          "scheduledAt": "2017-06-01T12:30:00Z",
                          "testSent": true,
                          "header": "[DEFAULT_HEADER]",
                          "footer": "[DEFAULT_FOOTER]",
                          "sender": {
                            "email": "marketing@mycompany.com",
                            "name": "Marketing",
                            "id": 26
                          },
                          "replyTo": "replyto@domain.com",
                          "toField": "{FNAME} {LNAME}",
                          "htmlContent": "This is my HTML Content",
                          "shareLink": "http://example.com/fhsgccc.html?t=9865448900",
                          "tag": "Newsletter",
                          "createdAt": "2017-05-01T12:30:00Z",
                          "modifiedAt": "2017-05-01T12:30:00Z",
                          "inlineImageActivation": true,
                          "mirrorActive": true,
                          "recurring": false,
                          "recipients": {
                            "lists": [
                              5
                            ],
                            "exclusionLists": [
                              13
                            ]
                          },
                          "statistics": {
                            "globalStats": {
                              "uniqueClicks": 2300,
                              "clickers": 2665,
                              "complaints": 1,
                              "delivered": 19765,
                              "sent": 19887,
                              "softBounces": 100,
                              "hardBounces": 87,
                              "uniqueViews": 7779,
                              "trackableViews": 5661,
                              "unsubscriptions": 2,
                              "viewed": 8999
                            },
                            "campaignStats": [
                              {
                                "listId": 5,
                                "uniqueClicks": 2300,
                                "clickers": 2665,
                                "complaints": 1,
                                "delivered": 19765,
                                "sent": 19887,
                                "softBounces": 100,
                                "hardBounces": 87,
                                "uniqueViews": 7779,
                                "trackableViews": 5661,
                                "unsubscriptions": 2,
                                "viewed": 8999,
                                "deferred": 30
                              }
                            ],
                            "mirrorClick": 120,
                            "remaining": 1000,
                            "linksStats": {
                              "http://myUrl1.domain.com": 80
                            },
                            "statsByDomain": {
                              "yahoo.com": {
                                  "uniqueClicks": 298,
                                  "clickers": 533,
                                  "complaints": 0,
                                  "sent": 25601,
                                  "softBounces": 5,
                                  "hardBounces": 0,
                                  "uniqueViews": 3527,
                                  "unsubscriptions": 17,
                                  "viewed": 5255,
                                  "delivered": 25596
                              },
                              "hotmail.co.uk": {
                                  "uniqueClicks": 1970,
                                  "clickers": 2720,
                                  "complaints": 5,
                                  "sent": 117055,
                                  "softBounces": 111,
                                  "hardBounces": 0,
                                  "uniqueViews": 21111,
                                  "unsubscriptions": 105,
                                  "viewed": 35251,
                                  "delivered": 117056
                              }
                            }
                          }
                        },
                        {
                          "id": 22,
                          "name": "Weekly - 1",
                          "subject": "Week 1 - Newsletter",
                          "type": "Classic",
                          "status": "draft",
                          "scheduledAt": "",
                          "testSent": false,
                          "header": "[DEFAULT_HEADER]",
                          "footer": "[DEFAULT_FOOTER]",
                          "sender": {
                            "email": "newsletter@mycompany.com",
                            "name": "Newsletter",
                            "id": 26
                          },
                          "replyTo": "replyto@domain.com",
                          "toField": "{FNAME} {LNAME}",
                          "htmlContent": "This is my HTML Content",
                          "shareLink": "http://example.com/fhsgccc.html?t=9865448900",
                          "tag": "Newsletter",
                          "createdAt": "2017-05-01T12:30:00Z",
                          "modifiedAt": "2017-05-01T12:30:00Z",
                          "inlineImageActivation": true,
                          "mirrorActive": true,
                          "recurring": false,
                          "recipients": {
                            "lists": [
                              10
                            ],
                            "exclusionLists": [
                              45
                            ]
                          },
                          "statistics": {
                            "globalStats": {
                              "uniqueClicks": 2300,
                              "clickers": 2665,
                              "complaints": 1,
                              "delivered": 19765,
                              "sent": 19887,
                              "softBounces": 100,
                              "hardBounces": 87,
                              "uniqueViews": 7779,
                              "trackableViews": 5661,
                              "unsubscriptions": 2,
                              "viewed": 8999
                            },
                            "campaignStats": [
                              {
                                "listId": 10,
                                "uniqueClicks": 2300,
                                "clickers": 2665,
                                "complaints": 1,
                                "delivered": 19765,
                                "sent": 19887,
                                "softBounces": 100,
                                "hardBounces": 87,
                                "uniqueViews": 7779,
                                "trackableViews": 5661,
                                "unsubscriptions": 2,
                                "viewed": 8999,
                                "deferred": 30
                              }
                            ],
                            "mirrorClick": 120,
                            "remaining": 1000,
                            "linksStats": {
                              "http://myUrl1.domain.com": {
                                "nbClick": 80
                              },
                              "http://myUrl2.domain.com": {
                                "nbClick": 80
                              },
                              "http://myUrl3.domain.com": {
                                "nbClick": 80
                              }
                            },
                            "statsByDomain": {
                              "gmail": {
                                "uniqueClicks": 2300,
                                "clickers": 2665,
                                "complaints": 1,
                                "delivered": 19765,
                                "sent": 19887,
                                "softBounces": 100,
                                "hardBounces": 87,
                                "uniqueViews": 7779,
                                "unsubscriptions": 2,
                                "viewed": 8999,
                                "deferred": 30
                              },
                              "aol": {
                                "uniqueClicks": 2300,
                                "clickers": 2665,
                                "complaints": 1,
                                "delivered": 19765,
                                "sent": 19887,
                                "softBounces": 100,
                                "hardBounces": 87,
                                "uniqueViews": 7779,
                                "unsubscriptions": 2,
                                "viewed": 8999,
                                "deferred": 30
                              }
                            }
                          }
                        }
                      ],
                      "count": 2
                    }
            '400':
              description: bad request
              schema:
                $ref: '#/definitions/errorModel'
    post:
       tags:
          - Email Campaigns
       summary: Create an email campaign
       operationId: createEmailCampaign
       parameters:
        - name: emailCampaigns
          description: Values to create a campaign
          required: true
          in: body
          schema:
            $ref: '#/definitions/createEmailCampaign'
       responses:
          '201':
            description: Email campaign created
            schema:
              $ref: '#/definitions/createModel'
          '400':
            description: bad request
            schema:
              $ref: '#/definitions/errorModel'
  /emailCampaigns/{campaignId}:
    get:
      tags:
          - Email Campaigns
      summary: Get an email campaign report
      operationId: getEmailCampaign
      parameters:
        - name: campaignId
          description: Id of the campaign
          in: path
          type: integer
          format: int64
          required: true
        - name: statistics
          in: query
          description: Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
          type: string
          enum:
          - globalStats
          - linksStats
          - statsByDomain
          - statsByDevice
          - statsByBrowser
      responses:
        '200':
          description: Email campaign informations
          schema:
            $ref: '#/definitions/getEmailCampaign'
          examples:
            application/json:
                {
                  "id": 22,
                  "name": "Weekly - 1",
                  "subject": "Week 1 - Newsletter",
                  "type": "classic",
                  "status": "draft",
                  "scheduledAt": "2017-09-22T12:30:00Z",
                  "testSent": false,
                  "header": "[DEFAULT_HEADER]",
                  "footer": "[DEFAULT_FOOTER]",
                  "sender": {
                    "email": "newsletter@mycompany.com",
                    "name": "Newsletter",
                    "id": 26
                  },
                  "replyTo": "replyto@domain.com",
                  "toField": "{FNAME} {LNAME}",
                  "htmlContent": "This is my HTML Content",
                  "shareLink": "http://dhh.sendinblue.com/fhsgccc.html?t=9865448900",
                  "tag": "Newsletter",
                  "createdAt": "2017-05-01T12:30:00Z",
                  "modifiedAt": "2017-05-01T12:30:00Z",
                  "inlineImageActivation": true,
                  "mirrorActive": true,
                  "recurring": false,
                  "recipients": {
                    "lists": [
                      22
                    ],
                    "exclusionLists": [
                      45
                    ]
                  },
                  "statistics": {
                    "globalStats": {
                      "uniqueClicks": 2300,
                      "clickers": 2665,
                      "complaints": 1,
                      "delivered": 19765,
                      "sent": 19887,
                      "softBounces": 100,
                      "hardBounces": 87,
                      "uniqueViews": 7779,
                      "trackableViews": 5661,
                      "unsubscriptions": 2,
                      "viewed": 8999
                    },
                    "campaignStats": [
                      {
                        "listId": 22,
                        "uniqueClicks": 2300,
                        "clickers": 2665,
                        "complaints": 1,
                        "delivered": 19765,
                        "sent": 19887,
                        "softBounces": 100,
                        "hardBounces": 87,
                        "uniqueViews": 7779,
                        "trackableViews": 5661,
                        "unsubscriptions": 2,
                        "viewed": 8999,
                        "deferred": 30
                      }
                    ],
                    "mirrorClick": 120,
                    "remaining": 1000,
                    "linksStats": {
                      "http://myUrl1.domain.com": {
                        "nbClick": 80
                      },
                      "http://myUrl2.domain.com": {
                        "nbClick": 80
                      },
                      "http://myUrl3.domain.com": {
                        "nbClick": 80
                      }
                    },
                    "statsByDomain": {
                      "gmail": {
                        "uniqueClicks": 2300,
                        "clickers": 2665,
                        "complaints": 1,
                        "delivered": 19765,
                        "sent": 19887,
                        "softBounces": 100,
                        "hardBounces": 87,
                        "uniqueViews": 7779,
                        "unsubscriptions": 2,
                        "viewed": 8999,
                        "deferred": 30
                      }
                    },
                    "statsByDevice": {
                      "desktop": {
                        "mac": {
                          "clickers": 1,
                          "uniqueClicks": 0,
                          "viewed": 2,
                          "uniqueViews": 1
                        }
                      },
                      "mobile": {
                        "androidMobile": {
                          "clickers": 1,
                          "uniqueClicks": 0,
                          "viewed": 1,
                          "uniqueViews": 0
                        },
                        "iPhone": {
                          "clickers": 1,
                          "uniqueClicks": 0,
                          "viewed": 2,
                          "uniqueViews": 0
                        }
                      }
                    },
                    "statsByBrowser": {
                      "thunderbird": {
                        "clickers": 1,
                        "uniqueClicks": 0,
                        "viewed": 1,
                        "uniqueViews": 0
                      },
                      "safari": {
                        "clickers": 1,
                        "uniqueClicks": 0,
                        "viewed": 1,
                        "uniqueViews": 0
                      },
                      "internetExplorer": {
                        "clickers": 0,
                        "uniqueClicks": 0,
                        "viewed": 1,
                        "uniqueViews": 0
                      }
                    }
                  }
                }
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
          - Email Campaigns
      summary: Update an email campaign
      operationId: updateEmailCampaign
      parameters:
        - name: campaignId
          description: Id of the campaign
          in: path
          type: integer
          format: int64
          required: true
        - name: emailCampaign
          description: Values to update a campaign
          required: true
          in: body
          schema:
            $ref: '#/definitions/updateEmailCampaign'
      responses:
        '204':
          description: Email Campaign has been updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
          - Email Campaigns
      summary: Delete an email campaign
      operationId: deleteEmailCampaign
      parameters:
        - name: campaignId
          description: id of the campaign
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '204':
          description: Email campaign has been deleted
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /emailCampaigns/{campaignId}/sendNow:
    post:
      tags:
          - Email Campaigns
      summary: Send an email campaign immediately, based on campaignId
      operationId: sendEmailCampaignNow
      parameters:
        - name: campaignId
          description: Id of the campaign
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '204':
          description: Email campaign has been scheduled
        '400':
          description: Campaign could not be sent
          schema:
            $ref: '#/definitions/errorModel'
        '402':
          description: You don't have enough credit to send your campaign. Please update your plan
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /emailCampaigns/{campaignId}/sendTest:
    post:
      tags:
          - Email Campaigns
      summary: Send an email campaign to your test list
      operationId: sendTestEmail
      parameters:
      - name: campaignId
        description: Id of the campaign
        in: path
        type: integer
        format: int64
        required: true
      - name: emailTo
        in: body
        required: true
        schema:
          $ref: '#/definitions/sendTestEmail'
      responses:
        '204':
          description: Test email has been sent successfully to all recipients
        '400':
          description: Test email could not be sent to the following email addresses
          schema:
            $ref: '#/definitions/postSendFailed'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /emailCampaigns/{campaignId}/status:
    put:
      tags:
          - Email Campaigns
      summary: Update an email campaign status
      operationId: updateCampaignStatus
      parameters:
        - name: campaignId
          description: Id of the campaign
          in: path
          type: integer
          format: int64
          required: true
        - name: status
          description: Status of the campaign
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateCampaignStatus'
      responses:
        '204':
          description: The campaign status has been updated successfully
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /emailCampaigns/{campaignId}/sendReport:
    post:
      tags:
          - Email Campaigns
      summary: Send the report of a campaign
      description: A PDF will be sent to the specified email addresses
      operationId: sendReport
      parameters:
      - name: campaignId
        description: Id of the campaign
        in: path
        type: integer
        format: int64
        required: true
      - name: sendReport
        description: Values for send a report
        in: body
        required: true
        schema:
          $ref: '#/definitions/sendReport'
      responses:
        '204':
          description: Report has been successfully sent to the defined recipients
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /emailCampaigns/{campaignId}/abTestCampaignResult:
    get:
      tags:
        - Email Campaigns
      summary: Get an A/B test email campaign results
      description: Obtain winning version of an A/B test email campaign
      operationId: getAbTestCampaignResult
      parameters:
        - name: campaignId
          description: Id of the A/B test campaign
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: A/B test email campaign Result
          schema:
            $ref: '#/definitions/abTestCampaignResult'
          examples:
            application/json:
              {
                "winningCriteria": "Click",
                "statistics": {
                  "openers": {
                    "Version A": "20%",
                    "Version B": "100%"
                  },
                  "clicks": {
                    "Version A": "0%",
                    "Version B": "50%"
                  },
                  "unsubscribed": {
                    "Version A": "20%",
                    "Version B": "0%"
                  },
                  "softBounces": {
                    "Version A": "0%",
                    "Version B": "0%"
                  },
                  "hardBounces": {
                    "Version A": "0%",
                    "Version B": "0%"
                  },
                  "complaints": {
                    "Version A": "0%",
                    "Version B": "0%"
                  }
                },
                "winningVersion": "B",
                "openRate": "100%",
                "ClickRate": "50%",
                "winningVersionRate": "0%",
                "clickedLinks": {
                  "Version A": [
                    {
                      "link": "http://www.google.com",
                      "clicksCount": 0,
                      "clickRate": "0%"
                    },
                    {
                      "link": "http://www.youtube.com",
                      "clicksCount": 0,
                      "clickRate": "0%"
                    }
                  ],
                  "Version B": [
                    {
                      "link": "http://www.github.com",
                      "clicksCount": 2,
                      "clickRate": "40%"
                    },
                    {
                      "link": "http://www.stackoverflow.com",
                      "clicksCount": 3,
                      "clickRate": "60%"
                    }
                  ]
                }
              }
        '404':
          description: A/B test Email Campaign not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /emailCampaigns/{campaignId}/sharedUrl:
    get:
      tags:
        - Email Campaigns
      summary: Get a shared template url
      description: Get a unique URL to share & import an email template from one Sendinblue account to another.
      operationId: getSharedTemplateUrl
      parameters:
        - name: campaignId
          description: Id of the campaign or template
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Shared template URL information
          schema:
            $ref: '#/definitions/getSharedTemplateUrl'
          examples:
            application/json:
              {
                "sharedUrl": "https://my.sendinblue.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-",
              }
        '404':
          description: Campaign/Template ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '405':
          description: Only email campaigns or templates are allowed
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /emailCampaigns/{campaignId}/exportRecipients:
    post:
      tags:
          - Email Campaigns
      summary: Export the recipients of an email campaign
      operationId: emailExportRecipients
      parameters:
        - name: campaignId
          description: Id of the campaign
          in: path
          type: integer
          format: int64
          required: true
        - name: recipientExport
          description: Values to send for a recipient export request
          in: body
          required: false
          schema:
            $ref: '#/definitions/emailExportRecipients'
      responses:
        '202':
          description: Recipient export request has been accepted
          schema:
            $ref: '#/definitions/createdProcessId'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /emailCampaigns/images:
    post:
      tags:
        - Email Campaigns
      summary: Upload an image to your account's image gallery
      operationId: uploadImageToGallery
      parameters:
        - name: uploadImage
          description: Parameters to upload an image
          required: true
          in: body
          schema:
            $ref: '#/definitions/uploadImageToGallery'
      responses:
          '201':
            description: Image successfully uploaded
          '400':
            description: bad request
            schema:
              $ref: '#/definitions/errorModel'

  /smtp/email:
    post:
      tags:
          - SMTP
      summary: Send a transactional email
      operationId: sendTransacEmail
      parameters:
        - name: sendSmtpEmail
          description: Values to send a transactional email
          in: body
          required: true
          schema:
            $ref: '#/definitions/sendSmtpEmail'
      responses:
        '201':
          description: transactional email sent
          schema:
            $ref: '#/definitions/createSmtpEmail'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/emails:
    get:
      tags:
        - SMTP
      summary: Get the list of transactional emails on the basis of allowed filters
      description: This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.
      operationId: getTransacEmailsList
      parameters:
        - name: email
          description: Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.
          in: query
          required: false
          type: string
        - name: templateId
          description: Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.
          in: query
          required: false
          type: integer
          format: int64
        - name: messageId
          description: Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.
          in: query
          required: false
          type: string
        - name: startDate
          description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.
          in: query
          required: false
          type: string
          format: date
        - name: endDate
          description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
          in: query
          required: false
          type: string
          format: date
      responses:
        '200':
          description: List of transactional emails
          schema:
            $ref: '#/definitions/getTransacEmailsList'
          examples:
            application/json:
              {
                "transactionalEmails": [
                  {
                    "email": "abc@xyz.com",
                    "subject": "summer camp",
                    "templateId": 15,
                    "messageId": "<201798300811.5787683@relay.domain.com>",
                    "uuid": "5a78c-209ok98262910-std2341",
                    "date": "2019-05-25T11:53:26Z"
                  },
                  {
                    "email": "test@test.com",
                    "subject": "details verification",
                    "templateId": 15,
                    "messageId": "<201798300811.5700093@relay.domain.com>",
                    "uuid": "5a78c-209ok98262910-s99a341",
                    "date": "2019-05-25T07:28:11Z"
                  }
                ]
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/emails/{uuid}:
    get:
      tags:
        - SMTP
      summary: Get the personalized content of a sent transactional email
      operationId: getTransacEmailContent
      parameters:
        - name: uuid
          description: Unique id of the transactional email that has been sent to a particular contact
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Transactional email content
          schema:
            $ref: '#/definitions/getTransacEmailContent'
          examples:
            application/json:
              {
                "email": "abc@example.com",
                "subject": "Summer Camps",
                "templateId": 12,
                "date": "2016-02-25T11:53:26Z",
                "events": [{
                  "name": "sent",
                  "time": "2016-02-25T11:53:26Z"
                }, {
                  "name": "delivered",
                  "time": "2016-02-25T11:55:26Z"
                }, {
                  "name": "opened",
                  "time": "2016-02-26T09:53:26Z"
                }],
                "body": "<!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1> <p>This is the actual html content sent</p> </body> </html>"
              }
  /smtp/log/{messageId}:
    delete:
      tags:
          - SMTP
      summary: Delete an SMTP transactional log
      parameters:
        - name: messageId
          description: MessageId of the transactional log to delete
          in: path
          type: string
          required: true
      responses:
        '204':
          description: Transactional Logs deleted
        '404':
          description: Message ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/templates:
    get:
      tags:
          - SMTP
      summary: Get the list of email templates
      operationId: getSmtpTemplates
      parameters:
        - name: templateStatus
          description: Filter on the status of the template. Active = true, inactive = false
          in: query
          required: false
          type: boolean
        - name: limit
          description: Number of documents returned per page
          in: query
          required: false
          type: integer
          format: int64
          default: 50
          maximum: 1000
        - name: offset
          description: Index of the first document in the page
          in: query
          required: false
          type: integer
          format : int64
          default : 0
      responses:
        '200':
          description: transactional email templates informations
          schema:
            $ref: '#/definitions/getSmtpTemplates'
          examples:
            application/json:
                {
                  "count": 2,
                  "templates": [
                  {
                    "id": 5,
                    "name": "ChristomasTimeTemplate",
                    "subject": "Merry Christmas",
                    "isActive": false,
                    "testSent": false,
                    "sender": {
                      "name": "John",
                      "email": "john.smith@example.com",
                      "id": 23
                    },
                    "replyTo": "replyto@domain.com",
                    "toField": "",
                    "tag": "Festival",
                    "htmlContent": "HTML CONTENT 1",
                    "createdAt": "2016-02-24T14:44:24Z",
                    "modifiedAt": "2016-02-24T15:37:11Z"
                  },
                  {
                    "id": 12,
                    "name": "SummerSales2017Template",
                    "subject": "Enjoy our summer Sales !",
                    "isActive": true,
                    "testSent": false,
                    "sender": {
                      "name": "John",
                      "email": "john.smith@example.com",
                      "id": 23
                    },
                    "replyTo": "replyto@domain.com",
                    "toField": "",
                    "tag":"Summer",
                    "htmlContent": "HTML CONTENT 2",
                    "createdAt": "2016-02-25T11:53:26Z",
                    "modifiedAt": "2016-02-25T11:53:26Z"
                  }
                ]
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
          - SMTP
      summary: Create an email template
      operationId: createSmtpTemplate
      parameters:
        - name: smtpTemplate
          description: values to update in transactional email template
          in: body
          required: true
          schema:
            $ref: '#/definitions/createSmtpTemplate'
      responses:
        '201':
          description: transactional email template created
          schema:
            $ref: '#/definitions/createModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/templates/{templateId}:
    get:
      tags:
          - SMTP
      summary: Returns the template information
      operationId: getSmtpTemplate
      parameters:
        - name: templateId
          description: id of the template
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Email template informations
          schema:
            $ref: '#/definitions/getSmtpTemplateOverview'
          examples:
            application/json:
              {
                "id": 33,
                "name": "OrderConfirmation",
                "subject": "Order Confirmation : Thanks for your Purchase !",
                "isActive": true,
                "testSent": false,
                "sender": {
                  "name": "John",
                  "email": "john.smith@example.com",
                  "id": 26
                },
                "replyTo": "replyto@domain.com",
                "toField": "",
                "tag": "",
                "htmlContent": "HTML CONTENT 4",
                "createdAt": "2016-02-25T11:53:26Z",
                "modifiedAt": "2016-02-25T11:53:26Z",
                "doiTemplate": false
              }
        '404':
          description: Template ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
          - SMTP
      summary: Update an email template
      operationId: updateSmtpTemplate
      parameters:
        - name: templateId
          description: id of the template
          in: path
          type: integer
          format: int64
          required: true
        - name: smtpTemplate
          description: values to update in transactional email template
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateSmtpTemplate'
      responses:
        '204':
          description: transactional email template updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Template ID not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
          - SMTP
      summary: Delete an inactive email template
      operationId: deleteSmtpTemplate
      parameters:
        - name: templateId
          description: id of the template
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '204':
          description: Inactive transactional email template has been deleted
        '404':
          description: Template ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/templates/{templateId}/sendTest:
    post:
      tags:
          - SMTP
      summary: Send a template to your test list
      operationId: sendTestTemplate
      parameters:
      - name: templateId
        description: Id of the template
        in: path
        type: integer
        format: int64
        required: true
      - name: sendTestEmail
        in: body
        required: true
        schema:
          $ref: '#/definitions/sendTestEmail'
      responses:
        '204':
          description: Test email has been sent successfully to all recipients
        '400':
          description: Test email could not be sent to the following email addresses
          schema:
            $ref: '#/definitions/postSendFailed'
        '404':
          description: Template ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/statistics/aggregatedReport:
    get:
      tags:
          - SMTP
      summary: Get your transactional email activity aggregated over a period of time
      operationId: getAggregatedSmtpReport
      parameters:
        - name: startDate
          description: Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
          in: query
          required: false
          type: string
        - name: endDate
          description: Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
          in: query
          required: false
          type: string
        - name: days
          description: Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'
          in: query
          required: false
          type: integer
        - name: tag
          description: Tag of the emails
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Aggregated report informations
          schema:
            $ref: '#/definitions/getAggregatedReport'
          examples:
            application/json:
              {
                "range": "2016-09-08|2017-04-28",
                "requests": 19887,
                "delivered": 18996,
                "hardBounces": 234,
                "softBounces": 1533,
                "clicks": 9987,
                "uniqueClicks": 8766,
                "opens": 17654,
                "uniqueOpens": 13688,
                "spamReports": 1,
                "blocked": 2,
                "invalid": 0,
                "unsubscribed": 2
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/statistics/reports:
    get:
      tags:
          - SMTP
      summary: Get your transactional email activity aggregated per day
      operationId: getSmtpReport
      parameters:
        - name: limit
          description: Number of documents returned per page
          in: query
          required: false
          type: integer
          format: int64
          default: 10
          maximum: 30
        - name: offset
          description: Index of the first document on the page
          in: query
          required: false
          type: integer
          format : int64
          default: 0
        - name: startDate
          description: Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)
          in: query
          required: false
          type: string
        - name: endDate
          description: Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)
          in: query
          required: false
          type: string
        - name: days
          description: Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'
          in: query
          required: false
          type: integer
        - name: tag
          description: Tag of the emails
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Aggregated report informations
          schema:
            $ref: '#/definitions/getReports'
          examples:
            application/json:
              { "reports": [
                  {
                    "date":"2017-04-30",
                    "requests":10756,
                    "delivered":10103,
                    "hardBounces":21,
                    "softBounces":137,
                    "clicks":1026,
                    "uniqueClicks":720,
                    "opens":5091,
                    "uniqueOpens":2318,
                    "spamReports":0,
                    "blocked":519,
                    "invalid":1,
                    "unsubscribed": 0
                  },
                  {
                    "date":"2017-05-01",
                    "requests":18812,
                    "delivered":17499,
                    "hardBounces":34,
                    "softBounces":254,
                    "clicks":1514,
                    "uniqueClicks":1090,
                    "opens":10089,
                    "uniqueOpens":4393,
                    "spamReports":0,
                    "blocked":920,
                    "invalid":2,
                    "unsubscribed": 3
                  }
                ]
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/statistics/events:
    get:
      tags:
          - SMTP
      summary: Get all your transactional email activity (unaggregated events)
      operationId: getEmailEventReport
      parameters:
        - name: limit
          description: Number limitation for the result returned
          in: query
          required: false
          type: integer
          format: int64
          default: 50
          maximum: 100
        - name: offset
          description: Beginning point in the list to retrieve from.
          in: query
          required: false
          type: integer
          format : int64
          default: 0
        - name: startDate
          description: Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
          in: query
          required: false
          type: string
        - name: endDate
          description: Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
          in: query
          required: false
          type: string
        - name: days
          description: Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'
          in: query
          required: false
          type: integer
        - name: email
          description: Filter the report for a specific email addresses
          in: query
          required: false
          type: string
          format: email
        - name: event
          description: Filter the report for a specific event type
          in: query
          required: false
          type: string
          enum:
           - bounces
           - hardBounces
           - softBounces
           - delivered
           - spam
           - requests
           - opened
           - clicks
           - invalid
           - deferred
           - blocked
           - unsubscribed
        - name: tags
          description: Filter the report for tags (serialized and urlencoded array)
          in: query
          required: false
          type: string
        - name: messageId
          description: Filter on a specific message id
          in: query
          required: false
          type: string
        - name: templateId
          description: Filter on a specific template id
          in: query
          required: false
          type: integer
          format: int64
      responses:
        '200':
          description: Email events report informations
          schema:
            $ref: '#/definitions/getEmailEventReport'
          examples:
            application/json:
                {
                  "events": [
                    {
                      "email": "john.smith@example.com",
                      "date": "2017-03-12T12:30:00Z",
                      "messageId": "<201798300811.5787683@example.domain.com>",
                      "event": "deferred",
                      "reason": "Error connection timeout",
                      "tag": "OrderConfirmation",
                      "from": "john@example.com"
                    },
                     {
                      "email": "john.smith@example.com",
                      "date": "2017-03-13T16:30:00Z",
                      "messageId": "<201798300811.5787683@example.domain.com>",
                      "event": "delivered",
                      "tag": "OrderConfirmation",
                      "from": "john@example.com"
                    }
                  ]
                }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/blockedContacts/{email}:
    delete:
      tags:
          - SMTP
      summary: Unblock or resubscribe a transactional contact
      parameters:
        - name: email
          description: contact email (urlencoded) to unblock.
          in: path
          type: string
          required: true
      responses:
        '204':
          description: Contact unblocked
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Contact email not found
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/blockedContacts:
    get:
      tags:
        - SMTP
      summary: Get the list of blocked or unsubscribed transactional contacts
      operationId: getTransacBlockedContacts
      parameters:
        - name: startDate
          description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts
          in: query
          required: false
          type: string
        - name: endDate
          description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts
          in: query
          required: false
          type: string
        - name: limit
          description: Number of documents returned per page
          in: query
          required: false
          type: integer
          format: int64
          default: 50
          maximum: 100
        - name: offset
          description: Index of the first document on the page
          in: query
          required: false
          type: integer
          format : int64
          default: 0
        - name: senders
          description: Comma separated list of emails of the senders from which contacts are blocked or unsubscribed
          in: query
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string
      responses:
        '200':
          description: List of blocked or unsubscribed transactional contacts
          schema:
            $ref: '#/definitions/getTransacBlockedContacts'
          examples:
            application/json:
              {
                "contacts": [
                  {
                    "email": "abc@xyz.com",
                    "senderEmail": "ez312@gmal.com",
                    "reason": {
                        "message": "Admin blocked",
                        "code": "adminBlocked"
                    },
                    "blockedAt": "2017-05-01T12:30:00Z",
                  }
                ],
                "count": 1
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/blockedDomains:
    get:
      tags:
        - SMTP
      summary: Get the list of blocked domains
      description: Get the list of blocked domains
      operationId: getBlockedDomains
      responses:
        '200':
          description: List of blocked domains
          schema:
            $ref: '#/definitions/getBlockedDomains'
          examples:
            application/json:
              {
                "domains": ["example.com", "testdomain.com"]
              }
    post:
      tags:
        - SMTP
      summary: Add a new domain to the list of blocked domains
      description: Blocks a new domain in order to avoid messages being sent to the same
      operationId: blockNewDomain
      parameters:
        - name: blockDomain
          in: body
          required: true
          schema:
            $ref: '#/definitions/blockDomain'
      responses:
        '201':
          description: Domain is successfully blocked
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/blockedDomains/{domain}:
    delete:
      tags:
        - SMTP
      summary: Unblock an existing domain from the list of blocked domains
      description: Unblocks an existing domain from the list of blocked domains
      operationId: deleteBlockedDomain
      parameters:
        - name: domain
          description: The name of the domain to be deleted
          type: string
          in: path
          required: true
      responses:
        '204':
          description: Domain is successfully deleted from the list of blocked domains
        '404':
          description: Domain not found
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/deleteHardbounces:
    post:
      tags:
          - SMTP
      summary: Delete hardbounces
      description: Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)
      operationId: deleteHardbounces
      parameters:
        - name: deleteHardbounces
          description: values to delete hardbounces
          in: body
          required: false
          schema:
            $ref: '#/definitions/deleteHardbounces'
      responses:
        '204':
          description: Hardbounces deleted
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smtp/templates/{templateId}/send:
    post:
      tags:
          - SMTP
      summary: Send a template
      description: This endpoint is deprecated. Prefer v3/smtp/email instead.
      operationId: sendTemplate
      deprecated: true
      parameters:
      - name: templateId
        description: Id of the template
        in: path
        type: integer
        format: int64
        required: true
      - name: sendEmail
        in: body
        required: true
        schema:
          $ref: '#/definitions/sendEmail'
      responses:
        '201':
          description: Email has been sent successfully to all recipients
          schema:
            $ref: '#/definitions/sendTemplateEmail'
        '400':
          description: Email could not be sent to the following email addresses
          schema:
            $ref: '#/definitions/postSendFailed'
        '404':
          description: Template ID not found
          schema:
            $ref: '#/definitions/errorModel'

  /contacts:
    get:
      tags:
          - Contacts
      summary: Get all the contacts
      operationId: getContacts
      parameters:
        - name: limit
          description: Number of documents per page
          in: query
          required: false
          type: integer
          format: int64
          default: 50
          maximum: 1000
        - name: offset
          description: Index of the first document of the page
          in: query
          required: false
          type: integer
          format : int64
          default: 0
        - name: modifiedSince
          description: Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
          in: query
          required: false
          type: string
          format: date-time
        - name: createdSince
          description: Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
          in: query
          required: false
          type: string
          format: date-time
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation
          required: false
          type: string
          enum:
            - asc
            - desc
          default: desc
      responses:
        '200':
          description: All contacts listed
          schema:
            $ref: '#/definitions/getContacts'
          examples:
            application/json:
              {
                "contacts": [
                  {
                  "email": "contact1@example.com",
                  "id": 247,
                  "emailBlacklisted": true,
                  "smsBlacklisted": true,
                  "createdAt": "2017-05-01T17:05:03Z",
                  "modifiedAt": "2017-05-01T17:05:03Z",
                  "listIds": [43,58],
                  "attributes": {
                    "SMS": "33058407250",
                    "IDENTIFICATION": "1-3RHQ-259",
                    "CIV": "MS",
                    "LAST_NAME": "Brennon",
                    "FIRST_NAME": "Meg",
                    "DOB": "1986-05-02",
                    "ADDRESS": "1 5th avenue",
                    "ZIP_CODE": "44300",
                    "CITY": "New-York",
                    "ACTION_CODE": "17HH98CH",
                    }
                  },
                  {
                  "email": "33058407248@mailin-sms.com",
                  "id": 245,
                  "emailBlacklisted": true,
                  "smsBlacklisted": false,
                  "createdAt": "2017-05-01T17:05:03Z",
                  "modifiedAt": "2017-05-01T17:05:03Z",
                  "listIds": [43,61,58],
                  "attributes": {
                    "SMS": "33058407248",
                    "IDENTIFICATION": "1-78JS-432",
                    "CIV": "MS",
                    "LAST_NAME": "Press",
                    "FIRST_NAME": "Sophia",
                    "DOB": "1980-09-11",
                    "ADDRESS": "5 Flower Street",
                    "ZIP_CODE": "44119",
                    "CITY": "Seattle",
                    "ACTION_CODE": "17HU765",
                    }
                  }
                ],
              "count": 3
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
          - Contacts
      summary: Create a contact
      operationId: createContact
      parameters:
        - name: createContact
          description: Values to create a contact
          in: body
          required: true
          schema:
            $ref: '#/definitions/createContact'
      responses:
        '201':
          description: Contact created
          schema:
            $ref: '#/definitions/createUpdateContactModel'
        '204':
          description: Contact updated
          schema:
            $ref: '#/definitions/createUpdateContactModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/doubleOptinConfirmation:
    post:
      tags:
          - Contacts
      summary: Create Contact via DOI (Double-Opt-In) Flow
      operationId: createDoiContact
      parameters:
        - name: createDoiContact
          description: Values to create the Double opt-in (DOI) contact
          in: body
          required: true
          schema:
            $ref: '#/definitions/createDoiContact'
      responses:
        '201':
          description: DOI Contact created
        '204':
          description: DOI Contact updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/{email}:
    get:
      tags:
          - Contacts
      summary: Get a contact's details
      operationId: getContactInfo
      parameters:
        - name: email
          description: Email (urlencoded) of the contact OR its SMS attribute value
          in: path
          type: string
          required: true
      responses:
        '200':
          description: Contact informations
          schema:
            $ref: '#/definitions/getExtendedContactDetails'
          examples:
            application/json:
              {
                "email": "peggy.rain@example.com",
                "id": 42,
                "emailBlacklisted": false,
                "smsBlacklisted": false,
                "createdAt": "2017-05-02T16:40:31Z",
                "modifiedAt": "2017-05-02T16:40:31Z",
                "attributes": {
                  "FIRST_NAME": "Peggy",
                  "LAST_NAME": "Rain",
                  "SMS": "3087433387669",
                  "CIV": "1",
                  "DOB": "1986-04-13",
                  "ADDRESS": "987 5th avenue",
                  "ZIP_CODE": "87544",
                  "CITY": "New-York",
                  "AREA": "NY"
                  },
                "listIds": [40],
                "statistics": {
                  "messagesSent": [
                    {
                      "campaignId": 21,
                      "eventTime": "2016-05-03T20:15:13Z"
                    },
                    {
                      "campaignId": 42,
                      "eventTime": "2016-10-17T10:30:01Z"
                    }
                  ],
                  "opened": [
                    {
                      "campaignId": 21,
                      "count": 2,
                      "eventTime": "2016-05-03T21:24:56Z",
                      "ip": "66.249.93.118"
                    },
                    {
                      "campaignId": 68,
                      "count": 1,
                      "eventTime": "2017-01-30T13:56:40Z",
                      "ip": "66.249.93.217"
                    }
                  ],
                  "clicked": [
                    {
                      "campaignId": 21,
                      "links":[
                        {
                          "count": 2,
                          "eventTime": "2016-05-03T21:25:01Z",
                          "ip": "66.249.93.118",
                          "url": "https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=sendinblue&utm_campaign=test_camp&utm_medium=email"
                        }
                      ],
                    },
                  ]
                }
              }
        '404':
          description: Contact's email not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
          - Contacts
      summary: Update a contact
      operationId: updateContact
      parameters:
        - name: email
          description: Email (urlencoded) of the contact
          in: path
          type: string
          required: true
        - name: updateContact
          description: Values to update a contact
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateContact'
      responses:
        '204':
          description: Contact updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Contact's email not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
          - Contacts
      summary: Delete a contact
      operationId: deleteContact
      parameters:
        - name: email
          description: Email (urlencoded) of the contact
          in: path
          type: string
          required: true
      responses:
        '204':
          description: Contact deleted
        '404':
          description: Contact not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '405':
          description: You're not allowed to delete registered email contact with SendinBlue
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/{email}/campaignStats:
    get:
      tags:
          - Contacts
      summary: Get email campaigns' statistics for a contact
      operationId: getContactStats
      parameters:
        - name: email
          description: Email address (urlencoded) of the contact
          in: path
          type: string
          required: true
        - name: startDate
          description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate
          in: query
          required: false
          type: string
          format: date
        - name: endDate
          description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate
          in: query
          required: false
          type: string
          format: date
      responses:
        '200':
          description: Contact campaign statistics informations
          schema:
            $ref: '#/definitions/getContactCampaignStats'
          examples:
            application/json:
              {
                "messagesSent": [
                  {
                    "campaignId": 21,
                    "eventTime": "2016-05-03T20:15:13Z"
                  },
                  {
                    "campaignId": 42,
                    "eventTime": "2016-10-17T10:30:01Z"
                  },
                  {
                    "campaignId": 45,
                    "eventTime": "2016-11-09T11:45:02Z"
                  }
                ],
                "opened": [
                  {
                    "campaignId": 21,
                    "count": 2,
                    "eventTime": "2016-05-03T21:24:56Z",
                    "ip": "66.249.93.118"
                  },
                  {
                    "campaignId": 45,
                    "count": 1,
                    "eventTime": "2017-01-30T13:56:40Z",
                    "ip": "66.249.93.217"
                  }
                ],
                "clicked": [
                  {
                    "campaignId": 21,
                    "links":[
                      {
                        "count": 2,
                        "eventTime": "2016-05-03T21:25:01Z",
                        "ip": "66.249.93.118",
                        "url": "https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=sendinblue&utm_campaign=test_camp&utm_medium=email"
                      }
                    ],
                  },
                ]
              }
        '404':
          description: Contact's email not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/attributes:
    get:
      tags:
          - Contacts
          - Attributes
      summary: List all attributes
      operationId: getAttributes
      responses:
        '200':
          description: Attributes listed
          schema:
            $ref: '#/definitions/getAttributes'
          examples:
            application/json:
                {
                  "attributes": [
                    {
                      "name": "LASTNAME",
                      "category": "normal",
                      "type": "text",
                    },
                    {
                      "name": "FIRSTNAME",
                      "category": "normal",
                      "type": "text",
                    },
                    {
                      "name": "DOB",
                      "category": "normal",
                      "type": "date",
                    },
                    {
                      "name": "GENDER",
                      "category": "category",
                      "type": "text",
                      "enumeration": [
                        {
                          "value": 1,
                          "label": "Men"
                        },
                        {
                          "value": 2,
                          "label": "Women"
                        },
                        {
                          "value": 3,
                          "label": "Kid"
                        }
                      ],
                    }
                  ]
                }
  /contacts/attributes/{attributeCategory}/{attributeName}:
    post:
      tags:
          - Contacts
          - Attributes
      summary: Create contact attribute
      operationId: createAttribute
      parameters:
        - name: attributeCategory
          description: Category of the attribute
          in: path
          required: true
          type: string
          enum:
            - normal
            - transactional
            - category
            - calculated
            - global
        - name: attributeName
          description: Name of the attribute
          in: path
          type: string
          required: true
        - name: createAttribute
          description: Values to create an attribute
          in: body
          required: true
          schema:
            $ref: '#/definitions/createAttribute'
      responses:
        '201':
          description: Attribute created
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
          - Contacts
          - Attributes
      summary: Update contact attribute
      operationId: updateAttribute
      parameters:
        - name: attributeCategory
          description: Category of the attribute
          in: path
          required: true
          type: string
          enum:
            - category
            - calculated
            - global
        - name: attributeName
          description: Name of the existing attribute
          in: path
          type: string
          required: true
        - name: updateAttribute
          description: Values to update an attribute
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateAttribute'
      responses:
        '204':
          description: Attribute updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Attribute not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
          - Contacts
          - Attributes
      summary: Delete an attribute
      operationId: deleteAttribute
      parameters:
        - name: attributeCategory
          description: Category of the attribute
          in: path
          required: true
          type: string
          enum:
            - normal
            - transactional
            - category
            - calculated
            - global
        - name: attributeName
          description: Name of the existing attribute
          in: path
          type: string
          required: true
      responses:
        '204':
          description: Attribute deleted
        '404':
          description: Attribute not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/folders:
    get:
      tags:
          - Contacts
          - Folders
      summary: Get all folders
      operationId: getFolders
      parameters:
        - name: limit
          description: Number of documents per page
          in: query
          required: true
          type: integer
          format: int64
          default: 10
          maximum: 50
        - name: offset
          description: Index of the first document of the page
          in: query
          required: true
          type: integer
          format : int64
          default : 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation
          required: false
          type: string
          enum:
            - asc
            - desc
          default: desc
      responses:
        '200':
          description: Folders informations
          schema:
            $ref: '#/definitions/getFolders'
          examples:
            application/json:
              {
                "folders": [
                  {
                    "id": 42,
                    "name": "Ninja_Form",
                    "totalBlacklisted": 98,
                    "totalSubscribers": 4567,
                    "uniqueSubscribers": 4665
                  },
                  {
                    "id": 29,
                    "name": "Prestashop",
                    "totalBlacklisted": 10,
                    "totalSubscribers": 6543,
                    "uniqueSubscribers": 6553
                  }
                  ],
                "count": 2
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
          - Contacts
          - Folders
      summary: Create a folder
      operationId: createFolder
      parameters:
        - name: createFolder
          description: Name of the folder
          in: body
          required: true
          schema:
            $ref: '#/definitions/createUpdateFolder'
      responses:
        '201':
          description: Folder created
          schema:
            $ref: '#/definitions/createModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/segments:
    get:
      tags:
          - Contacts
      summary: Get all the segments
      operationId: getSegments
      parameters:
        - name: limit
          description: Number of documents per page
          in: query
          required: true
          type: integer
          format: int64
          default: 10
          maximum: 50
        - name: offset
          description: Index of the first document of the page
          in: query
          required: true
          type: integer
          format : int64
          default : 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation
          required: false
          type: string
          enum:
            - asc
            - desc
          default: desc
      responses:
        '200':
          description: Folders informations
          schema:
            $ref: '#/definitions/getSegments'
          examples:
            application/json:
              {
                "segments": [
                  {
                    "id": 42,
                    "segmentName": "Segment1",
                    "categoryName": "Category1",
                    "updatedAt": "2017-03-12T12:30:00Z",
                  },
                  {
                    "id": 42,
                    "segmentName": "Segment1",
                    "categoryName": "Category1",
                    "updatedAt": "2017-03-12T12:30:00Z",
                  }
                  ],
                "count": 2
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/folders/{folderId}:
    get:
      tags:
          - Contacts
          - Folders
      summary: Returns a folder's details
      operationId: getFolder
      parameters:
        - name: folderId
          description: id of the folder
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Folder details
          schema:
            $ref: '#/definitions/getFolder'
          examples:
            application/json:
              {
                "id": 1,
                "name": "Client_Folder",
                "totalBlacklisted": 987,
                "totalSubscribers": 16778,
                "uniqueSubscribers": 17765
              }
        '404':
          description: Folder ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
          - Contacts
          - Folders
      summary: Update a folder
      operationId: updateFolder
      parameters:
        - name: folderId
          description: Id of the folder
          in: path
          type: integer
          format: int64
          required: true
        - name: updateFolder
          description: Name of the folder
          in: body
          required: true
          schema:
            $ref: '#/definitions/createUpdateFolder'
      responses:
        '204':
          description: Folder updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Folder ID not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
          - Contacts
          - Folders
      summary: Delete a folder (and all its lists)
      operationId: deleteFolder
      parameters:
        - name: folderId
          description: Id of the folder
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '204':
          description: Folder deleted
        '404':
          description: Folder ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/folders/{folderId}/lists:
    get:
      tags:
          - Contacts
          - Folders
          - Lists
      summary: Get lists in a folder
      operationId: getFolderLists
      parameters:
        - name: folderId
          description: Id of the folder
          in: path
          type: integer
          format: int64
          required: true
        - name: limit
          description: Number of documents per page
          in: query
          required: false
          type: integer
          format: int64
          default: 10
          maximum: 50
        - name: offset
          description: Index of the first document of the page
          in: query
          required: false
          type: integer
          format : int64
          default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation
          required: false
          type: string
          enum:
            - asc
            - desc
          default: desc
      responses:
        '200':
          description: Folder's Lists details
          schema:
            $ref: '#/definitions/getFolderLists'
          examples:
            application/json:
              {
                "lists": [
                  {
                  "id": 46,
                  "name": "Reactiv",
                  "totalSubscribers": 7655,
                  "totalBlacklisted": 0
                  },
                  {
                  "id": 41,
                  "name": "NY_Area",
                  "totalSubscribers": 3654,
                  "totalBlacklisted": 23
                  },
                  {
                  "id": 22,
                  "name": "VIP_Customer",
                  "totalSubscribers": 8753,
                  "totalBlacklisted": 72
                  }
                ],
              "count": 3
              }
        '404':
          description: Folder ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/lists:
    get:
      tags:
          - Contacts
          - Lists
      summary: Get all the lists
      operationId: getLists
      parameters:
        - name: limit
          description: Number of documents per page
          in: query
          required: false
          type: integer
          format: int64
          default: 10
          maximum: 50
        - name: offset
          description: Index of the first document of the page
          in: query
          required: false
          type: integer
          format : int64
          default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation
          required: false
          type: string
          enum:
            - asc
            - desc
          default: desc
      responses:
        '200':
          description: Lists informations
          schema:
            $ref: '#/definitions/getLists'
          examples:
            application/json:
              {
                "lists": [
                  {
                    "id": 53,
                    "name": "Spanish_Speakers",
                    "totalSubscribers": 5432,
                    "totalBlacklisted": 65,
                    "folderId": 1
                  },
                  {
                    "id": 50,
                    "name": "Other",
                    "totalSubscribers": 10976,
                    "totalBlacklisted": 765,
                    "folderId": 2
                  }
                ],
                "count": 2
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
          - Contacts
          - Lists
      summary: Create a list
      operationId: createList
      parameters:
        - name: createList
          description: Values to create a list
          in: body
          required: true
          schema:
            $ref: '#/definitions/createList'
      responses:
        '201':
          description: List created
          schema:
            $ref: '#/definitions/createModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/lists/{listId}:
    get:
      tags:
          - Contacts
          - Lists
      summary: Get a list's details
      operationId: getList
      parameters:
        - name: listId
          description: Id of the list
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: List informations
          schema:
            $ref: '#/definitions/getExtendedList'
          examples:
            application/json:
              {
                "id": 12,
                "name": "Newsletter_Weekly",
                "totalSubscribers": 6533,
                "totalBlacklisted": 63,
                "folderId": 1,
                "createdAt": "2016-02-26T11:56:08Z",
                "campaignStats": [
                  {
                    "campaignId": 15,
                    "stats": {
                      "uniqueClicks": 701,
                      "clickers": 789,
                      "complaints": 0,
                      "delivered": 6632,
                      "sent": 6645,
                      "softBounces": 34,
                      "hardBounces": 4,
                      "uniqueViews": 3442,
                      "unsubscriptions": 4,
                      "viewed": 4322,
                      "deferred": 0
                    }
                  },
                  {
                    "campaignId": 45,
                    "stats": {
                      "uniqueClicks": 654,
                      "clickers": 788,
                      "complaints": 1,
                      "delivered": 4078,
                      "sent": 4334,
                      "softBounces": 18,
                      "hardBounces": 2,
                      "uniqueViews": 987,
                      "unsubscriptions": 4,
                      "viewed": 1555,
                      "deferred": 0
                    }
                  }
                  ],
            "dynamicList": false
            }
        '404':
          description: List ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
          - Contacts
          - Lists
      summary: Update a list
      operationId: updateList
      parameters:
        - name: listId
          description: Id of the list
          in: path
          type: integer
          format: int64
          required: true
        - name: updateList
          description: Values to update a list
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateList'
      responses:
        '204':
          description: List updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: List ID not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
          - Contacts
          - Lists
      summary: Delete a list
      operationId: deleteList
      parameters:
        - name: listId
          description: Id of the list
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '204':
          description: List deleted
        '404':
          description: List ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/lists/{listId}/contacts:
    get:
      tags:
          - Contacts
          - Lists
      summary: Get contacts in a list
      operationId: getContactsFromList
      parameters:
        - name: listId
          description: Id of the list
          in: path
          type: integer
          format: int64
          required: true
        - name: modifiedSince
          description: Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
          in: query
          required: false
          type: string
          format: date-time
        - name: limit
          description: Number of documents per page
          in: query
          required: false
          type: integer
          format: int64
          default: 50
          maximum: 500
        - name: offset
          description: Index of the first document of the page
          in: query
          required: false
          type: integer
          format : int64
          default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation
          required: false
          type: string
          enum:
            - asc
            - desc
          default: desc
      responses:
        '200':
          description: Contact informations
          schema:
            $ref: '#/definitions/getContacts'
          examples:
            application/json:
                {
                  "contacts": [
                    {
                      "email": "alex.pain@example.com",
                      "id": 45,
                      "emailBlacklisted": false,
                      "smsBlacklisted": true,
                      "createdAt": "2017-05-12T12:30:00Z",
                      "modifiedAt": "2017-05-12T12:30:00Z",
                      "listIds": [
                        12,9,20
                      ],
                      "listUnsubscribed": [
                        1,2
                      ],
                      "attributes": {
                        "LASTNAME": "Pain",
                        "FIRSTNAME": "Alex",
                        "DOB": "2010-12-31",
                        "GENDER": "Kid"
                      },
                    },
                    {
                      "email": "john.smith@example.com",
                      "id": 32,
                      "emailBlacklisted": true,
                      "smsBlacklisted": false,
                      "createdAt": "2017-05-12T12:30:00Z",
                      "modifiedAt": "2017-05-12T12:30:00Z",
                      "listIds": [
                        12
                      ],
                      "listUnsubscribed": [
                        1
                      ],
                      "attributes": {
                        "LASTNAME": "Smith",
                        "FIRSTNAME": "John",
                        "DOB": "1986-06-21",
                        "GENDER": "Men"
                      }
                    },
                    {
                      "email": "helen.rose@example.com",
                      "id": 65,
                      "emailBlacklisted": true,
                      "smsBlacklisted": false,
                      "createdAt": "2017-05-12T12:30:00Z",
                      "modifiedAt": "2017-05-12T12:30:00Z",
                      "listIds": [
                        12,9,20
                      ],
                      "listUnsubscribed": [
                        1
                      ],
                      "attributes": {
                        "LASTNAME": "Rose",
                        "FIRSTNAME": "Helen",
                        "DOB": "1988-11-02",
                        "GENDER": "Women",
                        "SMS": "3375599887766",
                      }
                    }
                  ],
                  "count": 17655
                }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: List ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/lists/{listId}/contacts/add:
    post:
      tags:
          - Contacts
          - Lists
      summary: Add existing contacts to a list
      operationId: addContactToList
      parameters:
        - name: listId
          description: Id of the list
          in: path
          type: integer
          format: int64
          required: true
        - name: contactEmails
          description: Emails addresses of the contacts
          in: body
          required: true
          schema:
            $ref: '#/definitions/addContactToList'
      responses:
        '201':
          description: All contacts have been added successfully to the list with details of failed ones
          schema:
            $ref: '#/definitions/postContactInfo'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: List ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/lists/{listId}/contacts/remove:
    post:
      tags:
          - Contacts
          - Lists
      summary: Delete a contact from a list
      operationId: removeContactFromList
      parameters:
        - name: listId
          description: Id of the list
          in: path
          type: integer
          format: int64
          required: true
        - name: contactEmails
          description: Emails adresses of the contact
          in: body
          required: true
          schema:
            $ref: '#/definitions/removeContactFromList'
      responses:
        '201':
          description: All contacts have been removed successfully from the list with details of failed ones
          schema:
            $ref: '#/definitions/postContactInfo'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: List ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/export:
    post:
      tags:
          - Contacts
      summary : Export contacts
      description:  It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
      operationId: requestContactExport
      parameters:
        - name: requestContactExport
          description: Values to request a contact export
          in: body
          required: true
          schema:
            $ref: '#/definitions/requestContactExport'
      responses:
        '202':
          description: Contact export request has been accepted
          schema:
            $ref: '#/definitions/createdProcessId'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /contacts/import:
    post:
      tags:
          - Contacts
      summary: Import contacts
      description: It returns the background process ID which on completion calls the notify URL that you have set in the input.
      operationId: importContacts
      parameters:
        - name: requestContactImport
          description: Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``
          in: body
          required: true
          schema:
            $ref: '#/definitions/requestContactImport'
      responses:
        '202':
          description: Contact import request has been accepted
          schema:
            $ref: '#/definitions/createdProcessId'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'

  /smsCampaigns:
    get:
      tags:
          - SMS Campaigns
      summary: Returns the information for all your created SMS campaigns
      operationId: getSmsCampaigns
      parameters:
        - name: status
          description: Status of campaign.
          in: query
          required: false
          type: string
          enum:
            - suspended
            - archive
            - sent
            - queued
            - draft
            - inProcess
        - name: startDate
          description: Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )
          in: query
          required: false
          type: string
          format: date-time
        - name: endDate
          description: Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )
          in: query
          required: false
          type: string
          format: date-time
        - name: limit
          description: Number limitation for the result returned
          in: query
          required: false
          type: integer
          format: int64
          default: 500
          maximum: 1000
        - name: offset
          description: Beginning point in the list to retrieve from.
          in: query
          required: false
          type: integer
          format : int64
          default: 0
      responses:
          '200':
            description: SMS campaigns informations
            schema:
              $ref: '#/definitions/getSmsCampaigns'
            examples:
                application/json:
                    {
                      "campaigns": [
                        {
                          "id": 2,
                          "name": "PROMO CODE",
                          "status": "sent",
                          "content": "Visit our Store and get some discount !",
                          "scheduledAt": "2017-06-01T12:30:00Z",
                          "testSent": true,
                          "sender": "MyCompany",
                          "createdAt": "2017-06-01T12:30:00Z",
                          "modifiedAt": "2017-05-01T12:30:00Z",
                          "sentDate": "2017-06-01T12:30:00Z",
                          "recipients": {
                            "lists": [
                              21
                            ],
                            "exclusionLists": [
                              13
                            ]
                          },
                          "statistics": {
                            "delivered": 2987,
                            "sent": 3000,
                            "processing": 0,
                            "softBounces": 3,
                            "hardBounces": 1,
                            "unsubscriptions": 3,
                            "answered": 2
                          }
                        },
                        {
                          "id": 10,
                          "name": "SUMMER SALE",
                          "status": "draft",
                          "content": "Summer Sale is starting tomorrow. Get extra 10% with this code:SUM17",
                          "scheduledAt": "2017-08-04T12:30:00Z",
                          "testSent": false,
                          "sender": "MyCompany",
                          "createdAt": "2017-06-01T12:30:00Z",
                          "modifiedAt": "2017-05-01T12:30:00Z",
                          "sentDate": "2017-06-01T12:30:00Z",
                          "recipients": {
                            "lists": [
                              21
                            ],
                            "exclusionLists": [
                              13
                            ]
                          },
                          "statistics": {
                            "delivered": 2987,
                            "sent": 3000,
                            "processing": 0,
                            "softBounces": 3,
                            "hardBounces": 1,
                            "unsubscriptions": 3,
                            "answered": 2
                          }
                        }
                      ],
                      "count": 12
                    }
          '400':
            description: bad request
            schema:
              $ref: '#/definitions/errorModel'
    post:
      tags:
          - SMS Campaigns
      summary: Creates an SMS campaign
      operationId: createSmsCampaign
      parameters:
        - name: createSmsCampaign
          description: Values to create an SMS Campaign
          in: body
          required: true
          schema:
            $ref: '#/definitions/createSmsCampaign'
      responses:
        '201':
          description: SMS campaign created
          schema:
            $ref: '#/definitions/createModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smsCampaigns/{campaignId}:
    get:
      tags:
          - SMS Campaigns
      summary: Get an SMS campaign
      operationId: getSmsCampaign
      parameters:
        - name: campaignId
          description: id of the SMS campaign
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: SMS campaign informations
          schema:
            $ref: '#/definitions/getSmsCampaign'
          examples:
            application/json:
                {
                  "id": 2,
                  "name": "PROMO CODE",
                  "status": "sent",
                  "content": "Visit our Store and get some discount !",
                  "scheduledAt": "2017-06-01T12:30:00Z",
                  "testSent": true,
                  "sender": "MyCompany",
                  "createdAt": "2017-06-01T12:30:00Z",
                  "modifiedAt": "2017-05-01T12:30:00Z",
                  "recipients": {
                    "lists": [
                      21
                    ],
                    "exclusionLists": [
                      13
                    ]
                  },
                  "statistics": {
                    "delivered": 2987,
                    "sent": 3000,
                    "processing": 0,
                    "softBounces": 3,
                    "hardBounces": 1,
                    "unsubscriptions": 3,
                    "answered": 2
                  }
                }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
          - SMS Campaigns
      summary: Update an SMS campaign
      operationId: updateSmsCampaign
      parameters:
        - name: campaignId
          description: id of the SMS campaign
          in: path
          type: integer
          format: int64
          required: true
        - name: updateSmsCampaign
          description: Values to update an SMS Campaign
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateSmsCampaign'
      responses:
        '204':
          description: SMS campaign updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
          - SMS Campaigns
      summary: Delete an SMS campaign
      operationId: deleteSmsCampaign
      parameters:
        - name: campaignId
          description: id of the SMS campaign
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '204':
          description: SMS campaign has been deleted
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /smsCampaigns/{campaignId}/sendNow:
    post:
      tags:
          - SMS Campaigns
      summary: Send your SMS campaign immediately
      operationId: sendSmsCampaignNow
      parameters:
        - name: campaignId
          description: id of the campaign
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '204':
          description: SMS campaign has been scheduled
        '400':
          description: SMS Campaign could not be sent
          schema:
            $ref: '#/definitions/errorModel'
        '402':
          description: You don't have enough credit to send your campaign. Please update your plan
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /smsCampaigns/{campaignId}/status:
    put:
      tags:
          - SMS Campaigns
      summary: Update a campaign's status
      operationId: updateSmsCampaignStatus
      parameters:
        - name: campaignId
          description: id of the campaign
          in: path
          type: integer
          format: int64
          required: true
        - name: status
          description: Status of the campaign.
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateCampaignStatus'
      responses:
        '204':
          description: The campaign status has been updated successfully
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /smsCampaigns/{campaignId}/sendTest:
    post:
      tags:
          - SMS Campaigns
      summary: Send a test SMS campaign
      operationId: sendTestSms
      parameters:
      - name: campaignId
        description: Id of the SMS campaign
        in: path
        type: integer
        format: int64
        required: true
      - name: phoneNumber
        description: Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted
        in: body
        required: true
        schema:
            $ref: '#/definitions/sendTestSms'
      responses:
        '204':
          description: Test SMS has been sent successfully to the recipient
        '400':
          description: Test SMS could not be sent to the following email addresses
          schema:
            $ref: '#/definitions/postSendSmsTestFailed'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /smsCampaigns/{campaignId}/exportRecipients:
    post:
      tags:
          - SMS Campaigns
      summary: Export an SMS campaign's recipients
      description: It returns the background process ID which on completion calls the notify URL that you have set in the input.
      operationId: requestSmsRecipientExport
      parameters:
        - name: campaignId
          description: id of the campaign
          in: path
          type: integer
          format: int64
          required: true
        - name: recipientExport
          description: Values to send for a recipient export request
          in: body
          required: false
          schema:
            $ref: '#/definitions/requestSmsRecipientExport'
      responses:
        '202':
          description: Recipient export request has been accepted
          schema:
            $ref: '#/definitions/createdProcessId'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'
  /smsCampaigns/{campaignId}/sendReport:
    post:
      tags:
          - SMS Campaigns
      summary: Send an SMS campaign's report
      description:  Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.
      operationId: sendSmsReport
      parameters:
      - name: campaignId
        description: id of the campaign
        in: path
        type: integer
        format: int64
        required: true
      - name: sendReport
        description: Values for send a report
        in: body
        required: true
        schema:
          $ref: '#/definitions/sendReport'
      responses:
        '204':
          description: Report has been successfully sent to the defined recipients
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Campaign ID not found
          schema:
            $ref: '#/definitions/errorModel'

  /transactionalSMS/sms:
    post:
      tags:
          - Transactional SMS
      summary: Send SMS message to a mobile number
      operationId: sendTransacSms
      parameters:
        - name: sendTransacSms
          description: Values to send a transactional SMS
          in: body
          required: true
          schema:
            $ref: '#/definitions/sendTransacSms'
      responses:
        '201':
          description: SMS has been sent successfully to the recipient
          schema:
            $ref: '#/definitions/sendSms'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '402':
          description: You don't have enough credit to send your SMS. Please update your plan
          schema:
            $ref: '#/definitions/errorModel'
  /transactionalSMS/statistics/aggregatedReport:
    get:
      tags:
          - Transactional SMS
      summary: Get your SMS activity aggregated over a period of time
      operationId: getTransacAggregatedSmsReport
      parameters:
        - name: startDate
          description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
          in: query
          required: false
          type: string
        - name: endDate
          description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
          in: query
          required: false
          type: string
        - name: days
          description: Number of days in the past including today (positive integer). Not compatible with startDate and endDate
          in: query
          required: false
          type: integer
        - name: tag
          description: Filter on a tag
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Aggregated SMS report informations
          schema:
            $ref: '#/definitions/getTransacAggregatedSmsReport'
          examples:
            application/json:
              {
                "range": "2015-05-22|2017-11-29",
                "requests": 54,
                "delivered": 16,
                "hardBounces": 5,
                "softBounces": 26,
                "blocked": 4,
                "unsubscribed": 10,
                "replied": 8,
                "accepted": 6,
                "rejected": 14
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /transactionalSMS/statistics/reports:
    get:
      tags:
          - Transactional SMS
      summary: Get your SMS activity aggregated per day
      operationId: getTransacSmsReport
      parameters:
        - name: startDate
          description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
          in: query
          required: false
          type: string
        - name: endDate
          description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
          in: query
          required: false
          type: string
        - name: days
          description: Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'
          in: query
          required: false
          type: integer
        - name: tag
          description: Filter on a tag
          in: query
          required: false
          type: string
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation
          required: false
          type: string
          enum:
            - asc
            - desc
          default: desc
      responses:
        '200':
          description: Aggregated SMS report informations
          schema:
            $ref: '#/definitions/getTransacSmsReport'
          examples:
            application/json:
              { "reports": [
                  {
                    "date":"2017-04-30",
                    "requests":10756,
                    "delivered":10103,
                    "hardBounces":21,
                    "softBounces":137,
                    "blocked":1026,
                    "unsubscribed":720,
                    "replied":5091,
                    "accepted":2318,
                    "rejected":0
                  },
                  {
                    "date":"2017-05-01",
                    "requests":18812,
                    "delivered":17499,
                    "hardBounces":34,
                    "softBounces":254,
                    "blocked":1514,
                    "unsubscribed":1090,
                    "replied":10089,
                    "accepted":4393,
                    "rejected":0
                  },
                  {
                    "date":"2017-05-02",
                    "requests":14321,
                    "delivered":13427,
                    "hardBounces":16,
                    "softBounces":176,
                    "blocked":1646,
                    "unsubscribed":1170,
                    "replied":11563,
                    "accepted":4689,
                    "rejected":0
                  }
                ]
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /transactionalSMS/statistics/events:
    get:
      tags:
          - Transactional SMS
      summary: Get all your SMS activity (unaggregated events)
      operationId: getSmsEvents
      parameters:
        - name: limit
          description: Number of documents per page
          in: query
          required: false
          type: integer
          format: int64
          default: 50
          maximum : 100
        - name: startDate
          description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
          in: query
          required: false
          type: string
        - name: endDate
          description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
          in: query
          required: false
          type: string
        - name: offset
          description: Index of the first document of the page
          in: query
          required: false
          type: integer
          format : int64
          default: 0
        - name: days
          description: Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'
          in: query
          required: false
          type: integer
        - name: phoneNumber
          description: Filter the report for a specific phone number
          in: query
          required: false
          type: string
        - name: event
          description: Filter the report for specific events
          in: query
          required: false
          type: string
          enum:
           - bounces
           - hardBounces
           - softBounces
           - delivered
           - sent
           - accepted
           - unsubscription
           - replies
           - blocked
           - rejected
        - name: tags
          description: Filter the report for specific tags passed as a serialized urlencoded array
          in: query
          required: false
          type: string
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation
          required: false
          type: string
          enum:
            - asc
            - desc
          default: desc
      responses:
        '200':
          description: Sms events report informations
          schema:
            $ref: '#/definitions/getSmsEventReport'
          examples:
            application/json:
                {
                  "events": [
                    {
                      "phoneNumber": "00911059469013",
                      "date": "2015-05-20T12:30:00Z",
                      "messageId": "1473139351170140",
                      "event": "sent",
                      "reason": "Recipient is currently unreachable",
                      "tag": "cabWaiting"
                    },
                    {
                      "phoneNumber": "00911059469013",
                      "date": "2015-05-20T16:30:00Z",
                      "messageId": "1473139351170140",
                      "event": "delivered",
                      "reason": "Recipient is currently unreachable",
                      "tag": "cabRequest"
                    },
                  ]
                }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /whatsappCampaigns/{campaignId}:
    get:
      tags:
      - WhatsApp Campaigns
      summary: Get a WhatsApp campaign
      operationId: getWhatsAppCampaign
      parameters:
      - name: campaignId
        in: path
        description: Id of the campaign
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Get WhatsApp campaign information on the basis of campaignId
          schema:
                $ref: '#/definitions/getWhatsappCampaignOverview'
          examples:
            application/json:
              response:
                value:
                  id: 1672035851100690
                  campaignName: Test WhatsApp Campaign
                  campaignStatus: sent
                  scheduledAt: 2022-12-26T09:50:00Z
                  senderNumber: 9368207029
                  recipients:
                  type: list
                  includedLists:
                  - 22
                  excludedLists:
                  - 45
                  template :
                    name : "official_campaign8"
                    category: "MARKETING"
                    language: "en"
                    contains_button : true
                    display_header : false
                    components :
                      - type : "BODY"
                        text : "making it look like readable English."
                      - type: "BUTTONS"
                        buttons :
                          - type: "URL"
                            text: "vLorem Ipsum is simply du"
                            url : "app.sendinblue"
                          - type: "PHONE_NUMBER"
                            text: "Lorem Ipsum is simply dum"
                            phone_number: "+918800613137"
                    header_variables :
                      - name:  "FIRSTNAME"
                        default: "INVALID HEADER"
                        index: 1
                        datatype: "text"
                    header_type : "text"
                    body_variable: []
                    button_type : "CALL_TO_ACTION"
                    header_footer: true
                  stats:
                    sent: 3,
                    delivered: 3,
                    read: 2,
                    unsubscribe: 0,
                    notSent: 4
                  createdAt: 2022-12-26T06:50:00Z
                  modifiedAt: 2022-12-26T08:50:00Z
        400:
          description: bad request
          schema:
                $ref: '#/definitions/errorModel'
        404:
          description: Campaign Id not found
          schema:
                $ref: '#/definitions/errorModel'
    delete:
      tags:
      - WhatsApp Campaigns
      summary: Delete a WhatsApp campaign
      operationId: deleteWhatsAppCampaign
      parameters:
      - name: campaignId
        in: path
        description: id of the campaign
        required: true
        type: integer
        format: int64
      responses:
        204:
          description: WhatsApp campaign has been deleted
        400:
          description: bad request
          schema:
                $ref: '#/definitions/errorModel'
        404:
          description: Campaign Id not found
          schema:
                $ref: '#/definitions/errorModel'
  /whatsappCampaigns/template-list :
    get:
      tags:
      - WhatsApp Campaigns
      summary: Return all your created WhatsApp templates
      operationId: getWhatsAppTemplates
      parameters:
      - name: startDate
        in: query
        description: |
          **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
          **Prefer to pass your timezone in date-time format for accurate result**
        type: string
      - name : endDate
        in : query
        description : |
          **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
          **Prefer to pass your timezone in date-time format for accurate result**
        type : string
      - name: limit
        in: query
        description: Number of documents per page
        maximum: 100
        minimum: 0
        type: integer
        format: int64
        default: 50
      - name: offset
        in: query
        description: Index of the first document in the page
        type: integer
        format: int64
        default: 0
      - name: sort
        in: query
        description: Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed
        required: false
        type: string
        default: desc
        enum:
          - asc
          - desc
      responses:
        200:
          description: WhatsApp templates informations
          schema:
                $ref: '#/definitions/getWATemplates'
          examples:
            application/json:
                  count: 2
                  templates:
                      - id: 235
                        name: campaign_22
                        type: whatsapp
                        status: approved
                        language: en
                        category: 'MARKETING'
                        errorReason: 'NONE'
                        createdAt: 2017-05-01T12:30:00Z
                        modifiedAt: 2017-05-01T12:30:00Z
                      - id: 124
                        name: test-template
                        type: whatsapp
                        status: draft
                        language: ''
                        category: 'MARKETING'
                        errorReason: 'NONE'
                        createdAt: 2017-05-01T12:30:00Z
                        modifiedAt: 2017-05-01T12:30:00Z
        400:
          description: bad request
          schema:
                $ref: '#/definitions/errorModel'
  /whatsappCampaigns :
    get :
      tags:
      - WhatsApp Campaigns
      summary: Return all your created WhatsApp campaigns
      operationId: getWhatsAppCampaigns
      parameters:
      - name: startDate
        in: query
        description: |
          **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
          **Prefer to pass your timezone in date-time format for accurate result**
        type: string
      - name : endDate
        in : query
        description : |
          **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
          **Prefer to pass your timezone in date-time format for accurate result**
        type : string
      - name: limit
        in: query
        description: Number of documents per page
        maximum: 100
        minimum: 0
        type: integer
        format: int64
        default: 50
      - name: offset
        in: query
        description: Index of the first document in the page
        type: integer
        format: int64
        default: 0
      - name: sort
        in: query
        description: Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed
        required: false
        type: string
        default: desc
        enum:
          - asc
          - desc
      responses:
        200:
          description: WhatsApp campaigns informations
          schema:
                $ref: '#/definitions/getWhatsappCampaigns'
          examples:
            application/json:
                  count: 23
                  campaigns:
                      - id: 1672035851100690
                        campaignName: campaign_22
                        campaignStatus: sent
                        templateId : 637660278078655
                        scheduledAt: 2022-12-27T09:50:00Z
                        errorReason : NONE
                        name: campaign_22
                        type: whatsapp
                        status: approved
                        language: en
                        category: 'MARKETING'
                        invalidatedContacts : 0
                        stats :
                          sent : 3
                          delivered: 3
                          read : 2
                          unsubscribe : 0
                          notSent : 4
                        readPercentage : 28.57
                        createdAt: 2017-05-01T12:30:00Z
                        modifiedAt: 2017-05-01T12:30:00Z
        400:
          description: bad request
          schema:
                $ref: '#/definitions/errorModel'
  /senders:
    get:
      tags:
        - Senders
      summary: Get the list of all your senders
      operationId: getSenders
      parameters:
        - name: ip
          description: Filter your senders for a specific ip (available for dedicated IP usage only)
          in: query
          type: string
        - name: domain
          description: Filter your senders for a specific domain
          in: query
          type: string
      responses:
        '200':
          description: list of senders
          schema:
            $ref: '#/definitions/getSendersList'
          examples:
            application/json:
                {
                  "senders": [
                    {
                      "id": 1,
                      "name": "Marketing",
                      "email": "marketing@mycompany.com",
                      "active": true,
                      "ips": [
                        {
                          "ip": "123.98.689.7",
                          "domain": "mycompany.com",
                          "weight": 100
                        }
                      ]
                    },
                    {
                      "id": 2,
                      "name": "Newsletter",
                      "email": "newsletter@mycompany.com",
                      "active": false,
                      "ips": [
                        {
                          "ip": "123.98.689.7",
                          "domain": "mycompany.com",
                          "weight" : 50
                        },
                        {
                          "ip": "123.98.643.2",
                          "domain": "news.mycompany.com",
                          "weight": 50
                        }
                      ]
                    }
                  ]
                }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
        - Senders
      summary: Create a new sender
      operationId: createSender
      parameters:
        - name: sender
          description: sender's name
          in: body
          schema:
            $ref: '#/definitions/createSender'
      responses:
        '201':
          description: sender created
          schema:
            $ref: '#/definitions/createSenderModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /senders/{senderId}:
    put:
      tags:
        - Senders
      summary: Update a sender
      operationId: updateSender
      parameters:
        - name: senderId
          description: Id of the sender
          in: path
          type: integer
          format: int64
          required: true
        - name: sender
          description: sender's name
          in: body
          schema:
            $ref: '#/definitions/updateSender'
      responses:
        '204':
          description: sender updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Sender ID not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
        - Senders
      summary: Delete a sender
      operationId: deleteSender
      parameters:
        - name: senderId
          description: Id of the sender
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '204':
          description: sender deleted
        '404':
          description: Sender ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /senders/{senderId}/ips:
    get:
      tags:
        - Senders
      summary: Get all the dedicated IPs for a sender
      operationId: getIpsFromSender
      parameters:
        - name: senderId
          description: Id of the sender
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: list of dedicated IPs
          schema:
            $ref: '#/definitions/getIpsFromSender'
          examples:
            application/json:
             {
              "ips": [
                {
                  "id": 3,
                  "ip": "123.65.8.22",
                  "domain": "mailing.myshop.dom",
                  "weight": 40
                },
                {
                  "id": 5,
                  "ip": "123.43.21.3",
                  "domain": "newsletter.myshop.dom",
                  "weight": 60
                }
              ]
            }
        '404':
          description: Sender ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /senders/ips:
    get:
      tags:
        - Senders
      summary: Get all the dedicated IPs for your account
      operationId: getIps
      responses:
        '200':
          description: list of dedicated IPs
          schema:
            $ref: '#/definitions/getIps'
          examples:
            application/json:
                {
                  "ips": [
                    {
                      "id": 3,
                      "ip": "67.145.89.3",
                      "active": true,
                      "domain": "mailing.myshop.com",
                    },
                    {
                      "id": 5,
                      "ip": "76.76.125.9",
                      "active": true,
                      "domain": "newsletter.myshop.com",
                    },
                    {
                      "id": 6,
                      "ip": "123.65.8.22",
                      "active": false,
                      "domain": "notifications.myshop.com",
                    }
                  ]
                }

  /webhooks:
    post:
      tags:
          - Webhooks
      summary: Create a webhook
      operationId: createWebhook
      parameters:
        - name: createWebhook
          description: Values to create a webhook
          in: body
          required: true
          schema:
            $ref: '#/definitions/createWebhook'
      responses:
        '201':
          description: Webhook created
          schema:
            $ref: '#/definitions/createModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    get:
      tags:
          - Webhooks
      summary: Get all webhooks
      operationId: getWebhooks
      parameters:
        - name: type
          description: Filter on webhook type
          in: query
          required: false
          type: string
          enum:
            - marketing
            - transactional
          default: transactional
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of webhook creation
          required: false
          type: string
          enum:
            - asc
            - desc
          default: desc
      responses:
        '200':
          description: Webhooks informations
          schema:
            $ref: '#/definitions/getWebhooks'
          examples:
            application/json:
              {
                "webhooks":[
                  {
                    "url": "https://example.domain.com/webhook/events/kzfxxxxxxxx0uyo1",
                    "id": 9864,
                    "description": "Webhook triggered on campaign openings",
                    "events": [
                      "opened"
                            ],
                    "type": "transac",
                    "createdAt": "2016-07-18T12:30:09Z",
                    "modifiedAt": "2016-07-18T16:00:50Z"
                  },
                  {
                    "url": "http://exmaple.domain.com/15kxxxxxn1",
                    "id": 22770,
                    "description": "Webhook triggered on campaign hard bounces",
                    "events": [
                      "hardBounces"
                              ],
                    "type": "marketing",
                    "createdAt": "2017-02-20T14:30:00Z",
                    "modifiedAt": "2017-02-20T19:00:00Z"
                  }
                ]
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /webhooks/{webhookId}:
    get:
      tags:
          - Webhooks
      summary: Get a webhook details
      operationId: getWebhook
      parameters:
        - name: webhookId
          description: Id of the webhook
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Webhook informations
          schema:
            $ref: '#/definitions/getWebhook'
          examples:
            application/json:
              {
                "url": "http://example.domain.com/1brxxxxxx5p1",
                "id": 7287,
                "description": "Webhook triggered on campaign openings and addition of lists",
                "events": [
                  "listAdditions",
                  "opened"
                         ],
                "type": "marketing",
                "createdAt": "2016-06-07T09:10:10Z",
                "modifiedAt": "2016-06-08T11:30:00Z"
              }
        '404':
          description: Webhook ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
          - Webhooks
      summary: Update a webhook
      operationId: updateWebhook
      parameters:
        - name: webhookId
          description: Id of the webhook
          in: path
          type: integer
          format: int64
          required: true
        - name: updateWebhook
          description: Values to update a webhook
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateWebhook'
      responses:
        '204':
          description: Webhook updated
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Webhook ID not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
          - Webhooks
      summary: Delete a webhook
      operationId: deleteWebhook
      parameters:
        - name: webhookId
          description: Id of the webhook
          in: path
          type: integer
          format: int64
          required: true
      responses:
        '204':
          description: Webhook deleted
        '404':
          description: Webhook ID not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'

  /reseller/children:
    get:
      tags:
        - Reseller
      summary: Get the list of all children accounts
      operationId: getResellerChilds
      parameters:
        - name: limit
          description: Number of documents for child accounts information per page
          in: query
          required: false
          type: integer
          format: int64
          default: 10
          maximum: 20
        - name: offset
          description: Index of the first document in the page
          in: query
          required: false
          type: integer
          format : int64
          default: 0
      responses:
        '200':
          description: list of children
          schema:
              $ref: '#/definitions/getChildrenList'
          examples:
            application/json :
                {
                  "children": [
                    {
                      "email": "john.smith@example.com",
                      "firstName": "John",
                      "lastName": "Smith",
                      "companyName": "MyCompany",
                      "credits": {
                        "emailCredits": 98555,
                        "smsCredits": 87556
                      },
                      "statistics": {
                        "previousMonthTotalSent": 7654,
                        "currentMonthTotalSent": 4566,
                        "totalSent": 987554
                      },
                      "password": "abC0xxxxxx3jkL",
                      "ips": ["176.2.39.4", "231.43.21.7"],
                      "apiKeys": {
                        "v2": [{
                          "name": "N˚2",
                          "key": "nOpxxxxxy7z"
                        }],
                        "v3": [{
                          "name": "N˚3",
                          "key": "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
                        }]
                      },
                      "id": 187588
                    },
                    {
                      "email": "alex.pain@example.com",
                      "firstName": "Alex",
                      "lastName": "Pain",
                      "companyName": "MyStore",
                      "credits": {
                        "emailCredits": 2000,
                        "smsCredits": 0
                      },
                      "statistics": {
                        "previousMonthTotalSent": 654,
                        "currentMonthTotalSent": 300,
                        "totalSent": 6553
                      },
                      "password": "abC0xxxxx64kL",
                      "ips": ["176.2.39.4", "231.43.21.7"],
                      "apiKeys": {
                        "v2": [{
                          "name": "N˚2",
                          "key": "nOpxxxxxy7z"
                        }],
                        "v3": [{
                          "name": "N˚3",
                          "key": "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
                        }]
                      },
                      "id": 187669
                    }
                  ]
                }
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
        - Reseller
      summary: Creates a reseller child
      operationId: createResellerChild
      parameters:
        - name: resellerChild
          description: reseller child to add
          in: body
          schema:
            $ref: '#/definitions/createChild'
      responses:
        '201':
          description: child created
          schema:
            $ref: '#/definitions/createReseller'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}:
    get:
      tags:
        - Reseller
      summary: Get a child account's details
      operationId: getChildInfo
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
      responses:
        '200':
          description: Information for the child
          schema:
              $ref: '#/definitions/getChildInfo'
          examples:
            application/json:
                {
                  "email": "john.smith@example.com",
                  "firstName": "John",
                  "lastName": "Smith",
                  "companyName": "MyCompany",
                  "credits": {
                    "emailCredits": 98555,
                    "smsCredits": 87556
                  },
                  "statistics": {
                    "previousMonthTotalSent": 7654,
                    "currentMonthTotalSent": 4566,
                    "totalSent": 987554
                  },
                  "password": "abC0xxxxx3jkL",
                  "ips": ["176.2.39.4", "231.43.21.7"],
                  "apiKeys": {
                    "v2": [{
                      "name": "N˚2",
                      "key": "nOpxxxxxy7z"
                    }],
                    "v3": [{
                      "name": "N˚3",
                      "key": "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
                    }]
                  }
              }
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
        - Reseller
      summary: Update info of reseller's child based on the child identifier supplied
      operationId: updateResellerChild
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
        - name: resellerChild
          description: values to update in child profile
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateChild'
      responses:
        '204':
          description: reseller's child updated
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
        - Reseller
      summary: Delete a single reseller child based on the child identifier supplied
      operationId: deleteResellerChild
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or child id of reseller's child
          required: true
          type: string
      responses:
        '204':
          description: child deleted
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}/accountStatus:
    put:
      tags:
        - Reseller
      summary: Update info of reseller's child account status based on the identifier supplied
      operationId: updateChildAccountStatus
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
        - name: updateChildAccountStatus
          description: values to update in child account status
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateChildAccountStatus'
      responses:
        '204':
          description: reseller's child account status updated
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}/accountCreationStatus:
    get:
      tags:
        - Reseller
      summary: Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
      operationId: getChildAccountCreationStatus
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
      responses:
        '200':
          description: status of reseller's child account
          schema:
              $ref: '#/definitions/getChildAccountCreationStatus'
          examples:
            application/json:
              {
                "childAccountCreated": true
              }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}/ips/associate:
    post:
      tags:
        - Reseller
      summary: Associate a dedicated IP to the child
      operationId: associateIpToChild
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
        - name: ip
          description: IP to associate
          in: body
          required: true
          schema:
            $ref: '#/definitions/manageIp'
      responses:
        '204':
          description: Dedicated IP is associated to the child
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}/ips/dissociate:
    post:
      tags:
        - Reseller
      summary: Dissociate a dedicated IP to the child
      operationId: dissociateIpFromChild
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
        - name: ip
          description: IP to dissociate
          in: body
          required: true
          schema:
            $ref: '#/definitions/manageIp'
      responses:
        '204':
          description: Dedicated IP is dissociated from the child
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}/credits/add:
    post:
      tags:
        - Reseller
      summary: Add Email and/or SMS credits to a specific child account
      operationId: addCredits
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
        - name: addCredits
          description: Values to post to add credit to a specific child account
          required: true
          in: body
          schema:
            $ref: '#/definitions/addCredits'
      responses:
        '200':
          description: Credits added
          schema:
            $ref: '#/definitions/remainingCreditModel'
          examples:
            application/json:
                {
                  "child": {
                    "sms": 500,
                    "email": 2000
                  },
                  "reseller": {
                    "sms": 12900,
                    "email": 2000000
                  }
                }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}/credits/remove:
    post:
      tags:
        - Reseller
      summary: Remove Email and/or SMS credits from a specific child account
      operationId: removeCredits
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
        - name: removeCredits
          description: Values to post to remove email or SMS credits from a specific child account
          required: true
          in: body
          schema:
            $ref: '#/definitions/removeCredits'
      responses:
        '200':
          description: Credits removed
          schema:
            $ref: '#/definitions/remainingCreditModel'
          examples:
            application/json:
                {
                  "child": {
                    "sms": 500,
                    "email": 2000
                  },
                  "reseller": {
                    "sms": 12900,
                    "email": 2000000
                  }
                }
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}/domains:
    get:
      tags:
        - Reseller
      summary: Get all sender domains for a specific child account
      operationId: getChildDomains
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
      responses:
        '200':
          description: Sender domains of the child
          schema:
              $ref: '#/definitions/getChildDomains'
          examples:
            application/json:
                [{
                  "domain": "mycustomdomain.com",
                  "active": true
                }, {
                  "domain": "mynewdomain.com",
                  "active": true
                }]
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
        - Reseller
      summary: Create a domain for a child account
      operationId: createChildDomain
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
        - name: addChildDomain
          description: Sender domain to add for a specific child account. This will not be displayed to the parent account.
          required: true
          in: body
          schema:
            $ref: '#/definitions/addChildDomain'
      responses:
        '201':
          description: Domain added
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}/domains/{domainName}:
    put:
      tags:
        - Reseller
      summary: Update the sender domain of reseller's child based on the childIdentifier and domainName passed
      operationId: updateChildDomain
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
        - name: domainName
          in: path
          description: Pass the existing domain that needs to be updated
          required: true
          type: string
        - name: updateChildDomain
          description: value to update for sender domain
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateChildDomain'
      responses:
        '204':
          description: reseller's child domain updated
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
        - Reseller
      summary: Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
      operationId: deleteChildDomain
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
        - name: domainName
          in: path
          description: Pass the existing domain that needs to be deleted
          required: true
          type: string
      responses:
        '204':
          description: child domain deleted
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'
  /reseller/children/{childIdentifier}/auth:
    get:
      tags:
        - Reseller
      summary: Get session token to access Sendinblue (SSO)
      description: It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]
      operationId: getSsoToken
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          type: string
      responses:
        '200':
          description: Session token
          schema:
              $ref: '#/definitions/getSsoToken'
          examples:
            application/json:
                {
                  "token": "5cadaxxxxxxxxxxxxxxxxxxxx5a179f85a0"
                }
        '403':
          description: Current account is not a reseller
          schema:
            $ref: '#/definitions/errorModel'
        '404':
          description: Child auth key or child id not found
          schema:
            $ref: '#/definitions/errorModel'
        '400':
          description: bad request
          schema:
            $ref: '#/definitions/errorModel'

  /account:
    get:
      tags:
        - Account
      summary: Get your account information, plan and credits details
      operationId: getAccount
      responses:
        '200':
          description: account informations
          schema:
            $ref: '#/definitions/getAccount'
          examples:
            application/json :
              {
                "plan": [
                  {
                    "type": "payAsYouGo",
                    "credits": 5000,
                    "creditsType": "sendLimit"
                  },
                  {
                    "type": "subscription",
                    "credits": 39983,
                    "creditsType": "sendLimit",
                    "startDate": "2017-03-11",
                    "endDate": "2017-04-11"
                  },
                  {
                    "type": "sms",
                    "credits": 999.5360000000001,
                    "creditsType": "sendLimit"
                  }
                ],
                "relay": {
                  "enabled": true,
                  "data": {
                    "userName": "john.smith@example.com",
                    "relay": "smtp-relay.domain.com",
                    "port": 587
                  }
                },
                "marketingAutomation": {
                  "key": "kzfr5xxxxxxttuyo1",
                  "enabled": true
                },
                "email": "john.smith@example.com",
                "firstName": "John",
                "lastName": "Smith",
                "companyName": "MyShop",
                "address": {
                  "city": "New-York",
                  "street": "1677B 8th Avenue",
                  "zipCode": "7665",
                  "country": "USA"
                }
              }

  /processes:
    get:
        tags:
          - Process
        summary: Return all the processes for your account
        operationId: getProcesses
        parameters:
        - name: limit
          description: Number limitation for the result returned
          in: query
          required: false
          type: integer
          format: int64
          default: 10
          maximum: 50
        - name: offset
          description: Beginning point in the list to retrieve from.
          in: query
          required: false
          type: integer
          format : int64
          default: 0
        responses:
            '200':
              description: processes informations
              schema:
                $ref: '#/definitions/getProcesses'
              examples:
                application/json:
                  {
                    "processes": [
                      {
                      "id": 40,
                      "status": "completed",
                      "name": "TRANS-CALC"
                      },
                      {
                      "id": 43,
                      "status": "queued",
                      "name": "TRANS-GLOBAL-CALC"
                      },
                      {
                      "id": 194,
                      "status": "completed",
                      "name": "SEARCH_EXPORT_USERS",
                      "export_url": "<a href=\"https://export-url.com/upload/file-name.csv\" target=\"_blank\">filename.csv</a>"
                      }
                      ],
                  "count": 3
                  }
            '400':
              description: bad request
              schema:
                $ref: '#/definitions/errorModel'
  /processes/{processId}:
    get:
        tags:
          - Process
        summary: Return the informations for a process
        operationId: getProcess
        parameters:
          - name: processId
            description: Id of the process
            in: path
            type: integer
            format: int64
            required: true
        responses:
            '200':
              description: process informations
              schema:
                $ref: '#/definitions/getProcess'
              examples:
                application/json:
                  {
                      "id": 194,
                      "status": "completed",
                      "name": "SEARCH_EXPORT_USERS",
                      "export_url": "<a href=\"https://export-url.com/upload/file-name.csv\" target=\"_blank\">filename.csv</a>"
                  }
            '404':
              description: Process ID not found
              schema:
                $ref: '#/definitions/errorModel'
              examples:
                application/json:
                  {
                    "code": "invalid_parameter",
                    "message": "processId is invalid"
                  }
            '400':
              description: bad request
              schema:
                $ref: '#/definitions/errorModel'

securityDefinitions:
  api-key:
    type: apiKey
    name: api-key
    description: The API key should be passed in the request headers as `api-key` for authentication.
    in: header

security:
  - api-key: []

definitions:

  getAccount:
    allOf:
    - $ref: '#/definitions/getExtendedClient'
    - type: object
      required:
        - plan
        - relay
      properties:
        plan:
          description: Information about your plans and credits
          type: array
          items:
            type: object
            required:
              - type
              - creditsType
              - credits
            properties:
              type:
                type: string
                description : Displays the plan type of the user
                enum:
                  - payAsYouGo
                  - free
                  - subscription
                  - sms
                  - reseller
                example : 'subscription'
              creditsType:
                type: string
                description: This is the type of the credit, "Send Limit" is one of the possible types of credit of a user. "Send Limit" implies the total number of emails you can send to the subscribers in your account.
                enum:
                  - sendLimit
                example : 'sendLimit'
              credits:
                type: number
                format: float
                description: Remaining credits of the user
                example: 8755
              startDate:
                description: Date of the period from which the plan will start (only available for "subscription" and "reseller" plan type)
                type: string
                format: date
                example: '2016-12-31'
              endDate:
                description: Date of the period from which the plan will end (only available for "subscription" and "reseller" plan type)
                type: string
                format: date
                example: '2017-01-31'
              userLimit:
                description: Only in case of reseller account. It implies the total number of child accounts you can add to your account.
                type: integer
                example: 10
        relay:
          description : Information about your transactional email account
          type: object
          required:
            - enabled
            - data
          properties:
            enabled :
              description : Status of your transactional email Account (true=Enabled, false=Disabled)
              type: boolean
              example : true
            data:
              type: object
              description: Data regarding the transactional email account
              required:
                - userName
                - relay
                - port
              properties:
                userName:
                  description: Email to use as login on transactional platform
                  type: string
                  format: email
                  example : 'john.smith@example.com'
                relay:
                  description: URL of the SMTP Relay
                  type: string
                  example: 'relay.domain.com'
                port:
                  description: Port used for SMTP Relay
                  type: integer
                  example: 125
        marketingAutomation:
          type: object
          required:
            - enabled
          properties:
            key:
              description: Marketing Automation Tracker ID
              type: string
              example: 'iso05aopqych87ysy0jymf'
            enabled:
              description: Status of Marketing Automation Plateform activation for your account (true=enabled, false=disabled)
              type: boolean
              example: false

  getChildrenList:
    type: object
    required:
      - count
    properties:
      children:
        description: Your children's account information
        type: array
        items:
          type: object
          allOf:
          - $ref: '#/definitions/getChildInfo'
          - type: object
            properties:
              id:
                description: ID of the child
                type: integer
                format: int64
                example: 187588
      count:
        type: integer
        format: int64
        description: Number of child accounts
        example: 24

  getChildInfo:
    type: object
    allOf:
    - $ref: '#/definitions/getClient'
    - type: object
      required:
        - password
      properties:
        credits:
          description: Credits available for your child
          type: object
          properties:
            emailCredits:
              description : Email credits available for your child
              type: integer
              format: int64
              example: 98555
            smsCredits:
              description: SMS credits available for your child
              type: integer
              format: int64
              example : 87556
        statistics:
          description : Statistics about your child account activity
          type: object
          properties:
            previousMonthTotalSent:
              description : Overall emails sent for the previous month
              type: integer
              format: int64
              example : 7654
            currentMonthTotalSent:
              description : Overall emails sent for current month
              type: integer
              format: int64
              example: 4566
            totalSent:
              description: Overall emails sent for since the account exists
              type: integer
              format: int64
              example: 987554
        password:
          description: The encrypted password of child account
          type: string
          format: password
          example: 'abC01De2fGHI3jkL'
        ips:
          description : IP(s) associated to a child account user
          type: array
          items:
            type: string
            description: IP(s) associated to the user
            example: ['17.321.333.54', '20.90.76.213']
        apiKeys:
          description: API Keys associated to child account
          type: object
          required:
              - v2
          properties:
            v2:
              type: array
              items:
                type: object
                required:
                  - name
                  - key
                properties:
                  name:
                    description : Name of the key for version 2
                    type: string
                    example : 'N˚2'
                  key:
                    description : API Key for version 2
                    type: string
                    example: 'nOpxxxxxy7z'
            v3:
              type: array
              items:
                type: object
                required:
                  - name
                  - key
                properties:
                  name:
                    description : Name of the key for version 3
                    type: string
                    example : 'N˚3'
                  key:
                    description : API Key for version 3
                    type: string
                    example: 'xkeysib-21881axxxxxcc92e04-mIrexxxx7z'

  getChildAccountCreationStatus:
    type: object
    required:
      - childAccountCreated
    properties:
      childAccountCreated:
        description: Status of child account creation whether it is successfully created (exists) or not.
        type: boolean
        example: true

  getChildDomains:
    type: array
    items:
      type: object
      allOf:
        - $ref: '#/definitions/getChildDomain'

  getSsoToken:
    type: object
    required:
      - token
    properties:
      token:
        description: Session token. It will remain valid for a short period of time only.
        type: 'string'
        example: 'ede520dxxxxxxxxxxxx76d631fba2'

  getChildDomain:
    type: object
    required:
      - domain
      - active
    properties:
      domain:
        description: Sender domain
        type: string
        example: 'mycustomdomain.com'
      active:
        description: indicates whether a domain is verified or not
        type: boolean
        example: true

  getClient:
    type: object
    required:
      - email
      - firstName
      - lastName
      - companyName
    properties:
      email:
        description: Login Email
        type: string
        format: email
        example: 'john.smith@example.com'
      firstName:
        description: First Name
        type: string
        example : 'John'
      lastName:
        description: Last Name
        type: string
        example : 'Smith'
      companyName:
        description: Name of the company
        type: string
        example: 'MyCompany'

  getExtendedClient:
    type: object
    allOf:
      - $ref: '#/definitions/getClient'
      - type: object
        required:
          - address
        properties:
          address:
            description : Address informations
            type: object
            required:
              - city
              - street
              - zipCode
              - country
            properties:
              street:
                description : Street information
                type: string
                example : '47 Harbour Street'
              city:
                description : City information
                type: string
                example : 'New-York'
              zipCode:
                description : Zip Code information
                type: string
                example: '9867'
              country:
                description : Country information
                type: string
                example: 'United States of America'

  getSendersList:
    type: object
    properties:
      senders:
        description : List of the senders available in your account
        type: array
        items:
          type: object
          required:
            - id
            - name
            - email
            - active
          properties:
            id:
              description : Id of the sender
              type: integer
              format: int64
              example: 0
            name:
              description : From Name associated to the sender
              type: string
              example: 'Marketing'
            email:
              description : From Email associated to the sender
              type: string
              example: 'marketing@mycompany.com'
            active:
              description : Status of sender (true=activated, false=deactivated)
              type: boolean
              example: false

            ips:
              description : List of dedicated IP(s) available in the account. This data is displayed only for dedicated IPs
              type: array
              items:
                type: object
                required:
                  - ip
                  - domain
                  - weight
                properties:
                  ip:
                    description: Dedicated IP available in your account
                    type: string
                    example : '123.98.689.7'
                  domain:
                    description: Domain of the IP
                    type: string
                    example : 'mycompany.com'
                  weight:
                    description : Weight of the IP for this sender
                    type: integer
                    format: int64
                    example: 50

  createChild:
    type: object
    required:
      - email
      - firstName
      - lastName
      - companyName
      - password
    properties:
      email:
        description: Email address to create the child account
        type: string
        format: email
        example: 'josh.cruise@example.com'
      firstName:
        type: string
        description: First name to use to create the child account
        example: 'Josh'
      lastName:
        type: string
        description: Last name to use to create the child account
        example: 'Cruise'
      companyName:
        type: string
        description: Company name to use to create the child account
        example: 'Your Company'
      password:
        type: string
        format: password
        description: Password for the child account to login
        example: 'Pa55w0rd65'
      language:
        description: Language of the child account
        enum:
          - fr
          - es
          - pt
          - it
          - de
          - en
        type: string
        example: 'en'

  createSender:
    type: object
    required:
      - name
      - email
    properties:
      name:
        type: string
        description: From Name to use for the sender
        example: 'Newsletter'
      email:
        type: string
        format: email
        description: From email to use for the sender. A verification email will be sent to this address.
        example: 'newsletter@mycompany.com'
      ips:
        type: array
        description:  Mandatory in case of dedicated IP, IPs to associate to the sender
        items:
          type: object
          required:
            - ip
            - domain
          properties:
            ip:
              description: Dedicated IP available in your account
              type: string
              example : '123.98.689.7'
            domain:
              description: Domain of the IP
              type: string
              example : 'mycompany.com'
            weight:
              description: Weight to apply to the IP. Sum of all IP weights must be 100. Should be passed for either ALL or NONE of the IPs. If it's not passed, the sending will be equally balanced on all IPs.
              type: integer
              format: int64
              maximum: 100
              minimum: 1
              example: 50

  updateSender:
    type: object
    properties:
      name:
        type: string
        description: From Name to update the sender
        example: 'Newsletter'
      email:
        type: string
        format: email
        description: From Email to update the sender
        example: 'newsletter@mycompany.com'
      ips:
        type: array
        description: Only in case of dedicated IP, IPs to associate to the sender. If passed, will replace all the existing IPs.
        items:
          type: object
          required:
            - ip
            - domain
          properties:
            ip:
              description: Dedicated IP available in your account
              type: string
              example : '123.98.689.7'
            domain:
              description: Domain of the IP
              type: string
              example : 'mycompany.com'
            weight:
              description: Weight to apply to the IP. Sum of all IP weights must be 100. Should be passed for either ALL or NONE of the IPs. If it's not passed, the sending will be equally balanced on all IPs.
              type: integer
              format: int64
              maximum: 100
              minimum: 1
              example: 50

  updateChild:
    type: object
    properties:
      email:
        type: string
        format: email
        description: New Email address to update the child account
        example: 'josh.cruise@example.com'
      firstName:
        type: string
        description: New First name to use to update the child account
        example: 'Josh'
      lastName:
        type: string
        description: New Last name to use to update the child account
        example: 'Cruise'
      companyName:
        type: string
        description: New Company name to use to update the child account
        example: 'Your Company'
      password:
        type: string
        format: password
        description: New password for the child account to login
        example: 'Pa55w0rd65'

  updateChildAccountStatus:
    type: object
    properties:
      transactionalEmail:
        description: Status of Transactional Email Platform activation for your account (true=enabled, false=disabled)
        type: boolean
        example: false
      transactionalSms:
        description: Status of Transactional SMS Platform activation for your account (true=enabled, false=disabled)
        type: boolean
        example: false
      marketingAutomation:
        description: Status of Marketing Automation Platform activation for your account (true=enabled, false=disabled)
        type: boolean
        example: true
      smsCampaign:
        description: Status of SMS Campaign Platform activation for your account (true=enabled, false=disabled)
        type: boolean
        example: true

  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        enum:
          - invalid_parameter
          - missing_parameter
          - out_of_range
          - campaign_processing
          - campaign_sent
          - document_not_found
          - reseller_permission_denied
          - not_enough_credits
          - permission_denied
          - duplicate_parameter
          - duplicate_request
          - method_not_allowed
          - unauthorized
          - account_under_validation
          - not_acceptable
        description: Error code displayed in case of a failure
        example: 'method_not_allowed'
      message:
        type: string
        description: Readable message associated to the failure
        example: 'POST Method is not allowed on this path'

  remainingCreditModel:
    type: object
    required:
      - child
      - reseller
    properties:
      child:
        description :  Credits remaining for child account
        type: object
        required:
          - sms
          - email
        properties:
          sms:
            type: number
            format: double
            description : SMS Credits remaining for child account
            example : 500
          email:
            type: number
            format: double
            description : Email Credits remaining for child account
            example : 2000
      reseller:
        type: object
        required:
          - sms
          - email
        properties:
          sms:
            type: number
            format: double
            description : SMS Credits remaining for reseller account
            example : 12900
          email:
            type: number
            format: double
            description : Email Credits remaining for reseller account
            example : 2000000

  addCredits:
    type: object
    properties:
      sms:
        description: Required if email credits are empty. SMS credits to be added to the child account
        type: integer
        format: int64
        example: 450
      email:
        description: Required if sms credits are empty. Email credits to be added to the child account
        type: integer
        format: int64
        example: 1200

  removeCredits:
    type: object
    properties:
      sms:
        description: Required if email credits are empty. SMS credits to be removed from the child account
        type: integer
        format: int64
        example: 300
      email:
        description: Required if sms credits are empty. Email credits to be removed from the child account
        type: integer
        format: int64
        example: 500

  addChildDomain:
    type: object
    properties:
      domain:
        description: Sender domain to add for a specific child account
        type: string
        example: 'mychilddomain.com'

  updateChildDomain:
    type: object
    properties:
      domain:
        description: Value for the sender domain that will replace the existing domain
        type: string
        example: 'myupdateddomain.com'

  getProcesses:
    type: object
    required:
      - count
    properties:
      processes:
        description: List of processes available on your account
        type: array
        items:
          type: object
          $ref: '#/definitions/getProcess'
      count:
        type: integer
        format: int64
        description : Number of processes available on your account
        example: 5

  getProcess:
    type: object
    required:
      - id
      - status
      - name
    properties:
      id:
         type: integer
         format: int64
         description: Id of the process
         example: 145
      status:
         type: string
         enum :
          - queued
          - in_process
          - completed
         description: Status of the process
         example: 'queued'
      name:
         type: string
         description: Process name
         example: 'IMPORTUSER'
      export_url:
         type: string
         description: URL on which send export the of contacts once the process is completed
         example: 'http://requestb.in/16ua3aj1'

  getEmailCampaigns:
    type: object
    required:
      - count
    properties:
      campaigns:
        type: array
        items:
          type: object
          allOf:
            - $ref: '#/definitions/getExtendedCampaignOverview'
            - type: object
              required:
                - recipients
                - statistics
              properties:
                recipients:
                  allOf:
                   - $ref: '#/definitions/getCampaignRecipients'
                statistics:
                  allOf:
                  - $ref: '#/definitions/getExtendedCampaignStats'
                shareLink:
                  type: string
                  format: url
                  description: Link to share the campaign on social medias
                  example: 'http://dhh.sendinblue.com/fhsgccc.html?t=9865448900'
      count:
        type: integer
        format: int64
        description: Number of Email campaigns retrieved
        example: 24

  getSmsCampaigns:
    type: object
    required:
      - count
    properties:
      campaigns:
        type: array
        items:
          type: object
          allOf:
            - $ref: '#/definitions/getSmsCampaignOverview'
            - type: object
              required:
                - recipients
                - statistics
              properties:
                recipients:
                  allOf:
                    - $ref: '#/definitions/getCampaignRecipients'
                statistics:
                  allOf:
                    - $ref: '#/definitions/getSmsCampaignStats'
      count:
        type: integer
        format: int64
        description: Number of SMS campaigns retrieved
        example: 12

  getSmsCampaign:
    allOf:
      - $ref: '#/definitions/getSmsCampaignOverview'
      - type: object
        required:
          - recipients
          - statistics
        properties:
          recipients:
            type: object
            allOf:
              - $ref: '#/definitions/getCampaignRecipients'
          statistics:
            type: object
            allOf:
              - $ref: '#/definitions/getSmsCampaignStats'

  getEmailCampaign:
    allOf:
      - $ref: '#/definitions/getExtendedCampaignOverview'
      - type: object
        required:
          - recipients
          - statistics
        properties:
          recipients:
            type: object
            allOf:
              - $ref: '#/definitions/getCampaignRecipients'
          statistics:
            type: object
            allOf:
              - $ref: '#/definitions/getExtendedCampaignStats'

  getCampaignOverview:
    type: object
    required:
     - id
     - name
     - type
     - status
    properties:
      id:
        type: integer
        format: int64
        description: ID of the campaign
        example : 12
      name:
        type: string
        description: Name of the campaign
        example : 'EN - Sales Summer 2017'
      subject:
        type: string
        description: Subject of the campaign. Only available if `abTesting` flag of the campaign is `false`
        example : '20% OFF for 2017 Summer Sales'
      type:
        type: string
        enum:
          - classic
          - trigger
        description: Type of campaign
        example: 'classic'
      status:
        type: string
        enum:
          - draft
          - sent
          - archive
          - queued
          - suspended
          - in_process
        description: Status of the campaign
        example: 'sent'
      scheduledAt:
        type: string
        format: date-time
        description: UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
        example : '2017-06-01T12:30:00Z'
      abTesting:
        description: Status of A/B Test for the campaign. abTesting = false means it is disabled, & abTesting = true means it is enabled.
        type: boolean
        example: true
      subjectA:
        description: Subject A of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
        type: string
        example: 'Discover the New Collection!'
      subjectB:
        description: Subject B of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
        type: string
        example: 'Want to discover the New Collection?'
      splitRule:
        description: The size of your ab-test groups. Only available if `abTesting` flag of the campaign is `true`
        type: integer
        example: 25
      winnerCriteria:
        description: Criteria for the winning version. Only available if `abTesting` flag of the campaign is `true`
        type: string
        example: 'open'
      winnerDelay:
        description: The duration of the test in hours at the end of which the winning version will be sent. Only available if `abTesting` flag of the campaign is `true`
        type: integer
        example: 50
      sendAtBestTime:
        type: boolean
        description: It is true if you have chosen to send your campaign at best time, otherwise it is false
        example: true

  getExtendedCampaignOverview:
    allOf:
      - $ref: '#/definitions/getCampaignOverview'
      - type: object
        required:
         - testSent
         - header
         - footer
         - sender
         - replyTo
         - toField
         - htmlContent
         - tag
         - createdAt
         - modifiedAt
        properties:
          testSent:
            type: boolean
            description: Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent)
            example: true
          header:
            type: string
            description: Header of the campaign
            example: '[DEFAULT_HEADER]'
          footer:
            type: string
            description: Footer of the campaign
            example: '[DEFAULT_FOOTER]'
          sender:
            type: object
            properties:
              name:
                description:  Sender name of the campaign
                type: string
                example: 'Marketing'
              email:
                description: Sender email of the campaign
                type: string
                format: email
                example: 'marketing@mycompany.com'
              id:
                description: Sender id of the campaign
                type: integer
                format: int64
                example: 43
          replyTo:
            type: string
            format: email
            description: Email defined as the "Reply to" of the campaign
            example: 'replyto@domain.com'
          toField:
            type: string
            description: Customisation of the "to" field of the campaign
            example: '{FNAME} {LNAME}'
          htmlContent:
            type: string
            description: HTML content of the campaign
            example: 'This is my HTML Content'
          shareLink:
            type: string
            format: url
            description: Link to share the campaign on social medias
            example: 'http://dhh.sendinblue.com/fhsgccc.html?t=9865448900'
          tag:
            type: string
            description: Tag of the campaign
            example: 'Newsletter'
          createdAt:
            type: string
            format: date-time
            description: Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
            example: '2017-05-01T12:30:00Z'
          modifiedAt:
            type: string
            format: date-time
            description: UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
            example: '2017-05-01T12:30:00Z'
          inlineImageActivation:
            type: boolean
            description: Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email.
            example: true
          mirrorActive:
            type: boolean
            description: Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
            example: true
          recurring:
            description : FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
            type: boolean
            example: true
          sentDate:
            type: string
            format: date-time
            description: Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if 'status' of the campaign is 'sent'
            example: '2018-12-01T16:30:00Z'
          returnBounce:
            description: Total number of non-delivered campaigns for a particular campaign id.
            type: integer
            format: int64
            example: 5

  getCampaignRecipients:
     type: object
     required:
      - lists
      - exclusionLists
     properties:
      lists:
        type: array
        items:
          type: integer
          format: int64
          description: List IDs included in the campaign
          example: 21
      exclusionLists:
        type: array
        items:
          type: integer
          format: int64
          description: List IDs excluded of the campaign
          example: 13

  getExtendedCampaignStats:
     type: object
     required:
      - globalStats
      - campaignStats
      - mirrorClick
      - remaining
      - linksStats
      - statsByDomain
      - statsByDevice
      - statsByBrowser
     properties:
      globalStats:
        type: object
        description: Overall statistics of the campaign
        allOf:
          - $ref: '#/definitions/getCampaignStats'
      campaignStats:
        type: array
        description: List-wise statistics of the campaign.
        items:
          type: object
          allOf:
            - $ref: '#/definitions/getCampaignStats'
      mirrorClick:
        type: integer
        format: int64
        description: Number of clicks on mirror link
        example: 120
      remaining:
        type: integer
        format: int64
        description: Number of remaning emails to send
        example: 1000
      linksStats:
        type: object
        description: Statistics about the number of clicks for the links
        example: {"example.abc.com": 7, "example.domain.com": 10}
      statsByDomain:
        $ref: '#/definitions/getStatsByDomain'
      statsByDevice:
        description: Statistics about the campaign on the basis of various devices
        $ref: '#/definitions/getStatsByDevice'
      statsByBrowser:
        description: Statistics about the campaign on the basis of various browsers
        $ref: '#/definitions/getStatsByBrowser'

  getStatsByDomain:
    type: object
    additionalProperties:
      $ref: '#/definitions/getCampaignStats'

  getStatsByDevice:
    type: object
    properties:
      desktop:
        type: object
        description: Statistics of the campaign on the basis of desktop devices
        additionalProperties:
          $ref: '#/definitions/getDeviceBrowserStats'
      mobile:
        type: object
        description: Statistics of the campaign on the basis of mobile devices
        additionalProperties:
          $ref: '#/definitions/getDeviceBrowserStats'
      tablet:
        type: object
        description: Statistics of the campaign on the basis of tablet devices
        additionalProperties:
          $ref: '#/definitions/getDeviceBrowserStats'
      unknown:
        type: object
        description: Statistics of the campaign on the basis of unknown devices
        additionalProperties:
          $ref: '#/definitions/getDeviceBrowserStats'

  getStatsByBrowser:
    type: object
    additionalProperties:
      $ref: '#/definitions/getDeviceBrowserStats'

  addContactToList:
    type: object
    properties:
      emails:
        description: Emails to add to a list. You can pass a maximum of 150 emails for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api.
        type: array
        minItems: 1
        maxItems: 150
        items:
          type: string
          format: email
          description: Email to add to a list
          example: 'john.smith@contact.com'

  removeContactFromList:
    type: object
    properties:
      emails:
        description: "Required if 'all' is false. Emails to remove from a list. You can pass a maximum of 150 emails for removal in one request."
        type: array
        minItems: 1
        maxItems: 150
        items:
          type: string
          format: email
          description: Email to remove from a list
          example: 'john.smith@contact.com'
      ids:
        description: "Required if 'all' is false and 'emails' is empty. IDs to remove from a list. You can pass a maximum of 150 IDs for removal in one request."
        type: array
        minItems: 1
        maxItems: 150
        items:
          type: integer
          description: ID to remove from a list
          example: 1
      all:
        description: "Required if 'emails' is empty. Remove all existing contacts from a list. A process will be created in this scenario. You can fetch the process details to know about the progress"
        type: boolean
        example: false

  getSmsCampaignOverview:
    type: object
    required:
     - id
     - name
     - status
     - content
     - scheduledAt
     - sender
     - createdAt
     - modifiedAt
    properties:
      id:
        type: integer
        format: int64
        description: ID of the SMS Campaign
        example: 2
      name:
        type: string
        description: Name of the SMS Campaign
        example: 'PROMO CODE'
      status:
        type: string
        enum:
          - draft
          - sent
          - archive
          - queued
          - suspended
          - inProcess
        description: Status of the SMS Campaign
        example: 'draft'
      content:
        type: string
        description: Content of the SMS Campaign
        example: 'Visit our Store and get some discount !'
      scheduledAt:
        type: string
        format: date-time
        description: UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
        example : '2017-06-01T12:30:00Z'
      sender:
        type: string
        description: Sender of the SMS Campaign
        example: 'MyCompany'
      createdAt:
        type: string
        format: date-time
        description: Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
        example: '2017-06-01T12:30:00Z'
      modifiedAt:
        type: string
        format: date-time
        description: UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
        example: '2017-05-01T12:30:00Z'
  getWhatsappCampaignOverview:
      required:
      - id
      - campaignName
      - campaignStatus
      - senderNumber
      - recipients
      - createdAt
      - template
      - modifiedAt
      type: object
      properties:
        id:
          type: integer
          description: ID of the WhatsApp Campaign
          format: int64
          example: 1672035851100690
        campaignName:
          type: string
          description: Name of the WhatsApp Campaign
          example: Test Campaign
        campaignStatus:
          type: string
          description: Status of the WhatsApp Campaign
          example: draft
          enum:
          - draft
          - scheduled
          - pending
          - approved
          - running
          - suspended
          - rejected
          - sent
        scheduledAt:
          type: string
          description: UTC date-time on which WhatsApp campaign is scheduled. Should be
            in YYYY-MM-DDTHH:mm:ss.SSSZ format
          example: 2017-06-01T12:30:00Z
        senderNumber:
          type: string
          description: Sender of the WhatsApp Campaign
          example: 9368207029
        stats :
          $ref: '#/definitions/WhatsappCampStats'
        template :
          $ref: '#/definitions/WhatsappCampTemplate'
        createdAt:
          type: string
          description: Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-06-01T12:30:00Z
        modifiedAt:
          type: string
          description: UTC date-time of last modification of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-01T12:30:00Z
  WhatsappCampStats:
      type: object
      required:
      - sent
      - delivered
      - read
      - unsubscribe
      - notSent
      properties:
       sent:
           type: integer
           example: 3
       delivered:
           type: integer
           example : 3
       read:
            type: integer
            example: 2
       unsubscribe:
            type: integer
            example: 0
       notSent:
            type: integer
            example: 4
  WhatsappCampTemplate:
      type: object
      properties:
       name:
           type : string
           example: wta107
           description : name of the template
       category:
           type : string
           example : Marketing
           description : description of the template
       language:
           type : string
           example : en_GB
           description : language of the template
       contains_button:
           type : boolean
           example : false
       display_header:
           type : boolean
           example : true
       header_type:
           type : string
           example : text
           description : type of header
       components:
           type : array
           description : array of component item objects
           items:
            $ref: '#/definitions/componentItems'
       header_variables :
           type : array
           description : array of variables item object
           items:
            $ref: '#/definitions/variablesItems'
       body_variables:
           type : array
           description: array of variables item variables
           items:
            $ref: '#/definitions/variablesItems'
       button_type:
           type: string
           example : QUICK_REPLIES
       hide_footer:
           type: boolean
           example : true
  componentItems :
      type : object
      properties:
       type :
          type : string
          example : BODY
       text :
          type : string
          example : Life is a long lesson in humility
  variablesItems :
      type : object
      properties :
       name :
         type: string
         example : FIRSTNAME
       default :
         type : string
         example : INVALID_HEADER
       datatype :
         type : string
         example : text
  bodyVariablesItems :
      type : object
  getWATemplates :
    type: object
    required:
      - templates
      - count
    properties :
      templates:
        type: array
        items:
          type: object
          required:
          - id
          - name
          - status
          - category
          - language
          - createdAt
          - modifiedAt
          properties :
            id:
              type: string
              description: id of the template
              example: 235
            name:
              type: string
              description: Name of the WhatsApp template
              example: Test template
            status:
              type: string
              description: Status of the WhatsApp template
              example: approved
            language:
              type : string
              description: Language in which template exists
              example : en
            category:
              type: string
              description : category of the template
              example: MARKETING
            errorReason:
              type: string
              description: Error reason in the template creation
              example: NONE
            createdAt:
              type: string
              description: Creation UTC date-time of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
              example: 2017-06-01T12:30:00Z
            modifiedAt:
              type: string
              description: UTC date-time of last modification of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
              example: 2017-05-01T12:30:00Z
      count:
        type: integer
        format: int64
        description : Number of whatsApp templates retrived
        example: 24
  getWhatsappCampaigns:
    type: object
    properties :
      campaigns :
        type: array
        items:
          type: object
          required:
          - id
          - campaignName
          - campaignStatus
          - templateId
          - scheduledAt
          - createdAt
          - modifiedAt
          properties :
            id:
              type: integer
              description: ID of the WhatsApp Campaign
              format: int64
              example: 1672035851100690
            campaignName:
              type: string
              description: Name of the WhatsApp Campaign
              example: Test Campaign
            templateId:
                type : string
                description : Id of the WhatsApp template
                example : 637660278078655
            campaignStatus:
                type: string
                description: Status of the WhatsApp Campaign
                example: draft
                enum:
                - draft
                - scheduled
                - pending
                - approved
                - running
                - suspended
                - rejected
                - sent
            scheduledAt:
                type: string
                description: UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
                example: 2017-06-01T12:30:00Z
            errorReason:
              type: string
              description: Error reason in the campaign creation
              example: NONE
            invalidatedContacts :
                type : integer
                description : Count of invalidated contacts
                format : int64
                example : 0
            readPercentage :
                type : number
                description : Read percentage of the the WhatsApp campaign created
                format : float
                example : 28.57
            stats :
                $ref: '#/definitions/WhatsappCampStats'
            createdAt:
              type: string
              description: Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
              example: 2017-06-01T12:30:00Z
            modifiedAt:
              type: string
              description: UTC date-time of last modification of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
              example: 2017-05-01T12:30:00Z
      count:
        type: integer
        format: int64
        description : Number of WhatsApp campaigns retrived
        example: 24
  createModel:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
        description: ID of the object created
        example: 122

  createUpdateContactModel:
    properties:
      id:
        type: integer
        format: int64
        description: ID of the contact when a new contact is created
        example: 122

  createSenderModel:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
        description: ID of the Sender created
        example: 5
      spfError:
        type: boolean
        description: Status of SPF configuration for the sender (true = SPF not well configured, false = SPF well configured)
        example: true
      dkimError:
        type: boolean
        description: Status of DKIM configuration for the sender (true = DKIM not well configured, false = DKIM well configured)
        example: false

  createSmtpEmail:
    type: object
    required:
      - messageId
    properties:
      messageId:
        type: string
        description: Message ID of the transactional email sent
        example: '<201798300811.5787683@relay.domain.com>'

  sendTemplateEmail:
    type: object
    required:
      - messageId
    properties:
      messageId:
        type: string
        description: Message ID of the template Email sent
        example: '<201798300811.5787683@relay.domain.com>'

  createReseller:
    type: object
    required:
      - authKey
    properties:
      authKey:
        type: string
        description: AuthKey of Reseller child created
        example: 'xkeysib-21881axxxxxcc92e04-mIrexxxx7z'
      id:
        type: integer
        format: int64
        description: Id of Reseller child created
        example: 1234567

  sendSms :
    type: object
    required:
      - reference
      - messageId
    properties:
      reference:
        type: string
        example: 'ab1cde2fgh3i4jklmno'
      messageId:
        type: integer
        format: int64
        example: 1511882900176220
      smsCount:
        type: integer
        format: int64
        description: Count of SMS's to send multiple text messages
        example: 2
      usedCredits:
        type: number
        format: float
        description: SMS credits used per text message
        example: 0.70
      remainingCredits:
        type: number
        format: float
        description: Remaining SMS credits of the user
        example: 82.85

  createdProcessId:
    type: object
    required:
      - processId
    properties:
      processId:
        type: integer
        format: int64
        description: Id of the process created
        example: 78

  createUpdateFolder:
    type: object
    properties:
      name:
        type: string
        description: Name of the folder
        example: 'Wordpress Contacts'

  postSendFailed :
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int64
        description: Response code
        example: 'invalid_parameter'
      message:
        type: string
        description: Response message
        example: 'The email could not be sent to all recipients'
      unexistingEmails :
        type: array
        items :
          type: string
          format: email
          description: Email addresses you tried to sent an email to, but not existing in your contacts
          example: "matthew.dow@example.com, elisa.carrely@example.com"
      withoutListEmails :
        type: array
        items :
          type: string
          format: email
          description: Email addresses you sent an email to, without a contact list
          example: "jeff.dean@example.com, jim.sue@example.com"
      blackListedEmails :
        type: array
        items :
          type: string
          format: email
          description: Email addresses which are blacklisted. ONLY FOR email-campign's sendTest OR smtp-template's sendTest api's.
          example: "jeff.dean@example.com, jim.sue@example.com"

  postSendSmsTestFailed :
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int64
        description: Response code
        example: 'invalid_parameter'
      message:
        type: string
        description: Response message
        example: 'The SMS could not be sent to all recipients'
      unexistingSms :
        type: array
        items :
          type: string
          format: email
          description: Email addresses you tried to sent a SMS to, but not existing in your contacts
          example: "337699086644@mailin.com, 41778899954@mailin.com"
      withoutListSms :
        type: array
        items :
          type: string
          format: email
          description: Email addresses you sent a SMS to, without a contact list
          example: "3542388988@mailin.com, 10976444477@mailin.com"

  postContactInfo :
    type: object
    required:
      - contacts
    properties:
      contacts:
        type: object
        properties:
          success:
            type: array
            items :
              type: string
              format: email
              description: Email addresses which are successfully imported
              example: "jeff32@example.com, jim56@example.com"
          failure:
            type: array
            items :
              type: string
              format: email
              description: Email addresses which can not be imported, could be already in/out list and/or doesn't exist
              example: "jeff32@example.com, jim56@example.com"
          total:
            type: integer
            format: int64
            description: Displays the count of total number of contacts removed from list when user opts for "all" option.
            example: 27
          processId:
            type: integer
            format: int64
            description: Id of the process created to remove contacts from list when user opts for "all" option.
            example: 78

  getAggregatedReport:
    type: object
    required:
      - range
      - requests
      - delivered
      - hardBounces
      - softBounces
      - clicks
      - uniqueClicks
      - opens
      - uniqueOpens
      - spamReports
      - blocked
      - invalid
      - unsubscribed
    properties:
      range:
        type: string
        description: Time frame of the report
        example: '2016-09-08|2017-04-06'
      requests:
        type: integer
        format: int64
        description: Number of requests for the timeframe
        example: 263
      delivered:
        type: integer
        format: int64
        description: Number of delivered emails for the timeframe
        example: 249
      hardBounces:
        type: integer
        format: int64
        description: Number of hardbounces for the timeframe
        example: 1
      softBounces:
        type: integer
        format: int64
        description: Number of softbounces for the timeframe
        example: 4
      clicks:
        type: integer
        format: int64
        description: Number of clicks for the timeframe
        example: 12
      uniqueClicks:
        type: integer
        format: int64
        description: Number of unique clicks for the timeframe
        example: 8
      opens:
        type: integer
        format: int64
        description: Number of openings for the timeframe
        example: 47
      uniqueOpens:
        type: integer
        format: int64
        description: Number of unique openings for the timeframe
        example: 37
      spamReports:
        type: integer
        format: int64
        description: Number of complaint (spam report) for the timeframe
        example: 0
      blocked:
        type: integer
        format: int64
        description: Number of blocked contact emails for the timeframe
        example: 2
      invalid:
        type: integer
        format: int64
        description: Number of invalid emails for the timeframe
        example: 0
      unsubscribed:
        type: integer
        format: int64
        description: Number of unsubscribed emails for the timeframe
        example: 0
  getTransacBlockedContacts:
    type: object
    properties:
      count:
        type: integer
        format: int64
        description: Count of blocked or unsubscribed contact
        example: 1
      contacts:
        type: array
        items:
          type: object
          required:
            - email
            - senderEmail
            - reason
            - blockedAt
          properties:
            email:
              type: string
              format: email
              description: Email address of the blocked or unsubscribed contact
              example: 'john.smith@example.com'
            senderEmail:
              type: string
              format: email
              description: Sender email address of the blocked or unsubscribed contact
              example: 'john.smith@example.com'
            reason:
              type: object
              description: Reason for blocking / unsubscribing
              example: 'Admin blocked'
              properties:
                code:
                  type: string
                  enum:
                   - unsubscribedViaMA
                   - unsubscribedViaEmail
                   - adminBlocked
                   - unsubscribedViaApi
                   - hardBounce
                   - contactFlaggedAsSpam
                  description: Reason code for blocking / unsubscribing (This code is safe for comparison)
                  example: 'AdminBlocked'
                message:
                  type: string
                  description: Reason for blocking / unsubscribing (This string is not safe for comparison)
                  example: Admin blocked
            blockedAt:
              type: string
              format: date-time
              description: Date when the contact was blocked or unsubscribed on
              example: '2017-05-01T12:30:00Z'

  getReports:
    type: object
    properties:
      reports:
        type: array
        items:
          type: object
          required:
            - date
            - requests
            - delivered
            - hardBounces
            - softBounces
            - clicks
            - uniqueClicks
            - opens
            - uniqueOpens
            - spamReports
            - blocked
            - invalid
            - unsubscribed
          properties:
            date:
              type: string
              format: date
              description: Date of the statistics
              example: '2017-04-06'
            requests:
              type: integer
              format: int64
              description: Number of requests for the date
              example: 65
            delivered:
              type: integer
              format: int64
              description: Number of delivered emails for the date
              example: 63
            hardBounces:
              type: integer
              format: int64
              description: Number of hardbounces for the date
              example: 1
            softBounces:
              type: integer
              format: int64
              description: Number of softbounces for the date
              example: 1
            clicks:
              type: integer
              format: int64
              description: Number of clicks for the date
              example: 6
            uniqueClicks:
              type: integer
              format: int64
              description: Number of unique clicks for the date
              example: 5
            opens:
              type: integer
              format: int64
              description: Number of openings for the date
              example: 58
            uniqueOpens:
              type: integer
              format: int64
              description: Number of unique openings for the date
              example: 52
            spamReports:
              type: integer
              format: int64
              description: Number of complaints (spam reports) for the date
              example: 0
            blocked:
              type: integer
              format: int64
              description: Number of blocked emails for the date
              example: 0
            invalid:
              type: integer
              format: int64
              description: Number of invalid emails for the date
              example: 0
            unsubscribed:
              type: integer
              format: int64
              description: Number of unsubscribed emails for the date
              example: 0

  getEmailEventReport:
    type: object
    properties:
      events:
        type: array
        items:
          type: object
          required:
            - email
            - date
            - messageId
            - event
          properties:
            email:
              type: string
              format: email
              description: Email address which generates the event
              example: 'john.smith@example.com'
            date:
              type: string
              format: date-time
              description: UTC date-time on which the event has been generated
              example: '2017-03-12T12:30:00Z'
            subject:
              type: string
              description: Subject of the event
              example: 'Sib client test'
            messageId:
              type: string
              description: Message ID which generated the event
              example: '<201798300811.5787683@relay.domain.com>'
            event:
              type: string
              enum:
                - bounces
                - hardBounces
                - softBounces
                - delivered
                - spam
                - requests
                - opened
                - clicks
                - invalid
                - deferred
                - blocked
                - unsubscribed
              description: Event which occurred
              example: 'delivered'
            reason:
              type: string
              description: Reason of bounce (only available if the event is hardbounce or softbounce)
              example: 'Error connection timeout'
            tag:
              type: string
              description: Tag of the email which generated the event
              example: 'OrderConfirmation'
            ip:
              type: string
              description: IP from which the user has opened the email or clicked on the link (only available if the event is opened or clicks)
              example: '165.87.3.15'
            link:
              type: string
              description: The link which is sent to the user (only available if the event is requests or opened or clicks)
              example: 'https://www.someexamplelink.com'
            from:
              type: string
              format: email
              description: Sender email from which the emails are sent
              example: 'john@example.com'

  getSmsEventReport:
    type: object
    properties:
      events:
        type: array
        items:
          type: object
          required:
            - phoneNumber
            - date
            - messageId
            - event
          properties:
            phoneNumber:
              type: string
              description: Phone number which has generated the event
              example : '00189001094'
            date:
              type: string
              format: date-time
              description: UTC date-time on which the event has been generated
              example: '2017-03-12T12:30:00Z'
            messageId:
              type: string
              description: Message ID which generated the event
              example: '1472640582425378'
            event:
              type: string
              enum:
                - bounces
                - hardBounces
                - softBounces
                - delivered
                - sent
                - accepted
                - unsubscription
                - replies
                - blocked
                - rejected
              description: Event which occurred
              example: 'accepted'
            reason:
              type: string
              description: Reason of bounce (only available if the event is hardbounce or softbounce)
              example: 'Message is undeliverable due to an incorrect / invalid / blacklisted / permanently barred MSISDN for this operator'
            reply:
              type: string
            tag:
              type: string
              description: Tag of the SMS which generated the event
              example: 'CabWaiting'


  getSmtpTemplateOverview:
    type: object
    required:
     - id
     - name
     - subject
     - isActive
     - testSent
     - sender
     - replyTo
     - toField
     - tag
     - htmlContent
     - createdAt
     - modifiedAt
    properties:
      id:
        type: integer
        format: int64
        description: ID of the template
        example: 4
      name:
        type: string
        description: Name of the template
        example: 'Order Confirmation - EN'
      subject:
        type: string
        description: Subject of the template
        example: 'Thanks for your order !'
      isActive:
        type: boolean
        description: Status of template (true=active, false=inactive)
        example: true
      testSent:
        type: boolean
        description: Status of test sending for the template (true=test email has been sent, false=test email has not been sent)
        example: true
      sender:
        type: object
        properties:
          name:
            description:  From email for the template
            type: string
            example: 'Mary form MyShop'
          email:
            description: From email for the template
            type: string
            format: email
            example: 'contact@myshop.fr'
          id:
            description: Sender id of the template
            type: string
            example: 43
      replyTo:
        type: string
        format: email
        description: Email defined as the "Reply to" for the template
        example: 'replyto@domain.com'
      toField:
        type: string
        description: Customisation of the "to" field for the template
        example: '{FIRSTNAME} {LASTNAME}'
      tag:
        type: string
        description: Tag of the template
        example: 'sports'
      htmlContent:
         type: string
         description: HTML content of the template
         example: 'Your order n°xxxxx has been confirmed. Thanks for your purchase.'
      createdAt:
        type: string
        format: date-time
        description: Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
        example: '2017-05-01T12:30:00Z'
      modifiedAt:
        type: string
        format: date-time
        description: Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
        example: '2017-05-12T12:30:00Z'
      doiTemplate:
        type: boolean
        description: It is true if template is a valid Double opt-in (DOI) template, otherwise it is false. This field will be available only in case of single template detail call.
        example: false

  getSmtpTemplates:
    type: object
    properties:
      count:
        type: integer
        format: int64
        description: Count of transactional email templates
        example: 1
      templates:
        type: array
        items:
          type: object
          $ref: '#/definitions/getSmtpTemplateOverview'

  getWebhook:
    type: object
    required:
      - url
      - id
      - description
      - events
      - type
      - createdAt
      - modifiedAt
    properties:
      url:
        type: string
        format: url
        description: URL of the webhook
        example: 'http://requestb.in/173lyyx1'
      id:
        type: integer
        format: int64
        description: ID of the webhook
        example: 654
      description:
        type: string
        description: Description of the webhook
        example: 'Webhook triggered on campaign openings'
      events:
        type: array
        items:
          type: string
          description: Events which will trigger the webhook when they occure
          example: "opens,clicks"
      type:
        type: string
        enum:
          - marketing
          - transac
        description: Type of webhook (marketing or transac)
        example: marketing
      createdAt:
        type: string
        format: date-time
        description: Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
        example: '2016-12-01T12:50:00Z'
      modifiedAt:
        type: string
        format: date-time
        description: Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
        example: '2017-05-12T13:15:00Z'

  getWebhooks:
    type: object
    required:
      - webhooks
    properties:
      webhooks:
        type: array
        items:
          type: object
          allOf:
            - $ref: '#/definitions/getWebhook'

  getContactDetails:
    type: object
    required:
      - id
      - emailBlacklisted
      - smsBlacklisted
      - createdAt
      - modifiedAt
      - listIds
      - attributes
    properties:
      email:
        type: string
        format: email
        description: Email address of the contact for which you requested the details
        example: 'john.smith@example.com'
      id:
        type: integer
        format: int64
        description: ID of the contact for which you requested the details
        example: 32
      emailBlacklisted:
        type: boolean
        description: Blacklist status for email campaigns (true=blacklisted, false=not blacklisted)
        example: false
      smsBlacklisted:
        type: boolean
        description: Blacklist status for SMS campaigns (true=blacklisted, false=not blacklisted)
        example: true
      createdAt:
        type: string
        format: date-time
        description: Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
        example: '2017-05-12T12:30:00Z'
      modifiedAt:
        type: string
        format: date-time
        description: Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
        example: '2017-05-12T12:30:00Z'
      listIds:
        type: array
        items:
          type: integer
          format: int64
          description: List(s) in which the contact is included
          example: 12,9,20
      listUnsubscribed:
        type: array
        items:
          type: integer
          format: int64
          description: List(s) in which the contact is included (only available if unsubscription per list is activated for the account)
          example: 1,2
      attributes:
        type: object
        description: Set of attributes of the contact
        example: {"name":"Joe", "email":"joe@example.com"}

  getExtendedContactDetails:
    allOf:
      - $ref: '#/definitions/getContactDetails'
      - type: object
        required:
          - statistics
        properties:
          statistics:
            type: object
            description: Campaign statistics of the contact
            properties:
              messagesSent:
                description : Listing of the sent campaign for the contact
                type: array
                items:
                  type: object
                  required:
                    - campaignId
                    - eventTime
                  properties:
                    campaignId:
                      type: integer
                      format: int64
                      description : ID of the campaign which generated the event
                      example: 3
                    eventTime:
                      type: string
                      format: date-time
                      description: UTC date-time of the event
                      example: '2017-03-12T20:15:13Z'
              hardBounces:
                type: array
                description : Listing of the hardbounes generated by the contact
                items:
                  type: object
                  required:
                    - campaignId
                    - eventTime
                  properties:
                    campaignId:
                      type: integer
                      format: int64
                      description : ID of the campaign which generated the event
                      example: 3
                    eventTime:
                      type: string
                      format: date-time
                      description: UTC date-time of the event
                      example: '2017-03-12T20:15:13Z'
              softBounces:
                type: array
                description : Listing of the softbounes generated by the contact
                items:
                  type: object
                  required:
                    - campaignId
                    - eventTime
                  properties:
                    campaignId:
                      type: integer
                      format: int64
                      description : ID of the campaign which generated the event
                      example: 3
                    eventTime:
                      type: string
                      format: date-time
                      description: UTC date-time of the event
                      example: '2017-03-12T20:15:13Z'
              complaints:
                type: array
                description : Listing of the complaints generated by the contact
                items:
                  type: object
                  required:
                    - campaignId
                    - eventTime
                  properties:
                    campaignId:
                      type: integer
                      format: int64
                      description : ID of the campaign which generated the event
                      example: 3
                    eventTime:
                      type: string
                      format: date-time
                      description: UTC date-time of the event
                      example: '2017-03-12T20:15:13Z'
              unsubscriptions:
                type: object
                description : Listing of the unsubscription for the contact
                required:
                  - userUnsubscription
                  - adminUnsubscription
                properties:
                  userUnsubscription:
                    description: Contact unsubscribe via unsubscription link in a campaign
                    type: array
                    items:
                      type: object
                      required:
                        - campaignId
                        - eventTime
                      properties:
                        campaignId:
                          type: integer
                          format: int64
                          description : ID of the campaign which generated the event
                          example: 3
                        eventTime:
                          type: string
                          format: date-time
                          description: UTC date-time of the event
                          example: '2017-03-12T20:15:13Z'
                        ip:
                          type: string
                          description : IP from which the user has unsubscribed
                          example: '165.87.3.15'
                  adminUnsubscription:
                    type: array
                    description : Contact has been unsubscribed from the administrator
                    items:
                      type: object
                      required:
                        - eventTime
                      properties:
                        eventTime:
                          type: string
                          format: date-time
                          description: UTC date-time of the event
                          example: '2017-03-12T20:15:13Z'
                        ip:
                          type: string
                          description : IP from which the user has been unsubscribed
                          example: '165.87.3.15'
              opened:
                type: array
                description : Listing of the openings generated by the contact
                items:
                  type: object
                  required:
                    - campaignId
                    - count
                    - eventTime
                    - ip
                  properties:
                    campaignId:
                      type: integer
                      format: int64
                      description : ID of the campaign which generated the event
                      example: 3
                    count:
                      type: integer
                      format: int64
                      description: Number of openings for the campaign
                      example: 1
                    eventTime:
                      type: string
                      format: date-time
                      description: UTC date-time of the event
                      example: '2017-03-12T20:15:13Z'
                    ip:
                      type: string
                      description : IP from which the user has opened the email
                      example: '165.87.3.15'
              clicked:
                type: array
                description : Listing of the clicks generated by the contact
                items:
                  type: object
                  required:
                    - campaignId
                    - links
                  properties:
                    campaignId:
                        type: integer
                        format: int64
                        description : ID of the campaign which generated the event
                        example: 3
                    links:
                      type: array
                      description: Listing of the clicked links for the campaign
                      items:
                        type: object
                        required:
                          - count
                          - eventTime
                          - ip
                          - url
                        properties:
                          count:
                            type: integer
                            format: int64
                            description: Number of clicks on this link for the campaign
                            example: 1
                          eventTime:
                            type: string
                            format: date-time
                            description: UTC date-time of the event
                            example: '2017-03-12T20:15:13Z'
                          ip:
                            type: string
                            description : IP from which the user has clicked on the link
                            example: '165.87.3.15'
                          url:
                            type: string
                            description : URL of the clicked link
                            example: 'www.myshop.com'
              transacAttributes:
                type: array
                description : Listing of the transactional attributes for the contact
                items:
                  type: object

  getContactCampaignStats:
    type: object
    description: Campaign Statistics for the contact
    properties:
      messagesSent:
        type: array
        items:
          type: object
          required:
            - campaignId
            - eventTime
          properties:
            campaignId:
              type: integer
              format: int64
              description : ID of the campaign which generated the event
              example: 3
            eventTime:
              type: string
              format: date-time
              description: UTC date-time of the event
              example: '2017-03-12T20:15:13Z'
      hardBounces:
        type: array
        items:
          type: object
          required:
            - campaignId
            - eventTime
          properties:
            campaignId:
              type: integer
              format: int64
              description : ID of the campaign which generated the event
              example: 3
            eventTime:
              type: string
              format: date-time
              description: UTC date-time of the event
              example: '2017-03-12T20:15:13Z'
      softBounces:
        type: array
        items:
          type: object
          required:
            - campaignId
            - eventTime
          properties:
            campaignId:
              type: integer
              format: int64
              description : ID of the campaign which generated the event
              example: 3
            eventTime:
              type: string
              format: date-time
              description: UTC date-time of the event
              example: '2017-03-12T20:15:13Z'
      complaints:
        type: array
        items:
          type: object
          required:
            - campaignId
            - eventTime
          properties:
            campaignId:
              type: integer
              format: int64
              description : ID of the campaign which generated the event
              example: 3
            eventTime:
              type: string
              format: date-time
              description: UTC date-time of the event
              example: '2017-03-12T20:15:13Z'
      unsubscriptions:
        type: object
        required:
          - userUnsubscription
          - adminUnsubscription
        properties:
          userUnsubscription:
            type: array
            description: Contact has unsubscribed via the unsubscription link in the email
            items:
              type: object
              required:
                - campaignId
                - eventTime
              properties:
                campaignId:
                  type: integer
                  format: int64
                  description : ID of the campaign which generated the event
                  example: 3
                eventTime:
                  type: string
                  format: date-time
                  description: UTC date-time of the event
                  example: '2017-03-12T20:15:13Z'
                ip:
                  type: string
                  description : IP from which the user has unsubscribed
                  example: 165.87.3.15
          adminUnsubscription:
            type: array
            description: Contact has been unsubscribed from the administrator
            items:
              type: object
              required:
                - eventTime
              properties:
                eventTime:
                  type: string
                  format: date-time
                  description: UTC date-time of the event
                  example: '2017-03-12T20:15:13Z'
                ip:
                  type: string
                  description : IP from which the user has been unsubscribed
                  example: '165.87.3.15'
      opened:
        type: array
        items:
          type: object
          required:
            - campaignId
            - count
            - eventTime
            - ip
          properties:
            campaignId:
              type: integer
              format: int64
              description : ID of the campaign which generated the event
              example: 3
            count:
              type: integer
              format: int64
              description : Number of openings of the campaign
              example: 3
            eventTime:
              type: string
              format: date-time
              description: UTC date-time of the event
              example: '2017-03-12T20:15:13Z'
            ip:
              type: string
              description : IP from which the user has opened the campaign
              example: '165.87.3.15'
      clicked:
        type: array
        items:
          type: object
          required:
            - campaignId
            - links
          properties:
            campaignId:
                type: integer
                format: int64
                description : ID of the campaign which generated the event
                example: 3
            links:
              type: array
              items:
                type: object
                required:
                  - count
                  - eventTime
                  - ip
                  - url
                properties:
                  count:
                    type: integer
                    format: int64
                    description: Number of clicks on this link for the campaign
                    example: 1
                  eventTime:
                    type: string
                    format: date-time
                    description: UTC date-time of the event
                    example: '2017-03-12T20:15:13Z'
                  ip:
                    type: string
                    description : IP from which the user has clicked on the link
                    example: '165.87.3.15'
                  url:
                    type: string
                    description : URL of the clicked link
                    example: 'www.myshop.com'
      transacAttributes:
        type: array
        items:
          type: object
          required:
            - orderDate
            - orderPrice
            - orderId
          properties:
            orderDate:
              type: string
              format: date
              description: Date of the order
              example: '2017-03-12'
            orderPrice:
              type: number
              format: float
              description: Price of the order
              example: 24.99
            orderId:
              type: integer
              format: int64
              description: ID of the order
              example: 248

  getContacts:
    type: object
    required:
      - contacts
      - count
    properties:
      contacts:
        type: array
        items:
          type: object
          allOf:
            - $ref: '#/definitions/getContactDetails'
      count:
        type: integer
        format: int64
        description: Number of contacts
        example: 17655

  getAttributes:
    type: object
    required:
      - attributes
    properties:
      attributes:
        type: array
        description : Listing of available contact attributes in your account
        items:
          type: object
          required:
            - name
            - category
          properties:
            name:
              type: string
              description: Name of the attribute
              example: 'LASTNAME'
            category:
              type: string
              enum:
                - normal
                - transactional
                - category
                - calculated
                - global
              description: Category of the attribute
              example: 'category'
            type:
              type: string
              enum:
                - text
                - date
                - float
                - id
                - boolean
              description: Type of the attribute
              example: 'text'
            enumeration:
              type: array
              description: Parameter only available for "category" type attributes.
              items:
                type: object
                required:
                  - value
                  - label
                properties:
                  value:
                    type: integer
                    format: int64
                    description: ID of Value of the "category" type attribute
                    example: 1
                  label:
                    type: string
                    description: Label of the "category" type attribute
                    example: 'Women'
            calculatedValue:
              type: string
              description: Calculated value formula
              example: 'COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]'

  getFolders:
    type: object
    properties:
      folders:
        type: array
        items:
          type: object
          allOf:
            - $ref: '#/definitions/getFolder'
      count:
        type: integer
        format: int64
        description: Number of folders available in your account
        example: 10

  getFolder:
    type: object
    required:
      - id
      - name
      - totalBlacklisted
      - totalSubscribers
      - uniqueSubscribers
    properties:
      id:
        type: integer
        format: int64
        description: ID of the folder
        example: 2
      name:
        type: string
        description: Name of the folder
        example: 'Magento Customers'
      totalBlacklisted:
        type: integer
        format: int64
        description: Number of blacklisted contacts in the folder
        example: 32
      totalSubscribers:
        type: integer
        format: int64
        description: Number of contacts in the folder
        example: 19777
      uniqueSubscribers:
        type: integer
        format: int64
        description: Number of unique contacts in the folder
        example: 16222

  getSegments:
      type: object
      properties:
        segments:
          type: array
          description: Listing of all the segments available in your account
          items:
            type: object
            required:
            - id
            - name
            - segmentName
            - categoryName
          properties:
            id:
              type: integer
              description: ID of the list
              format: int64
              example: 23
            segmentName:
              type: string
              description: Name of the Segment
              example: My Segment
            categoryName:
              type: string
              description: Name of the Segment Category
              format: string
              example: New Category
            updatedAt:
              type: string
              description: Updation UTC date-time of the segment (YYYY-MM-DDTHH:mm:ss.SSSZ)
              example: '2017-03-13T17:05:09Z'
        count:
          type: integer
          description: Number of Segments in your account
          format: int64
          example: 10

  getFolderLists:
    type: object
    required:
      - lists
      - count
    properties:
      lists:
        type: array
        items:
          type: object
          allOf:
            - $ref: '#/definitions/getList'
      count:
        type: integer
        format: int64
        description: Number of lists in the folder
        example: 6

  getLists:
    type: object
    required:
      - lists
      - count
    properties:
      lists:
        type: array
        description: Listing of all the lists available in your account
        items:
          type: object
          allOf:
          - $ref: '#/definitions/getList'
          - type: object
            required:
              - folderId
            properties:
              folderId:
                type: integer
                format: int64
                description: ID of the folder
                example: 2
      count:
        type: integer
        format: int64
        description: Number of lists in your account
        example: 150

  getList:
    type: object
    required:
      - id
      - name
      - totalSubscribers
      - totalBlacklisted
    properties:
      id:
        type: integer
        format: int64
        description: ID of the list
        example: 23
      name:
        type: string
        description: Name of the list
        example: 'Magento Customers - EN'
      totalBlacklisted:
        type: integer
        format: int64
        description: Number of blacklisted contacts in the list
        example: 13
      totalSubscribers:
        type: integer
        format: int64
        description: Number of contacts in the list
        example: 1776

  getExtendedList:
    allOf:
      - $ref: '#/definitions/getList'
      - type: object
        required:
          - folderId
          - createdAt
        properties:
          folderId:
            type: integer
            format: int64
            description: ID of the folder
            example: 2
          createdAt:
            type: string
            format: date-time
            description: Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
            example: '2017-03-13T17:05:09Z'
          campaignStats:
            type: array
            items:
              type: object
              required:
                - campaignId
                - stats
              properties:
                campaignId:
                  type: integer
                  format: int64
                  description : ID of the campaign
                  example: 143
                stats:
                  $ref: '#/definitions/getCampaignStats'
          dynamicList:
            type: boolean
            description: Status telling if the list is dynamic or not (true=dynamic, false=not dynamic)
            example: false

  getSmsCampaignStats:
    type: object
    required:
      - delivered
      - sent
      - processing
      - softBounces
      - hardBounces
      - unsubscriptions
      - answered
    properties:
      delivered:
        type: integer
        format: int64
        description: Number of delivered SMS
        example: 2987
      sent:
        type: integer
        format: int64
        description: Number of sent SMS
        example: 3000
      processing:
        type: integer
        format: int64
        description: Number of processing SMS
        example: 0
      softBounces:
        type: integer
        format: int64
        description: Number of softbounced SMS
        example: 3
      hardBounces:
        type: integer
        format: int64
        description: Number of hardbounced SMS
        example: 1
      unsubscriptions:
        type: integer
        format: int64
        description: Number of unsubscription SMS
        example: 3
      answered:
        type: integer
        format: int64
        description: Number of replies to the SMS
        example: 2

  getDeviceBrowserStats:
    type: object
    required:
      - clickers
      - uniqueClicks
      - viewed
      - uniqueViews
    properties:
      clickers:
        type: integer
        format: int64
        description: Number of total clicks for the campaign using the particular browser
        example: 2665
      uniqueClicks:
        type: integer
        format: int64
        description: Number of unique clicks for the campaign using the particular browser
        example: 2300
      viewed:
        type: integer
        format: int64
        description: Number of openings for the campaign using the particular browser
        example: 8999
      uniqueViews:
        type: integer
        format: int64
        description: Number of unique openings for the campaign using the particular browser
        example: 7779

  getCampaignStats:
    type: object
    required:
      - uniqueClicks
      - clickers
      - complaints
      - delivered
      - sent
      - softBounces
      - hardBounces
      - uniqueViews
      - unsubscriptions
      - viewed
      - trackableViews
    properties:
      listId:
        type: integer
        format: int64
        description: List Id of email campaign (only in case of get email campaign(s)(not for global stats))
        example: 2
      uniqueClicks:
        type: integer
        format: int64
        description: Number of unique clicks for the campaign
        example: 2300
      clickers:
        type: integer
        format: int64
        description: Number of total clicks for the campaign
        example: 2665
      complaints:
        type: integer
        format: int64
        description: Number of complaints (Spam reports) for the campaign
        example: 1
      delivered:
        type: integer
        format: int64
        description: Number of delivered emails for the campaign
        example: 19765
      sent:
        type: integer
        format: int64
        description: Number of sent emails for the campaign
        example: 19887
      softBounces:
        type: integer
        format: int64
        description: Number of softbounce for the campaign
        example: 100
      hardBounces:
        type: integer
        format: int64
        description: Number of harbounce for the campaign
        example: 87
      uniqueViews:
        type: integer
        format: int64
        description: Number of unique openings for the campaign
        example: 7779
      trackableViews:
        type: integer
        description: Recipients without any privacy protection option enabled in their email client
        format: int64
        example: 5661
      unsubscriptions:
        type: integer
        format: int64
        description: Number of unsubscription for the campaign
        example: 2
      viewed:
        type: integer
        format: int64
        description: Number of openings for the campaign
        example: 8999
      deferred:
        type: integer
        format: int64
        description: Number of deferred emails for the campaign
        example: 30
      returnBounce:
        description: Total number of non-delivered campaigns for a particular campaign id.
        type: integer
        format: int64
        example: 5

  updateSmtpTemplate:
    type: object
    properties:
      tag:
        description: Tag of the template
        type: string
        example: 'OrderConfirmation'
      sender:
        type: object
        description: Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{"name":"xyz", "email":"example@abc.com"}` , `{"name":"xyz", "id":123}`
        properties:
          name:
            description: Name of the sender
            type: string
            example: 'Mary from MyShop'
          email:
            description: Email of the sender
            type: string
            format: email
            example: 'contact@myshop.com'
          id:
            description: Select the sender for the template on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).
            type: integer
            format: int64
            example: 3
      templateName:
        description: Name of the template
        type: string
        example: 'Order Confirmation - EN'
      htmlContent:
        description: Required if htmlUrl is empty. Body of the message (HTML must have more than 10 characters)
        type: string
        example: 'The order n°xxxxx has been confirmed. Thanks for your purchase'
      htmlUrl:
        description: Required if htmlContent is empty. URL to the body of the email (HTML)
        type: string
        format : url
        example: 'https://html.domain.com'
      subject:
        description: Subject of the email
        type: string
        example: 'Thanks for your purchase !'
      replyTo:
        description: Email on which campaign recipients will be able to reply to
        type: string
        format: email
        example: 'support@myshop.com'
      toField:
        description: To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
        type: string
        example: '{FNAME} {LNAME}'
      attachmentUrl:
        description: "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps"
        type: string
        format: url
        example: 'https://attachment.domain.com'
      isActive:
        description: Status of the template. isActive = false means template is inactive, isActive = true means template is active
        type: boolean
        example: true

  updateCampaignStatus:
    type: object
    description: Status of the campaign
    example: 'draft'
    properties:
      status:
        type: string
        description: Note:- replicateTemplate status will be available only for template type campaigns.
        enum:
          - suspended
          - archive
          - darchive
          - sent
          - queued
          - replicate
          - replicateTemplate
          - draft

  createSmtpTemplate:
    type: object
    required:
      - sender
      - templateName
      - subject
    properties:
      tag:
        description: Tag of the template
        type: string
        example: 'OrderConfirmation'
      sender:
        type: object
        description: Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{"name":"xyz", "email":"example@abc.com"}` , `{"name":"xyz", "id":123}`
        properties:
          name:
            description: Name of the sender. If not passed, will be set to default
            type: string
            example: 'Mary from MyShop'
          email:
            description: Email of the sender
            type: string
            format: email
            example: 'contact@myshop.com'
          id:
            description: Select the sender for the template on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).
            type: integer
            format: int64
            example: 3
      templateName:
        description: Name of the template
        type: string
        example: 'Order Confirmation - EN'
      htmlContent:
        description: Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty
        type: string
        example: 'The order n°xxxxx has been confirmed. Thanks for your purchase'
      htmlUrl:
        description: Url which contents the body of the email message. REQUIRED if htmlContent is empty
        type: string
        format : url
        example: 'https://html.domain.com'
      subject:
        description: Subject of the template
        type: string
        example: 'Thanks for your purchase !'
      replyTo:
        description: Email on which campaign recipients will be able to reply to
        type: string
        format: email
        example: 'support@myshop.com'
      toField:
        description: To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
        type: string
        example: '{FNAME} {LNAME}'
      attachmentUrl:
        description: "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps"
        type: string
        format: url
        example: 'https://attachment.domain.com'
      isActive:
        description: Status of template. isActive = true means template is active and isActive = false means template is inactive
        type: boolean
        example: true

  createEmailCampaign:
    type: object
    required:
      - sender
      - name
    properties:
      tag:
        description: Tag of the campaign
        type: string
        example: 'Newsletter'
      sender:
        type: object
        description: Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{"name":"xyz", "email":"example@abc.com"}` , `{"name":"xyz", "id":123}`
        properties:
          name:
            description: Sender Name
            type: string
            example: 'Mary from MyShop'
          email:
            description: Sender email
            type: string
            format: email
            example: 'newsletter@myshop.com'
          id:
            description: Select the sender for the campaign on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).
            type: integer
            format: int64
            example: 3
      name:
        description: Name of the campaign
        type: string
        example: Newsletter - May 2017
      htmlContent:
        description: Mandatory if htmlUrl and templateId are empty. Body of the message (HTML)
        type: string
        example: 'Spring is here, discover my new collection'
      htmlUrl:
        description: Mandatory if htmlContent and templateId are empty. Url to the message (HTML)
        type: string
        format : url
        example: 'https://html.domain.com'
      templateId:
        description: Mandatory if htmlContent and htmlUrl are empty. Id of the transactional email template with status 'active'. Used to copy only its content fetched from htmlContent/htmlUrl to an email campaign for RSS feature.
        type: integer
        format: int64
      scheduledAt:
        description: Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
        type: string
        format: date-time
        example: '2017-06-01T12:30:00+02:00'
      subject:
        description: Subject of the campaign. Mandatory if abTesting is false. Ignored if abTesting is true.
        type: string
        example: 'Discover the New Collection !'
      replyTo:
        description: Email on which the campaign recipients will be able to reply to
        type: string
        format: email
        example: 'support@myshop.com'
      toField:
        description: To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
        type: string
        example: '{FNAME} {LNAME}'
      recipients:
        type: object
        description: List ids to include/exclude from campaign
        properties:
          exclusionListIds:
            description: List ids to exclude from the campaign
            type: array
            items:
              type: integer
              format: int64
              example: 8
          listIds:
            description: Mandatory if scheduledAt is not empty. List Ids to send the campaign to
            type: array
            items:
              type : integer
              format : int64
              example: 32
      attachmentUrl:
        description: "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps"
        type: string
        format: url
        example: 'https://attachment.domain.com'
      inlineImageActivation:
        description: Use true to embedded the images in your email. Final size of the email should be less than 4MB. Campaigns with embedded images can not be sent to more than 5000 contacts
        type: boolean
        default: false
        example: true
      mirrorActive:
        description: Use true to enable the mirror link
        type: boolean
        example: true
      footer:
        description: Footer of the email campaign
        type: string
        example: '[DEFAULT_FOOTER]'
      header:
        description: Header of the email campaign
        type: string
        example: '[DEFAULT_HEADER]'
      utmCampaign:
        description: Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
        type: string
        example: 'NL_05_2017'
      params:
        type: object
        description: Pass the set of attributes to customize the type classic campaign. For example, {"FNAME":"Joe", "LNAME":"Doe"}. Only available if 'type' is 'classic'. It's considered only if campaign is in New Template Language format. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField'
        example: {"FNAME":"Joe", "LNAME":"Doe"}
      sendAtBestTime:
        type: boolean
        description: Set this to true if you want to send your campaign at best time.
        example: true
        default: false
      abTesting:
        description: Status of A/B Test. abTesting = false means it is disabled, & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' & 'winnerDelay' will be considered when abTesting is set to true. 'subjectA' & 'subjectB' are mandatory together & 'subject' if passed is ignored. Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
        type: boolean
        default: false
        example: true
      subjectA:
        description: Subject A of the campaign. Mandatory if abTesting = true. subjectA & subjectB should have unique value
        type: string
        example: 'Discover the New Collection!'
      subjectB:
        description: Subject B of the campaign. Mandatory if abTesting = true. subjectA & subjectB should have unique value
        type: string
        example: 'Want to discover the New Collection?'
      splitRule:
        description: Add the size of your test groups. Mandatory if abTesting = true & 'recipients' is passed. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
        type: integer
        format: int64
        maximum: 50
        minimum: 1
        example: 50
      winnerCriteria:
        type: string
        enum :
        - open
        - click
        description: Choose the metrics that will determinate the winning version. Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria' is ignored if passed
        example: 'open'
      winnerDelay:
        description: Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerDelay' is ignored if passed
        type: integer
        format: int64
        maximum: 168
        minimum: 1
        example: 50
      ipWarmupEnable:
        description: Available for dedicated ip clients. Set this to true if you wish to warm up your ip.
        type: boolean
        default: false
        example: true
      initialQuota:
        description: Mandatory if ipWarmupEnable is set to true. Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
        type: integer
        format: int64
        example: 3000
      increaseRate:
        description: Mandatory if ipWarmupEnable is set to true. Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
        type: integer
        format: int64
        minimum: 0
        maximum: 100
        example: 70

  updateEmailCampaign:
    type: object
    properties:
      tag:
        description: Tag of the campaign
        type: string
        example: 'Newsletter'
      sender:
        type: object
        description: Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{"name":"xyz", "email":"example@abc.com"}` , `{"name":"xyz", "id":123}`
        properties:
          name:
            description: Sender Name from which the campaign emails are sent
            type: string
            example: 'Mary from MyShop'
          email:
            description: Sender email from which the campaign emails are sent
            type: string
            format: email
            example: 'newsletter@myshop.com'
          id:
            description: Select the sender for the campaign on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).
            type: integer
            format: int64
            example: 3
      name:
        description: Name of the campaign
        type: string
        example: 'Newsletter - May 2017'
      htmlContent:
        description: Body of the message (HTML version). REQUIRED if htmlUrl is empty
        type: string
        example: 'Spring is here, discover my new collection'
      htmlUrl:
        description: Url which contents the body of the email message. REQUIRED if htmlContent is empty
        type: string
        format : url
        example: 'https://html.domain.com'
      scheduledAt:
        description: UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
        type: string
        format: date-time
        example: '2017-06-01T12:30:00+02:00'
      subject:
        description: Subject of the campaign
        type: string
        example: 'Discover the New Collection !'
      replyTo:
        description: Email on which campaign recipients will be able to reply to
        type: string
        format: email
        example: 'support@myshop.com'
      toField:
        description: To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
        type: string
        example: '{FNAME} {LNAME}'
      recipients:
        type: object
        description: List ids to include/exclude from campaign
        properties:
          exclusionListIds:
            description: List ids which have to be excluded from a campaign
            type: array
            items:
              type: integer
              format: int64
              example: 8
          listIds:
            description: Lists Ids to send the campaign to. REQUIRED if already not present in campaign and scheduledAt is not empty
            type: array
            items:
              type : integer
              format : int64
              example: 32
      attachmentUrl:
        description: "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps"
        type: string
        format: url
        example: 'https://attachment.domain.com'
      inlineImageActivation:
        description: Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts.
        type: boolean
        default: false
        example: true
      mirrorActive:
        description: Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
        type: boolean
        example: true
      recurring:
        description: FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
        type: boolean
        default: false
        example: false
      footer:
        description: Footer of the email campaign
        type: string
        example: '[DEFAULT_FOOTER]'
      header:
        description: Header of the email campaign
        type: string
        example: '[DEFAULT_HEADER]'
      utmCampaign:
        description: Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
        type: string
        example: 'NL_05_2017'
      params:
        type: object
        description: Pass the set of attributes to customize the type 'classic' campaign. For example, {"FNAME":"Joe", "LNAME":"Doe"}. The 'params' field will get updated, only if the campaign is in New Template Language, else ignored. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField'
        example: {"FNAME":"Joe", "LNAME":"Doe"}
      sendAtBestTime:
        type: boolean
        description: Set this to true if you want to send your campaign at best time. Note:- if true, warmup ip will be disabled.
        example: true
      abTesting:
        description: Status of A/B Test. abTesting = false means it is disabled, & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' & 'winnerDelay' will be considered if abTesting is set to true. 'subject' if passed is ignored.  Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
        type: boolean
        default: false
        example: true
      subjectA:
        description: Subject A of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value
        type: string
        example: 'Discover the New Collection!'
      subjectB:
        description: Subject B of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value
        type: string
        example: 'Want to discover the New Collection?'
      splitRule:
        description: Add the size of your test groups. Considered if abTesting = true. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
        type: integer
        format: int64
        maximum: 50
        minimum: 1
        example: 50
      winnerCriteria:
        type: string
        enum :
        - open
        - click
        description: Choose the metrics that will determinate the winning version. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria' is ignored if passed or alreday exist in record
        example: 'open'
      winnerDelay:
        description: Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerDelay' is ignored if passed or alreday exist in record
        type: integer
        format: int64
        maximum: 168
        minimum: 1
        example: 50
      ipWarmupEnable:
        description: Available for dedicated ip clients. Set this to true if you wish to warm up your ip.
        type: boolean
        default: false
        example: true
      initialQuota:
        description: Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
        type: integer
        format: int64
        example: 3000
      increaseRate:
        description: Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
        type: integer
        format: int64
        minimum: 0
        maximum: 100
        example: 70

  getSharedTemplateUrl:
    type: object
    required:
     - sharedUrl
    properties:
      sharedUrl:
        type: string
        format: url
        description: A unique URL for the email campaign or transactional template. This URL can be shared with other Sendinblue users.
        example: 'https://my.sendinblue.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-'

  abTestCampaignResult:
    type: object
    properties:
      winningVersion:
        type: string
        description: Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.
        enum:
          - notAvailable
          - pending
          - tie
          - A
          - B
        example: 'A'
      winningCriteria:
        type: string
        description: Criteria choosen for winning version (Open/Click)
        enum:
          - Open
          - Click
        example: 'Open'
      winningSubjectLine:
        type: string
        description: Subject Line of current winning version
        example: 'Subject Line A'
      openRate:
        type: string
        description: Open rate for current winning version
        example: '70%'
      clickRate:
        type: string
        description: Click rate for current winning version
        example: '70%'
      winningVersionRate:
        type: string
        description: Open/Click rate for the winner version
        example: '70%'
      statistics:
        type: object
        required:
          - openers
          - clicks
          - unsubscribed
          - hardBounces
          - softBounces
          - complaints
        properties:
          openers:
            $ref: '#/definitions/abTestVersionStats'
          clicks:
            $ref: '#/definitions/abTestVersionStats'
          unsubscribed:
            $ref: '#/definitions/abTestVersionStats'
          hardBounces:
            $ref: '#/definitions/abTestVersionStats'
          softBounces:
            $ref: '#/definitions/abTestVersionStats'
          complaints:
            $ref: '#/definitions/abTestVersionStats'
      clickedLinks:
        type: object
        required:
          - Version A
          - Version B
        properties:
          Version A:
            $ref: '#/definitions/abTestVersionClicks'
          Version B:
            $ref: '#/definitions/abTestVersionClicks'


  emailExportRecipients:
    type: object
    required:
      - recipientsType
    properties:
      notifyURL:
        description: Webhook called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
        type: string
        format : url
        example: 'http://requestb.in/173lyyx1'
      recipientsType:
        description: Type of recipients to export for a campaign
        enum:
          - all
          - nonClickers
          - nonOpeners
          - clickers
          - openers
          - softBounces
          - hardBounces
          - unsubscribed
        type: string
        example: 'openers'

  requestSmsRecipientExport:
    type: object
    required:
      - recipientsType
    properties:
      notifyURL:
        description: URL that will be called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
        type: string
        format : url
        example: 'http://requestb.in/173lyyx1'
      recipientsType:
        description: Filter the recipients based on how they interacted with the campaign
        enum:
          - all
          - delivered
          - answered
          - softBounces
          - hardBounces
          - unsubscribed
        type: string
        example: 'answered'

  sendReport:
    type: object
    required:
      - email
    properties:
      language:
        description: Language of email content for campaign report sending.
        enum:
          - fr
          - es
          - pt
          - it
          - de
          - en
        default: fr
        type: string
        example: 'en'
      email:
        type: object
        required:
          - to
          - body
        description: Custom attributes for the report email.
        properties:
          to:
            description: Email addresses of the recipients
            type: array
            items:
              type: string
              format : email
              description: Email address of the recipient
              example: 'jim.suehan@example.com'
          body:
            description: Custom text message to be presented in the report email.
            type: string
            example: Please find attached the report of our last email campaign.

  uploadImageToGallery:
    type: object
    required:
      - imageUrl
    properties:
      imageUrl:
        description: The absolute url of the image (no local file). Maximum allowed size for image is 2MB. Allowed extensions for images are - jpeg, jpg, png, bmp, gif.
        type: string
        example: 'https://somedomain.com/image1.jpg'
      name:
        description: Name of the image.
        type: string
        example: 'nature.jpg'

  sendSmtpEmail:
    type: object
    required:
      - to
    properties:
      sender:
        description: Mandatory if 'templateId' is not passed. Pass name (optional) and email of sender from which emails will be sent. For example, {"name":"Mary from MyShop", "email":"no-reply@myshop.com"}
        type: object
        required:
          - email
        properties:
          name:
            description: Name of the sender from which the emails will be sent. Maximum allowed characters are 70.
            type: string
            example: 'Mary from MyShop'
          email:
            description: Email of the sender from which the emails will be sent
            type: string
            format: email
            example: 'no-reply@myshop.com'
      to:
        description: List of email addresses and names (optional) of the recipients. For example, [{"name":"Jimmy", "email":"jimmy98@example.com"}, {"name":"Joe", "email":"joe@example.com"}]
        type: array
        items:
          type: object
          required:
            - email
          properties:
            email:
              description: Email address of the recipient
              type: string
              format: email
              example: 'jimmy98@example.com'
            name:
              description: Name of the recipient. Maximum allowed characters are 70.
              type: string
              example: 'Jimmy'
      bcc:
        description: List of email addresses and names (optional) of the recipients in bcc
        type: array
        items:
          type: object
          required:
            - email
          properties:
            email:
              description: Email address of the recipient in bcc
              type: string
              format: email
              example: 'helen9766@example.com'
            name:
              description: Name of the recipient in bcc. Maximum allowed characters are 70.
              type: string
              example: 'Helen'
      cc:
        description: List of email addresses and names (optional) of the recipients in cc
        type: array
        items:
          type: object
          required:
            - email
          properties:
            email:
              description: Email address of the recipient in cc
              type: string
              format: email
              example: 'ann6533@example.com'
            name:
              description: Name of the recipient in cc. Maximum allowed characters are 70.
              type: string
              example: 'Ann'
      htmlContent:
        description: HTML body of the message ( Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed )
        type: string
        example: '<!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please confirm your email address by clicking on the link below</p> </body> </html>'
      textContent:
        description: Plain Text body of the message ( Ignored if 'templateId' is passed )
        type: string
        example: 'Please confirm your email address by clicking on the link https://text.domain.com'
      subject:
        description: Subject of the message. Mandatory if 'templateId' is not passed
        type: string
        example: 'Login Email confirmation'
      replyTo:
        description: Email (required), along with name (optional), on which transactional mail recipients will be able to reply back. For example, {"email":"ann6533@example.com", "name":"Ann"}.
        type: object
        required:
           - email
        properties:
            email:
              description: Email address in reply to
              type: string
              format: email
              example: 'ann6533@example.com'
            name:
              description: Name in reply to. Maximum allowed characters are 70.
              type: string
              example: 'Ann'
      attachment:
        description: "Pass the absolute URL (no local file) or the base64 content of the attachment along with the attachment name (Mandatory if attachment content is passed). For example, `[{\"url\":\"https://attachment.domain.com/myAttachmentFromUrl.jpg\", \"name\":\"myAttachmentFromUrl.jpg\"}, {\"content\":\"base64 example content\", \"name\":\"myAttachmentFromBase64.jpg\"}]`. Allowed extensions for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If 'templateId' is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then 'attachment' is ignored )"
        type: array
        items:
          type: object
          properties:
            url:
              description: Absolute url of the attachment (no local file).
              type: string
              format: url
              example: 'https://attachment.domain.com/myAttachmentFromUrl.jpg'
            content:
              description: Base64 encoded chunk data of the attachment generated on the fly
              type: string
              format: byte
              example: 'b3JkZXIucGRm'
            name:
              description: Required if content is passed. Name of the attachment
              type: string
              example: 'myAttachment.png'
      headers:
        type: object
        description: Pass the set of custom headers (not the standard headers) that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, `{"sender.ip":"1.2.3.4", "X-Mailin-custom":"some_custom_header", "idempotencyKey":"abc-123"}`.
        example: {"sender.ip":"1.2.3.4", "X-Mailin-custom":"some_custom_header", "idempotencyKey":"abc-123"}
      templateId:
        description: Id of the template
        type: integer
        format: int64
        example: 2
      params:
        type: object
        description: Pass the set of attributes to customize the template. For example, {"FNAME":"Joe", "LNAME":"Doe"}. It's considered only if template is in New Template Language format.
        example: {"FNAME":"Joe", "LNAME":"Doe"}
      tags:
        description: Tag your emails to find them more easily
        type: array
        items:
          type: string
          example: 'tag1'

  deleteHardbounces:
    type: object
    properties:
      startDate:
        description: Starting date (YYYY-MM-DD) of the time period for deletion. The hardbounces occurred after this date will be deleted. Must be less than or equal to the endDate
        type: string
        example: '2016-12-31'
      endDate:
        description: Ending date (YYYY-MM-DD) of the time period for deletion. The hardbounces until this date will be deleted. Must be greater than or equal to the startDate
        type: string
        example: '2017-01-31'
      contactEmail:
        description: Target a specific email address
        type: string
        format: email
        example: 'alex76@example.com'

  createWebhook:
    type: object
    required:
      - url
      - events
    properties:
      url:
        description: URL of the webhook
        type: string
        format: url
        example: 'http://requestb.in/173lyyx1'
      description:
        description: Description of the webhook
        type: string
        example : 'Webhook triggered on unsubscription'
      events:
        description: Events triggering the webhook. Possible values for Transactional type webhook – `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed` and possible values for Marketing type webhook – `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` & `delivered`
        type: array
        items:
          type: string
          enum:
            - sent
            - hardBounce
            - softBounce
            - blocked
            - spam
            - delivered
            - request
            - click
            - invalid
            - deferred
            - opened
            - uniqueOpened
            - unsubscribed
            - listAddition
            - contactUpdated
            - contactDeleted
          example: 'unsubscribed'
      type:
        description: Type of the webhook
        enum:
          - transactional
          - marketing
        default: transactional
        type: string
        example: 'marketing'

  updateWebhook:
    type: object
    properties:
      url:
        description: URL of the webhook
        type: string
        format: url
        example: 'http://requestb.in/173lyyx1'
      description:
        description: Description of the webhook
        type: string
        example : 'Webhook triggered on contact hardbounce'
      events:
        description: Events triggering the webhook. Possible values for Transactional type webhook – `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed` and possible values for Marketing type webhook – `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` and `delivered`
        type: array
        items:
          type: string
          enum:
            - hardBounce
            - softBounce
            - blocked
            - spam
            - delivered
            - request
            - click
            - invalid
            - deferred
            - opened
            - uniqueOpened
            - unsubscribed
            - listAddition
            - contactUpdated
            - contactDeleted
          example: 'hardBounce'

  createDoiContact:
    type: object
    required:
      - email
      - includeListIds
      - templateId
      - redirectionUrl
    properties:
      email:
        description: Email address where the confirmation email will be sent. This email address will be the identifier for all other contact attributes.
        type: string
        format: email
        example: 'elly@example.com'
      attributes:
        description: Pass the set of attributes and their values. These attributes must be present in your SendinBlue account. For eg. {'FNAME':'Elly', 'LNAME':'Roger'}
        type: object
        example: {'FNAME':'Elly', 'LNAME':'Roger'}
      includeListIds:
        description: Lists under user account where contact should be added
        type: array
        items:
          type: integer
          format: int64
          description: Id of the list
          example: 36
      excludeListIds:
        description: Lists under user account where contact should not be added
        type: array
        items:
          type: integer
          format: int64
          description: Id of the list
          example: 36
      templateId:
        description: Id of the Double opt-in (DOI) template
        type: integer
        format: int64
        example: 2
      redirectionUrl:
        description: URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag {{ params.DOIurl }}.
        type: string
        format: url
        example: 'http://requestb.in/173lyyx1'

  createContact:
    type: object
    properties:
      email:
        description: Email address of the user. Mandatory if "SMS" field is not passed in "attributes" parameter. Mobile Number in "SMS" field should be passed with proper country code. For example {"SMS":"+91xxxxxxxxxx"} or {"SMS":"0091xxxxxxxxxx"}
        type: string
        format: email
        example: 'elly@example.com'
      ext_id:
        description: Pass your own Id to create a contact.
        type: string
        example: 'externalId'
      attributes:
        description: Pass the set of attributes and their values. These attributes must be present in your SendinBlue account. For eg. {"FNAME":"Elly", "LNAME":"Roger"}
        type: object
        example: {"FNAME":"Elly", "LNAME":"Roger"}
      emailBlacklisted:
        description: Set this field to blacklist the contact for emails (emailBlacklisted = true)
        type: boolean
        example: false
      smsBlacklisted:
        description: Set this field to blacklist the contact for SMS (smsBlacklisted = true)
        type: boolean
        example: false
      listIds:
        description: Ids of the lists to add the contact to
        type: array
        items:
          type: integer
          format: int64
          description: Id of the list to add the contact to
          example: 36
      updateEnabled:
        description: Facilitate to update the existing contact in the same request (updateEnabled = true)
        type: boolean
        default: false
        example: false
      smtpBlacklistSender:
        description: transactional email forbidden sender for contact. Use only for email Contact ( only available if updateEnabled = true )
        type: array
        items:
          type: string
          format: email

  updateContact:
    type: object
    properties:
      attributes:
        type: object
        description: Pass the set of attributes to be updated. These attributes must be present in your account. To update existing email address of a contact with the new one please pass EMAIL in attribtes. For example, `{ "EMAIL":"newemail@domain.com", "FNAME":"Ellie", "LNAME":"Roger"}`. Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in "SMS" field should be passed with proper country code. For example {"SMS":"+91xxxxxxxxxx"} or {"SMS":"0091xxxxxxxxxx"}
        example: {"EMAIL":"newemail@domain.com", "FNAME":"Ellie", "LNAME":"Roger"}
      emailBlacklisted:
        description: Set/unset this field to blacklist/allow the contact for emails (emailBlacklisted = true)
        type: boolean
        example: false
      smsBlacklisted:
        description: Set/unset this field to blacklist/allow the contact for SMS (smsBlacklisted = true)
        type: boolean
        example: true
      listIds:
        description: Ids of the lists to add the contact to
        type: array
        items:
          type: integer
          format: int64
          description: Id of the list to add the contact to
          example: 65
      unlinkListIds:
        description: Ids of the lists to remove the contact from
        type: array
        items:
          type: integer
          format: int64
          description: Id of the list to remove the contact from
          example: 36
      smtpBlacklistSender:
        description: transactional email forbidden sender for contact. Use only for email Contact
        type: array
        items:
          type: string
          format: email

  createAttribute:
    type: object
    properties:
      value:
        description: Value of the attribute. Use only if the attribute's category is 'calculated' or 'global'
        type: string
        example: 'COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]'
      enumeration:
        description: List of values and labels that the attribute can take. Use only if the attribute's category is "category". For example, [{"value":1, "label":"male"}, {"value":2, "label":"female"}]
        type: array
        items:
          type: object
          required:
            - value
            - label
          properties:
            value:
              description: Id of the value
              type: integer
              example: 1
            label:
              description: Label of the value
              type: string
              example: 'Women'
      type:
        description : Type of the attribute. Use only if the attribute's category is 'normal', 'category' or 'transactional' ( type 'boolean' is only available if the category is 'normal' attribute, type 'id' is only available if the category is 'transactional' attribute & type 'category' is only available if the category is 'category' attribute )
        type: string
        enum:
         - text
         - date
         - float
         - boolean
         - id
         - category
        example: 'text'

  updateAttribute:
    type: object
    properties:
      value:
        description: Value of the attribute to update. Use only if the attribute's category is 'calculated' or 'global'
        type: string
        example: 'COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]'
      enumeration:
        description: List of the values and labels that the attribute can take. Use only if the attribute's category is "category". For example, [{"value":1, "label":"male"}, {"value":2, "label":"female"}]
        type: array
        items:
          type: object
          required:
            - value
            - label
          properties:
            value:
              description: Id of the value
              type: integer
              example: 1
            label:
              description: Label of the value
              type: string
              example: 'Men'

  createList:
    type: object
    required:
      - name
      - folderId
    properties:
      name:
        description: Name of the list
        type: string
        example: 'Magento Customer - ES'
      folderId:
        description: Id of the parent folder in which this list is to be created
        type: integer
        format: int64
        example: 2

  updateList:
    type: object
    properties:
      name:
        description: Name of the list. Either of the two parameters (name, folderId) can be updated at a time.
        type: string
        example : 'Magento Customer - ES'
      folderId:
        description: Id of the folder in which the list is to be moved. Either of the two parameters (name, folderId) can be updated at a time.
        type: integer
        format: int64
        example: 2

  requestContactExport:
    type: object
    properties:
      exportAttributes:
        description: List of all the attributes that you want to export. These attributes must be present in your contact database. For example, ['fname', 'lname', 'email'].
        type: array
        items:
          type: string
          example: 'NAME'
      contactFilter:
        description: >
          This attribute has been deprecated and will be removed by January 1st, 2021.
          Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {"blacklisted":true} will export all the blacklisted contacts.
        type: object
        example: {"blacklisted":true,"listid.id":32}
      customContactFilter:
        description: Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported.
        type: object
        properties:
          actionForContacts:
            description: >
              Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id.
              * allContacts - Fetch the list of all contacts for a particular list.
              * subscribed & unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list.
              * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only.
            type: string
            enum:
              - allContacts
              - subscribed
              - unsubscribed
              - unsubscribedPerList
          actionForEmailCampaigns:
            description: >
              Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns.
              * openers & nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign.
              * clickers & nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign.
              * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign.
              * hardBounces & softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
            type: string
            enum:
              - openers
              - nonOpeners
              - clickers
              - nonClickers
              - unsubscribed
              - hardBounces
              - softBounces
          actionForSmsCampaigns:
            description: >
              Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns.
              * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns.
              * hardBounces & softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
            type: string
            enum:
              - hardBounces
              - softBounces
              - unsubscribed
          listId:
            description: Mandatory if actionForContacts is passed, ignored otherwise. Id of the list for which the corresponding action shall be applied in the filter.
            type: integer
            format: int64
            example: 2
          emailCampaignId:
            description: Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.
            type: integer
            format: int64
            example: 12
          smsCampaignId:
            description: Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
            type: integer
            format: int64
            example: 12
      notifyUrl:
        description: Webhook that will be called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
        type: string
        format: url
        example: 'http://requestb.in/173lyyx1'

  requestContactImport:
    type: object
    properties:
      fileUrl:
        description: "Mandatory if fileBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv"
        type: string
        format: url
        example: 'https://importfile.domain.com'
      fileBody:
        description: Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.
        type: string
        example: NAME;SURNAME;EMAIL\n"Smith";"John";"john.smith@example.com"\n"Roger";"Ellie";"ellie36@example.com
      listIds:
        description: Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].
        type: array
        items:
          type: integer
          format: int64
          description: List Id in which the contacts shall be imported
          example: 76
      notifyUrl:
        description: URL that will be called once the import process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
        type: string
        format: url
        example: 'http://requestb.in/173lyyx1'
      newList:
        type: object
        description: To create a new list and import the contacts into it, pass the listName and an optional folderId.
        properties:
          listName:
            description:  List with listName will be created first and users will be imported in it (Mandatory if listIds is empty).
            type: string
            example: 'ContactImport - 2017-05'
          folderId:
            description: Id of the folder where this new list shall be created (Mandatory if listName is not empty).
            type: integer
            format: int64
            example: 2
      emailBlacklist:
        description: To blacklist all the contacts for email
        type: boolean
        default: false
        example: false
      disableNotification:
        type: boolean
        description: To disable email notification
        example: false
        default: false
      smsBlacklist:
        description: To blacklist all the contacts for sms
        type: boolean
        default: false
        example: false
      updateExistingContacts:
        description: To facilitate the choice to update the existing contacts
        type: boolean
        default: true
        example: true
      emptyContactsAttributes:
        description: To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes = true means the empty fields in your import will erase any attribute that currently contain data in SendinBlue, & emptyContactsAttributes = false means the empty fields will not affect your existing data ( only available if `updateExistingContacts` set to true )
        type: boolean
        default: false
        example: true

  createSmsCampaign:
    type: object
    required:
      - name
      - sender
      - content
    properties:
      name:
        description: Name of the campaign
        type: string
        example: 'Spring Promo Code'
      sender:
        description: Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
        type: string
        maxLength: 15
        example: MyShop
      content:
        description: Content of the message. The maximum characters used per SMS is 160, if used more than that, it will be counted as more than one SMS
        type: string
        example: 'Get a discount by visiting our NY store and saying : Happy Spring !'
      recipients:
        type: object
        required:
          - listIds
        properties:
          listIds:
            description: Lists Ids to send the campaign to. REQUIRED if scheduledAt is not empty
            type: array
            items:
              type: integer
              format: int64
              description: List Id to send the campaign to
              example: 54
          exclusionListIds:
            description: List ids which have to be excluded from a campaign
            type: array
            items:
              type: integer
              format: int64
              description: List Id to exclude from the campaign
              example: 15
      scheduledAt:
        description: UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
        type: string
        format: date-time
        example: '2017-05-05T12:30:00+02:00'

  updateSmsCampaign:
    type: object
    properties:
      name:
        description: Name of the campaign
        type: string
        example: 'Spring Promo Code'
      sender:
        description: Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
        type: string
        maxLength: 15
        example: 'MyShop'
      content:
        description: Content of the message. The maximum characters used per SMS is 160, if used more than that, it will be counted as more than one SMS
        type: string
        example: 'Get a discount by visiting our NY store and saying : Happy Spring!'
      recipients:
        type: object
        required:
          - listIds
        properties:
          listIds:
            description: Lists Ids to send the campaign to. REQUIRED if scheduledAt is not empty
            type: array
            items:
              type: integer
              format: int64
              description: List Id to send the campaign to
              example: 54
          exclusionListIds:
            description: List ids which have to be excluded from a campaign
            type: array
            items:
              type: integer
              format: int64
              description: List Id to exclude from the campaign
              example: 15
      scheduledAt:
        description: UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
        type: string
        format: date-time
        example: '2017-05-05T12:30:00+02:00'

  sendTransacSms:
    type: object
    required:
      - sender
      - recipient
      - content
    properties:
      sender:
        description: Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
        type: string
        maxLength: 15
        example: 'MyShop'
      recipient:
        description: Mobile number to send SMS with the country code
        type: string
        example: '33689965433'
      content:
        description: Content of the message. If more than 160 characters long, will be sent as multiple text messages
        type: string
        example: 'Enter this code:CCJJG8 to validate your account'
      type:
        description: Type of the SMS. Marketing SMS messages are those sent typically with marketing content. Transactional SMS messages are sent to individuals and are triggered in response to some action, such as a sign-up, purchase, etc.
        enum:
          - transactional
          - marketing
        default: transactional
        type: string
        example: 'marketing'
      tag:
        description: Tag of the message
        type: string
        example: 'accountValidation'
      webUrl:
        description: Webhook to call for each event triggered by the message (delivered etc.)
        type: string
        format: url
        example: 'http://requestb.in/173lyyx1'
      unicodeEnabled:
        description: Format of the message. It indicates whether the content should be treated as unicode or not.
        type: boolean
        example: false
      organisationPrefix:
          type: string
          description: A recognizable prefix will ensure your audience knows who you are.**Mandatory for U.S. Carriers**.This will be added as your Brand Name before the message content and will be included in content,**Prefer to verify maximum length of 160 characters including this prefix to avoid multiple sending of same sms**.
          example: MyCompany

  sendTestEmail:
    type: object
    properties:
      emailTo:
        description: List of the email addresses of the recipients whom you wish to send the test mail. If left empty, the test mail will be sent to your entire test list.
        type: array
        items:
          type: string
          format: email
          description: Email addres of the recipient
          example: 'helen.jurger@example.com'

  sendTestSms:
    type: object
    properties:
      phoneNumber:
        description: Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted
        type: string
        example: '33689965433'

  getTransacAggregatedSmsReport:
    type: object
    required:
      - range
      - requests
      - delivered
      - softBounces
      - hardBounces
      - blocked
      - unsubscribed
      - replied
      - accepted
      - rejected
    properties:
      range:
        type: string
        description: Time frame of the report
        example: '2016-09-08|2017-04-06'
      requests:
        type: integer
        format: int64
        description: Number of requests for the timeframe
        example: 263
      delivered:
        type: integer
        format: int64
        description: Number of delivered SMS for the timeframe
        example: 249
      hardBounces:
        type: integer
        format: int64
        description: Number of hardbounces for the timeframe
        example: 1
      softBounces:
        type: integer
        format: int64
        description: Number of softbounces for the timeframe
        example: 4
      blocked:
        type: integer
        format: int64
        description: Number of blocked contact for the timeframe
        example: 2
      unsubscribed:
        type: integer
        format: int64
        description: Number of unsubscription for the timeframe
        example: 6
      replied:
        type: integer
        format: int64
        description: Number of answered SMS for the timeframe
        example: 12
      accepted:
        type: integer
        format: int64
        description: Number of accepted for the timeframe
        example: 252
      rejected:
        type: integer
        format: int64
        description: Number of rejected for the timeframe
        example: 8

  getTransacSmsReport:
    type: object
    properties:
      reports:
        type: array
        items:
          type: object
          required:
            - date
            - requests
            - delivered
            - softBounces
            - hardBounces
            - blocked
            - unsubscribed
            - replied
            - accepted
            - rejected
          properties:
            date:
              type: string
              format: date
              description: Date for which statistics are retrieved
              example: '2017-03-17'
            requests:
              type: integer
              format: int64
              description: Number of requests for the date
              example: 87
            delivered:
              type: integer
              format: int64
              description: Number of delivered SMS for the date
              example: 85
            hardBounces:
              type: integer
              format: int64
              description: Number of hardbounces for the date
              example: 1
            softBounces:
              type: integer
              format: int64
              description: Number of softbounces for the date
              example: 1
            blocked:
              type: integer
              format: int64
              description: Number of blocked contact for the date
              example: 0
            unsubscribed:
              type: integer
              format: int64
              description: Number of unsubscription for the date
              example: 1
            replied:
              type: integer
              format: int64
              description: Number of answered SMS for the date
              example: 2
            accepted:
              type: integer
              format: int64
              description: Number of accepted for the date
              example: 85
            rejected:
              type: integer
              format: int64
              description: Number of rejected for the date
              example: 1

  getIp:
    type: object
    required:
      - id
      - ip
      - active
      - domain
    properties:
      id:
        type: integer
        format: int64
        description: ID of the dedicated IP
        example: 3
      ip:
        type: string
        description: Dedicated IP
        example: '123.65.8.22'
      active:
        type: boolean
        description: Status of the IP (true=active, false=inactive)
        example: true
      domain:
        type: string
        description: Domain associated to the IP
        example: 'mailing.myshop.com'

  getIpsFromSender:
    type: object
    required:
      - ips
    properties:
      ips:
        description: Dedicated IP(s) linked to a sender
        type: array
        items:
          type: object
          $ref: '#/definitions/getIpFromSender'

  getIps:
    type: object
    required:
      - ips
    properties:
      ips:
        type: array
        description: Dedicated IP(s) available on your account
        items:
          type: object
          $ref: '#/definitions/getIp'

  getIpFromSender:
    type: object
    required:
      - id
      - ip
      - domain
      - weight
    properties:
      id:
        type: integer
        format: int64
        description: ID of the dedicated IP
        example: 3
      ip:
        type: string
        description: Dedicated IP
        example: '123.65.8.22'
      domain:
        type: string
        description: Domain associated to the IP
        example: 'mailing.myshop.dom'
      weight:
        type: integer
        format: int64
        description: Weight of the IP
        example: 75



  manageIp:
    type: object
    properties:
      ip:
        type: string
        description : Dedicated ID
        example : '123.65.8.22'

  sendEmail:
    type: object
    required:
      - emailTo
    properties:
      emailTo:
        description: List of the email addresses of the recipients. For example, ['abc@example.com', 'asd@example.com'].
        type: array
        items:
          type: string
          format: email
          description: Email address of the recipient
          example : 'john.smith@example.com'
      emailBcc:
        description: List of the email addresses of the recipients in bcc
        type: array
        items:
          type: string
          format: email
          description: Email address of the recipient in bcc
          example : 'jeff87@example.com'
      emailCc:
        description: List of the email addresses of the recipients in cc
        type: array
        items:
          type: string
          format: email
          description: Email address of the recipient in cc
          example : 'alex9877@example.com'
      replyTo:
        description: Email address which shall be used by campaign recipients to reply back
        type: string
        format: email
        example: 'support@myshop.com'
      attachmentUrl:
        description: "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps"
        type: string
        format: url
        example: 'https://attachment.domain.com'
      attachment:
        description: Pass the list of content (base64 encoded) and name of the attachment. For example, [{"content":"base64 encoded content 1", "name":"attcahment1"}, {"content":"base64 encoded content 2", "name":"attcahment2"}].
        type: array
        items:
          type: object
          required:
            - content
            - name
          properties:
            content:
              description: Base64 encoded chunk data of the attachment generated on the fly
              type: string
              format: byte
              example: 'b3JkZXIucGRm'
            name:
              description: Required for content. Name of the attachment
              type: string
              example: 'myAttachment.png'
      headers:
        type: object
        description: Pass the set of headers that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, {"Content-Type":"text/html", "charset":"iso-8859-1", "sender.ip":"1.2.3.4"}
        example: {"Content-Type":"text/html", "charset":"iso-8859-1", "sender.ip":"1.2.3.4"}
      attributes:
        type: object
        description: Pass the set of attributes to customize the template. For example, {"FNAME":"Joe", "LNAME":"Doe"}
        example: {"FNAME":"Joe", "LNAME":"Doe"}
      tags:
        description: Tag your emails to find them more easily
        type: array
        items:
          type: string
          example: 'tag1'
  getTransacEmailContent:
    type: object
    required:
      - email
      - subject
      - date
      - events
      - body
      - attachmentCount
    properties:
      email:
        description: Email address to which transactional email has been sent
        type: string
        format: email
        example: "abc@example.com"
      subject:
        description: Subject of the sent email
        type: string
        example: 'Summer Camp'
      templateId:
        description: Id of the template
        type: integer
        format: int64
        example: 2
      date:
        description: Date on which transactional email was sent
        type: string
        format: date-time
        example: "2017-03-12T12:30:00Z"
      events:
        description: Series of events which occurred on the transactional email
        type: array
        items:
          type: object
          required:
            - name
            - time
          properties:
            name:
              description: Name of the event that occurred on the sent email
              type: string
              example: 'delivered'
            time:
              description: Time at which the event occurred
              type: string
              format: date-time
              example: "2017-03-12T12:30:00Z"
      body:
        description: Actual content of the transactional email that has been sent
        type: string
        example: "<!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1> <p>This is the actual html content sent</p> </body> </html>"
      attachmentCount:
        description: Count of the attachments that were sent in the email
        type: integer
        format: int64
        example: 2

  getTransacEmailsList:
    type: object
    properties:
      transactionalEmails:
        type: array
        items:
          type: object
          required:
            - email
            - subject
            - messageId
            - uuid
            - date
          properties:
            email:
              description: Email address to which transactional email has been sent
              type: string
              format: email
              example: 'john.smith@example.com'
            subject:
              description: Subject of the sent email
              type: string
              example: 'Summer Camp'
            templateId:
              description: Id of the template
              type: integer
              format: int64
              example: 2
            messageId:
              description: Message Id of the sent email
              type: string
              example: '<201798300811.5700093@relay.domain.com>'
            uuid:
              description: Unique id of the email sent to a particular contact
              type: string
              example: '5a78c-209ok98262910-s99a341'
            date:
              description: Date on which transactional email was sent
              type: string
              format: date-time
              example: '2017-03-12T12:30:00Z'
            from:
              description: Email address of the sender from which the email was sent
              type: string
              format: email
              example: 'diana.doe@example.com'
            tags:
              description: Tags used for your email
              type: array
              items:
                type: string
                example: 'tag1'

  abTestVersionStats:
    description: Percentage of a particular event for both versions
    type: object
    required:
      - Version A
      - Version B
    properties:
      Version A:
        type: string
        description : percentage of an event for version A
        example : '50%'
      Version B:
        type: string
        description : percentage of an event for version B
        example : '50%'

  abTestVersionClicks:
    description: Information on clicked links for a particular version
    type: array
    items:
      type: object
      required:
        - link
        - clicksCount
        - clickRate
      properties:
        link:
          type: string
          description: URL of the link
          example: 'https://facbook.com/versionA'
        clicksCount:
          type: integer
          format: int64
          description: Number of times a link is clicked
          example: 3
        clickRate:
          type: string
          description: Percentage of clicks of link with respect to total clicks
          example: 40%

  blockDomain:
    type: object
    required:
      - domain
    properties:
      domain:
        type: string
        description: name of the domain to be blocked
        example: "example.com"

  getBlockedDomains:
    description: list of blocked domains
    type: object
    required:
      - domains
    properties:
      domains:
        description: List of all blocked domains
        type: array
        items:
          type: string
          description: name of blocked domain
          example: "contact.com"
