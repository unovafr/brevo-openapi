=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

The version of the OpenAPI document: 3.0.0
Contact: contact@brevo.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Brevo
  class TasksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_type Filter by task type (ID)
    # @option opts [String] :filter_status Filter by task status
    # @option opts [String] :filter_date Filter by date
    # @option opts [String] :filter_assign_to Filter by the \&quot;assignTo\&quot; ID. You can utilize account emails for the \&quot;assignTo\&quot; attribute.
    # @option opts [String] :filter_contacts Filter by contact ids
    # @option opts [String] :filter_deals Filter by deals ids
    # @option opts [String] :filter_companies Filter by companies ids
    # @option opts [Integer] :date_from dateFrom to date range filter type (timestamp in milliseconds)
    # @option opts [Integer] :date_to dateTo to date range filter type (timestamp in milliseconds)
    # @option opts [Integer] :offset Index of the first document of the page
    # @option opts [Integer] :limit Number of documents per page (default to 50)
    # @option opts [String] :sort Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed
    # @option opts [String] :sort_by The field used to sort field names.
    # @return [TaskList]
    def crm_tasks_get(opts = {})
      data, _status_code, _headers = crm_tasks_get_with_http_info(opts)
      data
    end

    # Get all tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_type Filter by task type (ID)
    # @option opts [String] :filter_status Filter by task status
    # @option opts [String] :filter_date Filter by date
    # @option opts [String] :filter_assign_to Filter by the \&quot;assignTo\&quot; ID. You can utilize account emails for the \&quot;assignTo\&quot; attribute.
    # @option opts [String] :filter_contacts Filter by contact ids
    # @option opts [String] :filter_deals Filter by deals ids
    # @option opts [String] :filter_companies Filter by companies ids
    # @option opts [Integer] :date_from dateFrom to date range filter type (timestamp in milliseconds)
    # @option opts [Integer] :date_to dateTo to date range filter type (timestamp in milliseconds)
    # @option opts [Integer] :offset Index of the first document of the page
    # @option opts [Integer] :limit Number of documents per page (default to 50)
    # @option opts [String] :sort Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed
    # @option opts [String] :sort_by The field used to sort field names.
    # @return [Array<(TaskList, Integer, Hash)>] TaskList data, response status code and response headers
    def crm_tasks_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.crm_tasks_get ...'
      end
      allowable_values = ["done", "undone"]
      if @api_client.config.client_side_validation && opts[:'filter_status'] && !allowable_values.include?(opts[:'filter_status'])
        fail ArgumentError, "invalid value for \"filter_status\", must be one of #{allowable_values}"
      end
      allowable_values = ["overdue", "today", "tomorrow", "week", "range"]
      if @api_client.config.client_side_validation && opts[:'filter_date'] && !allowable_values.include?(opts[:'filter_date'])
        fail ArgumentError, "invalid value for \"filter_date\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/crm/tasks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter[type]'] = opts[:'filter_type'] if !opts[:'filter_type'].nil?
      query_params[:'filter[status]'] = opts[:'filter_status'] if !opts[:'filter_status'].nil?
      query_params[:'filter[date]'] = opts[:'filter_date'] if !opts[:'filter_date'].nil?
      query_params[:'filter[assignTo]'] = opts[:'filter_assign_to'] if !opts[:'filter_assign_to'].nil?
      query_params[:'filter[contacts]'] = opts[:'filter_contacts'] if !opts[:'filter_contacts'].nil?
      query_params[:'filter[deals]'] = opts[:'filter_deals'] if !opts[:'filter_deals'].nil?
      query_params[:'filter[companies]'] = opts[:'filter_companies'] if !opts[:'filter_companies'].nil?
      query_params[:'dateFrom'] = opts[:'date_from'] if !opts[:'date_from'].nil?
      query_params[:'dateTo'] = opts[:'date_to'] if !opts[:'date_to'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TaskList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TasksApi.crm_tasks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#crm_tasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a task
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def crm_tasks_id_delete(id, opts = {})
      crm_tasks_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a task
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def crm_tasks_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.crm_tasks_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TasksApi.crm_tasks_id_delete"
      end
      # resource path
      local_var_path = '/crm/tasks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TasksApi.crm_tasks_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#crm_tasks_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a task
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def crm_tasks_id_get(id, opts = {})
      data, _status_code, _headers = crm_tasks_id_get_with_http_info(id, opts)
      data
    end

    # Get a task
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def crm_tasks_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.crm_tasks_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TasksApi.crm_tasks_id_get"
      end
      # resource path
      local_var_path = '/crm/tasks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TasksApi.crm_tasks_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#crm_tasks_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a task
    # @param id [String] 
    # @param crm_tasks_id_patch_request [CrmTasksIdPatchRequest] Updated task details.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def crm_tasks_id_patch(id, crm_tasks_id_patch_request, opts = {})
      crm_tasks_id_patch_with_http_info(id, crm_tasks_id_patch_request, opts)
      nil
    end

    # Update a task
    # @param id [String] 
    # @param crm_tasks_id_patch_request [CrmTasksIdPatchRequest] Updated task details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def crm_tasks_id_patch_with_http_info(id, crm_tasks_id_patch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.crm_tasks_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TasksApi.crm_tasks_id_patch"
      end
      # verify the required parameter 'crm_tasks_id_patch_request' is set
      if @api_client.config.client_side_validation && crm_tasks_id_patch_request.nil?
        fail ArgumentError, "Missing the required parameter 'crm_tasks_id_patch_request' when calling TasksApi.crm_tasks_id_patch"
      end
      # resource path
      local_var_path = '/crm/tasks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(crm_tasks_id_patch_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TasksApi.crm_tasks_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#crm_tasks_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a task
    # @param crm_tasks_post_request [CrmTasksPostRequest] Task name.
    # @param [Hash] opts the optional parameters
    # @return [CrmTasksPost201Response]
    def crm_tasks_post(crm_tasks_post_request, opts = {})
      data, _status_code, _headers = crm_tasks_post_with_http_info(crm_tasks_post_request, opts)
      data
    end

    # Create a task
    # @param crm_tasks_post_request [CrmTasksPostRequest] Task name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CrmTasksPost201Response, Integer, Hash)>] CrmTasksPost201Response data, response status code and response headers
    def crm_tasks_post_with_http_info(crm_tasks_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.crm_tasks_post ...'
      end
      # verify the required parameter 'crm_tasks_post_request' is set
      if @api_client.config.client_side_validation && crm_tasks_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'crm_tasks_post_request' when calling TasksApi.crm_tasks_post"
      end
      # resource path
      local_var_path = '/crm/tasks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(crm_tasks_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CrmTasksPost201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TasksApi.crm_tasks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#crm_tasks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all task types
    # @param [Hash] opts the optional parameters
    # @return [TaskTypes]
    def crm_tasktypes_get(opts = {})
      data, _status_code, _headers = crm_tasktypes_get_with_http_info(opts)
      data
    end

    # Get all task types
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskTypes, Integer, Hash)>] TaskTypes data, response status code and response headers
    def crm_tasktypes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.crm_tasktypes_get ...'
      end
      # resource path
      local_var_path = '/crm/tasktypes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TaskTypes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TasksApi.crm_tasktypes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#crm_tasktypes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
