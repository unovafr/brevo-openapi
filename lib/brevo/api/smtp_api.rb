=begin
#SendinBlue API

#SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

The version of the OpenAPI document: 3.0.0
Contact: contact@sendinblue.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Brevo
  class SMTPApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new domain to the list of blocked domains
    # Blocks a new domain in order to avoid messages being sent to the same
    # @param block_domain [BlockDomain] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def block_new_domain(block_domain, opts = {})
      block_new_domain_with_http_info(block_domain, opts)
      nil
    end

    # Add a new domain to the list of blocked domains
    # Blocks a new domain in order to avoid messages being sent to the same
    # @param block_domain [BlockDomain] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def block_new_domain_with_http_info(block_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.block_new_domain ...'
      end
      # verify the required parameter 'block_domain' is set
      if @api_client.config.client_side_validation && block_domain.nil?
        fail ArgumentError, "Missing the required parameter 'block_domain' when calling SMTPApi.block_new_domain"
      end
      # resource path
      local_var_path = '/smtp/blockedDomains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(block_domain)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.block_new_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#block_new_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an email template
    # @param smtp_template [CreateSmtpTemplate] values to update in transactional email template
    # @param [Hash] opts the optional parameters
    # @return [CreateModel]
    def create_smtp_template(smtp_template, opts = {})
      data, _status_code, _headers = create_smtp_template_with_http_info(smtp_template, opts)
      data
    end

    # Create an email template
    # @param smtp_template [CreateSmtpTemplate] values to update in transactional email template
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateModel, Integer, Hash)>] CreateModel data, response status code and response headers
    def create_smtp_template_with_http_info(smtp_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.create_smtp_template ...'
      end
      # verify the required parameter 'smtp_template' is set
      if @api_client.config.client_side_validation && smtp_template.nil?
        fail ArgumentError, "Missing the required parameter 'smtp_template' when calling SMTPApi.create_smtp_template"
      end
      # resource path
      local_var_path = '/smtp/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(smtp_template)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.create_smtp_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#create_smtp_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unblock an existing domain from the list of blocked domains
    # Unblocks an existing domain from the list of blocked domains
    # @param domain [String] The name of the domain to be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_blocked_domain(domain, opts = {})
      delete_blocked_domain_with_http_info(domain, opts)
      nil
    end

    # Unblock an existing domain from the list of blocked domains
    # Unblocks an existing domain from the list of blocked domains
    # @param domain [String] The name of the domain to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_blocked_domain_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.delete_blocked_domain ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling SMTPApi.delete_blocked_domain"
      end
      # resource path
      local_var_path = '/smtp/blockedDomains/{domain}'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.delete_blocked_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#delete_blocked_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete hardbounces
    # Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteHardbounces] :delete_hardbounces values to delete hardbounces
    # @return [nil]
    def delete_hardbounces(opts = {})
      delete_hardbounces_with_http_info(opts)
      nil
    end

    # Delete hardbounces
    # Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteHardbounces] :delete_hardbounces values to delete hardbounces
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_hardbounces_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.delete_hardbounces ...'
      end
      # resource path
      local_var_path = '/smtp/deleteHardbounces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_hardbounces'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.delete_hardbounces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#delete_hardbounces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an inactive email template
    # @param template_id [Integer] id of the template
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_smtp_template(template_id, opts = {})
      delete_smtp_template_with_http_info(template_id, opts)
      nil
    end

    # Delete an inactive email template
    # @param template_id [Integer] id of the template
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_smtp_template_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.delete_smtp_template ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling SMTPApi.delete_smtp_template"
      end
      # resource path
      local_var_path = '/smtp/templates/{templateId}'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.delete_smtp_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#delete_smtp_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get your transactional email activity aggregated over a period of time
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :tag Tag of the emails
    # @return [GetAggregatedReport]
    def get_aggregated_smtp_report(opts = {})
      data, _status_code, _headers = get_aggregated_smtp_report_with_http_info(opts)
      data
    end

    # Get your transactional email activity aggregated over a period of time
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :tag Tag of the emails
    # @return [Array<(GetAggregatedReport, Integer, Hash)>] GetAggregatedReport data, response status code and response headers
    def get_aggregated_smtp_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.get_aggregated_smtp_report ...'
      end
      # resource path
      local_var_path = '/smtp/statistics/aggregatedReport'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAggregatedReport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.get_aggregated_smtp_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#get_aggregated_smtp_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of blocked domains
    # Get the list of blocked domains
    # @param [Hash] opts the optional parameters
    # @return [GetBlockedDomains]
    def get_blocked_domains(opts = {})
      data, _status_code, _headers = get_blocked_domains_with_http_info(opts)
      data
    end

    # Get the list of blocked domains
    # Get the list of blocked domains
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBlockedDomains, Integer, Hash)>] GetBlockedDomains data, response status code and response headers
    def get_blocked_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.get_blocked_domains ...'
      end
      # resource path
      local_var_path = '/smtp/blockedDomains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBlockedDomains'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.get_blocked_domains",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#get_blocked_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all your transactional email activity (unaggregated events)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number limitation for the result returned (default to 50)
    # @option opts [Integer] :offset Beginning point in the list to retrieve from. (default to 0)
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :email Filter the report for a specific email addresses
    # @option opts [String] :event Filter the report for a specific event type
    # @option opts [String] :tags Filter the report for tags (serialized and urlencoded array)
    # @option opts [String] :message_id Filter on a specific message id
    # @option opts [Integer] :template_id Filter on a specific template id
    # @return [GetEmailEventReport]
    def get_email_event_report(opts = {})
      data, _status_code, _headers = get_email_event_report_with_http_info(opts)
      data
    end

    # Get all your transactional email activity (unaggregated events)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number limitation for the result returned (default to 50)
    # @option opts [Integer] :offset Beginning point in the list to retrieve from. (default to 0)
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :email Filter the report for a specific email addresses
    # @option opts [String] :event Filter the report for a specific event type
    # @option opts [String] :tags Filter the report for tags (serialized and urlencoded array)
    # @option opts [String] :message_id Filter on a specific message id
    # @option opts [Integer] :template_id Filter on a specific template id
    # @return [Array<(GetEmailEventReport, Integer, Hash)>] GetEmailEventReport data, response status code and response headers
    def get_email_event_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.get_email_event_report ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SMTPApi.get_email_event_report, must be smaller than or equal to 100.'
      end

      allowable_values = ["bounces", "hardBounces", "softBounces", "delivered", "spam", "requests", "opened", "clicks", "invalid", "deferred", "blocked", "unsubscribed"]
      if @api_client.config.client_side_validation && opts[:'event'] && !allowable_values.include?(opts[:'event'])
        fail ArgumentError, "invalid value for \"event\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/smtp/statistics/events'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'messageId'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'templateId'] = opts[:'template_id'] if !opts[:'template_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailEventReport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.get_email_event_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#get_email_event_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get your transactional email activity aggregated per day
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of documents returned per page (default to 10)
    # @option opts [Integer] :offset Index of the first document on the page (default to 0)
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :tag Tag of the emails
    # @return [GetReports]
    def get_smtp_report(opts = {})
      data, _status_code, _headers = get_smtp_report_with_http_info(opts)
      data
    end

    # Get your transactional email activity aggregated per day
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of documents returned per page (default to 10)
    # @option opts [Integer] :offset Index of the first document on the page (default to 0)
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :tag Tag of the emails
    # @return [Array<(GetReports, Integer, Hash)>] GetReports data, response status code and response headers
    def get_smtp_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.get_smtp_report ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 30
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SMTPApi.get_smtp_report, must be smaller than or equal to 30.'
      end

      # resource path
      local_var_path = '/smtp/statistics/reports'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetReports'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.get_smtp_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#get_smtp_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the template information
    # @param template_id [Integer] id of the template
    # @param [Hash] opts the optional parameters
    # @return [GetSmtpTemplateOverview]
    def get_smtp_template(template_id, opts = {})
      data, _status_code, _headers = get_smtp_template_with_http_info(template_id, opts)
      data
    end

    # Returns the template information
    # @param template_id [Integer] id of the template
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSmtpTemplateOverview, Integer, Hash)>] GetSmtpTemplateOverview data, response status code and response headers
    def get_smtp_template_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.get_smtp_template ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling SMTPApi.get_smtp_template"
      end
      # resource path
      local_var_path = '/smtp/templates/{templateId}'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSmtpTemplateOverview'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.get_smtp_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#get_smtp_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of email templates
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :template_status Filter on the status of the template. Active &#x3D; true, inactive &#x3D; false
    # @option opts [Integer] :limit Number of documents returned per page (default to 50)
    # @option opts [Integer] :offset Index of the first document in the page (default to 0)
    # @return [GetSmtpTemplates]
    def get_smtp_templates(opts = {})
      data, _status_code, _headers = get_smtp_templates_with_http_info(opts)
      data
    end

    # Get the list of email templates
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :template_status Filter on the status of the template. Active &#x3D; true, inactive &#x3D; false
    # @option opts [Integer] :limit Number of documents returned per page (default to 50)
    # @option opts [Integer] :offset Index of the first document in the page (default to 0)
    # @return [Array<(GetSmtpTemplates, Integer, Hash)>] GetSmtpTemplates data, response status code and response headers
    def get_smtp_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.get_smtp_templates ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SMTPApi.get_smtp_templates, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/smtp/templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'templateStatus'] = opts[:'template_status'] if !opts[:'template_status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSmtpTemplates'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.get_smtp_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#get_smtp_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of blocked or unsubscribed transactional contacts
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts
    # @option opts [Integer] :limit Number of documents returned per page (default to 50)
    # @option opts [Integer] :offset Index of the first document on the page (default to 0)
    # @option opts [Array<String>] :senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed
    # @return [GetTransacBlockedContacts]
    def get_transac_blocked_contacts(opts = {})
      data, _status_code, _headers = get_transac_blocked_contacts_with_http_info(opts)
      data
    end

    # Get the list of blocked or unsubscribed transactional contacts
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts
    # @option opts [Integer] :limit Number of documents returned per page (default to 50)
    # @option opts [Integer] :offset Index of the first document on the page (default to 0)
    # @option opts [Array<String>] :senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed
    # @return [Array<(GetTransacBlockedContacts, Integer, Hash)>] GetTransacBlockedContacts data, response status code and response headers
    def get_transac_blocked_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.get_transac_blocked_contacts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SMTPApi.get_transac_blocked_contacts, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/smtp/blockedContacts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'senders'] = @api_client.build_collection_param(opts[:'senders'], :csv) if !opts[:'senders'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransacBlockedContacts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.get_transac_blocked_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#get_transac_blocked_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the personalized content of a sent transactional email
    # @param uuid [String] Unique id of the transactional email that has been sent to a particular contact
    # @param [Hash] opts the optional parameters
    # @return [GetTransacEmailContent]
    def get_transac_email_content(uuid, opts = {})
      data, _status_code, _headers = get_transac_email_content_with_http_info(uuid, opts)
      data
    end

    # Get the personalized content of a sent transactional email
    # @param uuid [String] Unique id of the transactional email that has been sent to a particular contact
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTransacEmailContent, Integer, Hash)>] GetTransacEmailContent data, response status code and response headers
    def get_transac_email_content_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.get_transac_email_content ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling SMTPApi.get_transac_email_content"
      end
      # resource path
      local_var_path = '/smtp/emails/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransacEmailContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.get_transac_email_content",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#get_transac_email_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of transactional emails on the basis of allowed filters
    # This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.
    # @option opts [Integer] :template_id Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.
    # @option opts [String] :message_id Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.
    # @option opts [Date] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.
    # @option opts [Date] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
    # @return [GetTransacEmailsList]
    def get_transac_emails_list(opts = {})
      data, _status_code, _headers = get_transac_emails_list_with_http_info(opts)
      data
    end

    # Get the list of transactional emails on the basis of allowed filters
    # This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.
    # @option opts [Integer] :template_id Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.
    # @option opts [String] :message_id Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.
    # @option opts [Date] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.
    # @option opts [Date] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
    # @return [Array<(GetTransacEmailsList, Integer, Hash)>] GetTransacEmailsList data, response status code and response headers
    def get_transac_emails_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.get_transac_emails_list ...'
      end
      # resource path
      local_var_path = '/smtp/emails'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'templateId'] = opts[:'template_id'] if !opts[:'template_id'].nil?
      query_params[:'messageId'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransacEmailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.get_transac_emails_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#get_transac_emails_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a template
    # This endpoint is deprecated. Prefer v3/smtp/email instead.
    # @param template_id [Integer] Id of the template
    # @param send_email [SendEmail] 
    # @param [Hash] opts the optional parameters
    # @return [SendTemplateEmail]
    def send_template(template_id, send_email, opts = {})
      data, _status_code, _headers = send_template_with_http_info(template_id, send_email, opts)
      data
    end

    # Send a template
    # This endpoint is deprecated. Prefer v3/smtp/email instead.
    # @param template_id [Integer] Id of the template
    # @param send_email [SendEmail] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendTemplateEmail, Integer, Hash)>] SendTemplateEmail data, response status code and response headers
    def send_template_with_http_info(template_id, send_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.send_template ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling SMTPApi.send_template"
      end
      # verify the required parameter 'send_email' is set
      if @api_client.config.client_side_validation && send_email.nil?
        fail ArgumentError, "Missing the required parameter 'send_email' when calling SMTPApi.send_template"
      end
      # resource path
      local_var_path = '/smtp/templates/{templateId}/send'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(send_email)

      # return_type
      return_type = opts[:debug_return_type] || 'SendTemplateEmail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.send_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#send_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a template to your test list
    # @param template_id [Integer] Id of the template
    # @param send_test_email [SendTestEmail] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_test_template(template_id, send_test_email, opts = {})
      send_test_template_with_http_info(template_id, send_test_email, opts)
      nil
    end

    # Send a template to your test list
    # @param template_id [Integer] Id of the template
    # @param send_test_email [SendTestEmail] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_test_template_with_http_info(template_id, send_test_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.send_test_template ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling SMTPApi.send_test_template"
      end
      # verify the required parameter 'send_test_email' is set
      if @api_client.config.client_side_validation && send_test_email.nil?
        fail ArgumentError, "Missing the required parameter 'send_test_email' when calling SMTPApi.send_test_template"
      end
      # resource path
      local_var_path = '/smtp/templates/{templateId}/sendTest'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(send_test_email)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.send_test_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#send_test_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a transactional email
    # @param send_smtp_email [SendSmtpEmail] Values to send a transactional email
    # @param [Hash] opts the optional parameters
    # @return [CreateSmtpEmail]
    def send_transac_email(send_smtp_email, opts = {})
      data, _status_code, _headers = send_transac_email_with_http_info(send_smtp_email, opts)
      data
    end

    # Send a transactional email
    # @param send_smtp_email [SendSmtpEmail] Values to send a transactional email
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSmtpEmail, Integer, Hash)>] CreateSmtpEmail data, response status code and response headers
    def send_transac_email_with_http_info(send_smtp_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.send_transac_email ...'
      end
      # verify the required parameter 'send_smtp_email' is set
      if @api_client.config.client_side_validation && send_smtp_email.nil?
        fail ArgumentError, "Missing the required parameter 'send_smtp_email' when calling SMTPApi.send_transac_email"
      end
      # resource path
      local_var_path = '/smtp/email'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(send_smtp_email)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSmtpEmail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.send_transac_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#send_transac_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unblock or resubscribe a transactional contact
    # @param email [String] contact email (urlencoded) to unblock.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def smtp_blocked_contacts_email_delete(email, opts = {})
      smtp_blocked_contacts_email_delete_with_http_info(email, opts)
      nil
    end

    # Unblock or resubscribe a transactional contact
    # @param email [String] contact email (urlencoded) to unblock.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def smtp_blocked_contacts_email_delete_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.smtp_blocked_contacts_email_delete ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling SMTPApi.smtp_blocked_contacts_email_delete"
      end
      # resource path
      local_var_path = '/smtp/blockedContacts/{email}'.sub('{' + 'email' + '}', CGI.escape(email.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.smtp_blocked_contacts_email_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#smtp_blocked_contacts_email_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an SMTP transactional log
    # @param message_id [String] MessageId of the transactional log to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def smtp_log_message_id_delete(message_id, opts = {})
      smtp_log_message_id_delete_with_http_info(message_id, opts)
      nil
    end

    # Delete an SMTP transactional log
    # @param message_id [String] MessageId of the transactional log to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def smtp_log_message_id_delete_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.smtp_log_message_id_delete ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling SMTPApi.smtp_log_message_id_delete"
      end
      # resource path
      local_var_path = '/smtp/log/{messageId}'.sub('{' + 'messageId' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.smtp_log_message_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#smtp_log_message_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an email template
    # @param template_id [Integer] id of the template
    # @param smtp_template [UpdateSmtpTemplate] values to update in transactional email template
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_smtp_template(template_id, smtp_template, opts = {})
      update_smtp_template_with_http_info(template_id, smtp_template, opts)
      nil
    end

    # Update an email template
    # @param template_id [Integer] id of the template
    # @param smtp_template [UpdateSmtpTemplate] values to update in transactional email template
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_smtp_template_with_http_info(template_id, smtp_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMTPApi.update_smtp_template ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling SMTPApi.update_smtp_template"
      end
      # verify the required parameter 'smtp_template' is set
      if @api_client.config.client_side_validation && smtp_template.nil?
        fail ArgumentError, "Missing the required parameter 'smtp_template' when calling SMTPApi.update_smtp_template"
      end
      # resource path
      local_var_path = '/smtp/templates/{templateId}'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(smtp_template)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"SMTPApi.update_smtp_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMTPApi#update_smtp_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
