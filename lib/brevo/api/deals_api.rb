=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

The version of the OpenAPI document: 3.0.0
Contact: contact@brevo.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Brevo
  class DealsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get deal attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<DealAttributesInner>]
    def crm_attributes_deals_get(opts = {})
      data, _status_code, _headers = crm_attributes_deals_get_with_http_info(opts)
      data
    end

    # Get deal attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DealAttributesInner>, Integer, Hash)>] Array<DealAttributesInner> data, response status code and response headers
    def crm_attributes_deals_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_attributes_deals_get ...'
      end
      # resource path
      local_var_path = '/crm/attributes/deals'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DealAttributesInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_attributes_deals_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_attributes_deals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all deals
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters_attributes_deal_name Filter by attributes. If you have a filter for the owner on your end, please send it as filters[attributes.deal_owner] and utilize the account email for the filtering.
    # @option opts [String] :filters_linked_companies_ids Filter by linked companies ids
    # @option opts [String] :filters_linked_contacts_ids Filter by linked companies ids
    # @option opts [Integer] :offset Index of the first document of the page
    # @option opts [Integer] :limit Number of documents per page
    # @option opts [String] :sort Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed
    # @return [DealsList]
    def crm_deals_get(opts = {})
      data, _status_code, _headers = crm_deals_get_with_http_info(opts)
      data
    end

    # Get all deals
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters_attributes_deal_name Filter by attributes. If you have a filter for the owner on your end, please send it as filters[attributes.deal_owner] and utilize the account email for the filtering.
    # @option opts [String] :filters_linked_companies_ids Filter by linked companies ids
    # @option opts [String] :filters_linked_contacts_ids Filter by linked companies ids
    # @option opts [Integer] :offset Index of the first document of the page
    # @option opts [Integer] :limit Number of documents per page
    # @option opts [String] :sort Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed
    # @return [Array<(DealsList, Integer, Hash)>] DealsList data, response status code and response headers
    def crm_deals_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_deals_get ...'
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/crm/deals'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filters[attributes.deal_name]'] = opts[:'filters_attributes_deal_name'] if !opts[:'filters_attributes_deal_name'].nil?
      query_params[:'filters[linkedCompaniesIds]'] = opts[:'filters_linked_companies_ids'] if !opts[:'filters_linked_companies_ids'].nil?
      query_params[:'filters[linkedContactsIds]'] = opts[:'filters_linked_contacts_ids'] if !opts[:'filters_linked_contacts_ids'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DealsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_deals_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_deals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a deal
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def crm_deals_id_delete(id, opts = {})
      crm_deals_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a deal
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def crm_deals_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_deals_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.crm_deals_id_delete"
      end
      # resource path
      local_var_path = '/crm/deals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_deals_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_deals_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a deal
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Deal]
    def crm_deals_id_get(id, opts = {})
      data, _status_code, _headers = crm_deals_id_get_with_http_info(id, opts)
      data
    end

    # Get a deal
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Deal, Integer, Hash)>] Deal data, response status code and response headers
    def crm_deals_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_deals_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.crm_deals_id_get"
      end
      # resource path
      local_var_path = '/crm/deals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Deal'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_deals_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_deals_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a deal
    # @param id [String] 
    # @param crm_deals_id_patch_request [CrmDealsIdPatchRequest] Updated deal details.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def crm_deals_id_patch(id, crm_deals_id_patch_request, opts = {})
      crm_deals_id_patch_with_http_info(id, crm_deals_id_patch_request, opts)
      nil
    end

    # Update a deal
    # @param id [String] 
    # @param crm_deals_id_patch_request [CrmDealsIdPatchRequest] Updated deal details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def crm_deals_id_patch_with_http_info(id, crm_deals_id_patch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_deals_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.crm_deals_id_patch"
      end
      # verify the required parameter 'crm_deals_id_patch_request' is set
      if @api_client.config.client_side_validation && crm_deals_id_patch_request.nil?
        fail ArgumentError, "Missing the required parameter 'crm_deals_id_patch_request' when calling DealsApi.crm_deals_id_patch"
      end
      # resource path
      local_var_path = '/crm/deals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(crm_deals_id_patch_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_deals_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_deals_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Link and Unlink a deal with contacts and companies
    # @param id [String] 
    # @param crm_deals_link_unlink_id_patch_request [CrmDealsLinkUnlinkIdPatchRequest] Linked / Unlinked contacts and companies ids.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def crm_deals_link_unlink_id_patch(id, crm_deals_link_unlink_id_patch_request, opts = {})
      crm_deals_link_unlink_id_patch_with_http_info(id, crm_deals_link_unlink_id_patch_request, opts)
      nil
    end

    # Link and Unlink a deal with contacts and companies
    # @param id [String] 
    # @param crm_deals_link_unlink_id_patch_request [CrmDealsLinkUnlinkIdPatchRequest] Linked / Unlinked contacts and companies ids.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def crm_deals_link_unlink_id_patch_with_http_info(id, crm_deals_link_unlink_id_patch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_deals_link_unlink_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.crm_deals_link_unlink_id_patch"
      end
      # verify the required parameter 'crm_deals_link_unlink_id_patch_request' is set
      if @api_client.config.client_side_validation && crm_deals_link_unlink_id_patch_request.nil?
        fail ArgumentError, "Missing the required parameter 'crm_deals_link_unlink_id_patch_request' when calling DealsApi.crm_deals_link_unlink_id_patch"
      end
      # resource path
      local_var_path = '/crm/deals/link-unlink/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(crm_deals_link_unlink_id_patch_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_deals_link_unlink_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_deals_link_unlink_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a deal
    # @param crm_deals_post_request [CrmDealsPostRequest] Deal create data.
    # @param [Hash] opts the optional parameters
    # @return [CrmDealsPost201Response]
    def crm_deals_post(crm_deals_post_request, opts = {})
      data, _status_code, _headers = crm_deals_post_with_http_info(crm_deals_post_request, opts)
      data
    end

    # Create a deal
    # @param crm_deals_post_request [CrmDealsPostRequest] Deal create data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CrmDealsPost201Response, Integer, Hash)>] CrmDealsPost201Response data, response status code and response headers
    def crm_deals_post_with_http_info(crm_deals_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_deals_post ...'
      end
      # verify the required parameter 'crm_deals_post_request' is set
      if @api_client.config.client_side_validation && crm_deals_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'crm_deals_post_request' when calling DealsApi.crm_deals_post"
      end
      # resource path
      local_var_path = '/crm/deals'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(crm_deals_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CrmDealsPost201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_deals_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_deals_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all pipelines
    # @param [Hash] opts the optional parameters
    # @return [Array<Pipeline>]
    def crm_pipeline_details_all_get(opts = {})
      data, _status_code, _headers = crm_pipeline_details_all_get_with_http_info(opts)
      data
    end

    # Get all pipelines
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Pipeline>, Integer, Hash)>] Array<Pipeline> data, response status code and response headers
    def crm_pipeline_details_all_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_pipeline_details_all_get ...'
      end
      # resource path
      local_var_path = '/crm/pipeline/details/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Pipeline>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_pipeline_details_all_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_pipeline_details_all_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pipeline stages
    # This endpoint is deprecated. Prefer /crm/pipeline/details/{pipelineID} instead.
    # @param [Hash] opts the optional parameters
    # @return [Pipeline]
    def crm_pipeline_details_get(opts = {})
      data, _status_code, _headers = crm_pipeline_details_get_with_http_info(opts)
      data
    end

    # Get pipeline stages
    # This endpoint is deprecated. Prefer /crm/pipeline/details/{pipelineID} instead.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def crm_pipeline_details_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_pipeline_details_get ...'
      end
      # resource path
      local_var_path = '/crm/pipeline/details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Pipeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_pipeline_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_pipeline_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a pipeline
    # @param pipeline_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Pipeline>]
    def crm_pipeline_details_pipeline_id_get(pipeline_id, opts = {})
      data, _status_code, _headers = crm_pipeline_details_pipeline_id_get_with_http_info(pipeline_id, opts)
      data
    end

    # Get a pipeline
    # @param pipeline_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Pipeline>, Integer, Hash)>] Array<Pipeline> data, response status code and response headers
    def crm_pipeline_details_pipeline_id_get_with_http_info(pipeline_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.crm_pipeline_details_pipeline_id_get ...'
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling DealsApi.crm_pipeline_details_pipeline_id_get"
      end
      # resource path
      local_var_path = '/crm/pipeline/details/{pipelineID}'.sub('{' + 'pipelineID' + '}', CGI.escape(pipeline_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Pipeline>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"DealsApi.crm_pipeline_details_pipeline_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#crm_pipeline_details_pipeline_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
