=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

The version of the OpenAPI document: 3.0.0
Contact: contact@brevo.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Brevo
  class MasterAccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a group
    # This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
    # @param id [String] Id of the group
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def corporate_group_id_delete(id, opts = {})
      corporate_group_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a group
    # This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
    # @param id [String] Id of the group
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def corporate_group_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_group_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasterAccountApi.corporate_group_id_delete"
      end
      # resource path
      local_var_path = '/corporate/group/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_group_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a group details
    # This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
    # @param id [String] Id of the group of sub-organization
    # @param [Hash] opts the optional parameters
    # @return [CorporateGroupDetailsResponse]
    def corporate_group_id_get(id, opts = {})
      data, _status_code, _headers = corporate_group_id_get_with_http_info(id, opts)
      data
    end

    # GET a group details
    # This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
    # @param id [String] Id of the group of sub-organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(CorporateGroupDetailsResponse, Integer, Hash)>] CorporateGroupDetailsResponse data, response status code and response headers
    def corporate_group_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_group_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasterAccountApi.corporate_group_id_get"
      end
      # resource path
      local_var_path = '/corporate/group/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CorporateGroupDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_group_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_group_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a group of sub-accounts
    # This endpoint allows to update a group of sub-accounts
    # @param id [String] Id of the group
    # @param corporate_group_id_put_request [CorporateGroupIdPutRequest] Group details to be updated.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def corporate_group_id_put(id, corporate_group_id_put_request, opts = {})
      corporate_group_id_put_with_http_info(id, corporate_group_id_put_request, opts)
      nil
    end

    # Update a group of sub-accounts
    # This endpoint allows to update a group of sub-accounts
    # @param id [String] Id of the group
    # @param corporate_group_id_put_request [CorporateGroupIdPutRequest] Group details to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def corporate_group_id_put_with_http_info(id, corporate_group_id_put_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_group_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasterAccountApi.corporate_group_id_put"
      end
      # verify the required parameter 'corporate_group_id_put_request' is set
      if @api_client.config.client_side_validation && corporate_group_id_put_request.nil?
        fail ArgumentError, "Missing the required parameter 'corporate_group_id_put_request' when calling MasterAccountApi.corporate_group_id_put"
      end
      # resource path
      local_var_path = '/corporate/group/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(corporate_group_id_put_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_group_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_group_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a group of sub-accounts
    # This endpoint allows to create a group of sub-accounts
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateGroupPostRequest] :corporate_group_post_request 
    # @return [CorporateGroupPost201Response]
    def corporate_group_post(opts = {})
      data, _status_code, _headers = corporate_group_post_with_http_info(opts)
      data
    end

    # Create a group of sub-accounts
    # This endpoint allows to create a group of sub-accounts
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateGroupPostRequest] :corporate_group_post_request 
    # @return [Array<(CorporateGroupPost201Response, Integer, Hash)>] CorporateGroupPost201Response data, response status code and response headers
    def corporate_group_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_group_post ...'
      end
      # resource path
      local_var_path = '/corporate/group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'corporate_group_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CorporateGroupPost201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_group_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete sub-account from group
    # This endpoint allows you to remove a sub-organization from a group.
    # @param group_id [String] Group id
    # @param corporate_group_unlink_group_id_sub_accounts_put_request [CorporateGroupUnlinkGroupIdSubAccountsPutRequest] List of sub-account ids
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def corporate_group_unlink_group_id_sub_accounts_put(group_id, corporate_group_unlink_group_id_sub_accounts_put_request, opts = {})
      corporate_group_unlink_group_id_sub_accounts_put_with_http_info(group_id, corporate_group_unlink_group_id_sub_accounts_put_request, opts)
      nil
    end

    # Delete sub-account from group
    # This endpoint allows you to remove a sub-organization from a group.
    # @param group_id [String] Group id
    # @param corporate_group_unlink_group_id_sub_accounts_put_request [CorporateGroupUnlinkGroupIdSubAccountsPutRequest] List of sub-account ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def corporate_group_unlink_group_id_sub_accounts_put_with_http_info(group_id, corporate_group_unlink_group_id_sub_accounts_put_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_group_unlink_group_id_sub_accounts_put ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MasterAccountApi.corporate_group_unlink_group_id_sub_accounts_put"
      end
      # verify the required parameter 'corporate_group_unlink_group_id_sub_accounts_put_request' is set
      if @api_client.config.client_side_validation && corporate_group_unlink_group_id_sub_accounts_put_request.nil?
        fail ArgumentError, "Missing the required parameter 'corporate_group_unlink_group_id_sub_accounts_put_request' when calling MasterAccountApi.corporate_group_unlink_group_id_sub_accounts_put"
      end
      # resource path
      local_var_path = '/corporate/group/unlink/{groupId}/subAccounts'.sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(corporate_group_unlink_group_id_sub_accounts_put_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_group_unlink_group_id_sub_accounts_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_group_unlink_group_id_sub_accounts_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of requested master account
    # This endpoint will provide the details of the master account.
    # @param [Hash] opts the optional parameters
    # @return [MasterDetailsResponse]
    def corporate_master_account_get(opts = {})
      data, _status_code, _headers = corporate_master_account_get_with_http_info(opts)
      data
    end

    # Get the details of requested master account
    # This endpoint will provide the details of the master account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MasterDetailsResponse, Integer, Hash)>] MasterDetailsResponse data, response status code and response headers
    def corporate_master_account_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_master_account_get ...'
      end
      # resource path
      local_var_path = '/corporate/masterAccount'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MasterDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_master_account_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_master_account_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate SSO token to access admin account
    # This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSsoTokenPostRequest] :corporate_sso_token_post_request 
    # @return [GetSsoToken]
    def corporate_sso_token_post(opts = {})
      data, _status_code, _headers = corporate_sso_token_post_with_http_info(opts)
      data
    end

    # Generate SSO token to access admin account
    # This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSsoTokenPostRequest] :corporate_sso_token_post_request 
    # @return [Array<(GetSsoToken, Integer, Hash)>] GetSsoToken data, response status code and response headers
    def corporate_sso_token_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sso_token_post ...'
      end
      # resource path
      local_var_path = '/corporate/ssoToken'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'corporate_sso_token_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetSsoToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sso_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sso_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of all the sub-accounts of the master account.
    # This endpoint will provide the list all the sub-accounts of the master account.
    # @param offset [Integer] Index of the first sub-account in the page
    # @param limit [Integer] Number of sub-accounts to be displayed on each page
    # @param [Hash] opts the optional parameters
    # @return [SubAccountsResponse]
    def corporate_sub_account_get(offset, limit, opts = {})
      data, _status_code, _headers = corporate_sub_account_get_with_http_info(offset, limit, opts)
      data
    end

    # Get the list of all the sub-accounts of the master account.
    # This endpoint will provide the list all the sub-accounts of the master account.
    # @param offset [Integer] Index of the first sub-account in the page
    # @param limit [Integer] Number of sub-accounts to be displayed on each page
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubAccountsResponse, Integer, Hash)>] SubAccountsResponse data, response status code and response headers
    def corporate_sub_account_get_with_http_info(offset, limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_get ...'
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling MasterAccountApi.corporate_sub_account_get"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling MasterAccountApi.corporate_sub_account_get"
      end
      # resource path
      local_var_path = '/corporate/subAccount'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = offset
      query_params[:'limit'] = limit

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubAccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable/disable sub-account application(s)
    # API endpoints for the Corporate owner to enable/disable applications on the sub-account
    # @param id [Integer] Id of the sub-account organization (mandatory)
    # @param sub_account_apps_toggle_request [SubAccountAppsToggleRequest] List of applications to activate or deactivate on a sub-account
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def corporate_sub_account_id_applications_toggle_put(id, sub_account_apps_toggle_request, opts = {})
      corporate_sub_account_id_applications_toggle_put_with_http_info(id, sub_account_apps_toggle_request, opts)
      nil
    end

    # Enable/disable sub-account application(s)
    # API endpoints for the Corporate owner to enable/disable applications on the sub-account
    # @param id [Integer] Id of the sub-account organization (mandatory)
    # @param sub_account_apps_toggle_request [SubAccountAppsToggleRequest] List of applications to activate or deactivate on a sub-account
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def corporate_sub_account_id_applications_toggle_put_with_http_info(id, sub_account_apps_toggle_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_id_applications_toggle_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasterAccountApi.corporate_sub_account_id_applications_toggle_put"
      end
      # verify the required parameter 'sub_account_apps_toggle_request' is set
      if @api_client.config.client_side_validation && sub_account_apps_toggle_request.nil?
        fail ArgumentError, "Missing the required parameter 'sub_account_apps_toggle_request' when calling MasterAccountApi.corporate_sub_account_id_applications_toggle_put"
      end
      # resource path
      local_var_path = '/corporate/subAccount/{id}/applications/toggle'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sub_account_apps_toggle_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_id_applications_toggle_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_id_applications_toggle_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a sub-account
    # @param id [Integer] Id of the sub-account organization to be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def corporate_sub_account_id_delete(id, opts = {})
      corporate_sub_account_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a sub-account
    # @param id [Integer] Id of the sub-account organization to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def corporate_sub_account_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasterAccountApi.corporate_sub_account_id_delete"
      end
      # resource path
      local_var_path = '/corporate/subAccount/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sub-account details
    # This endpoint will provide the details for the specified sub-account company
    # @param id [Integer] Id of the sub-account organization
    # @param [Hash] opts the optional parameters
    # @return [SubAccountDetailsResponse]
    def corporate_sub_account_id_get(id, opts = {})
      data, _status_code, _headers = corporate_sub_account_id_get_with_http_info(id, opts)
      data
    end

    # Get sub-account details
    # This endpoint will provide the details for the specified sub-account company
    # @param id [Integer] Id of the sub-account organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubAccountDetailsResponse, Integer, Hash)>] SubAccountDetailsResponse data, response status code and response headers
    def corporate_sub_account_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasterAccountApi.corporate_sub_account_id_get"
      end
      # resource path
      local_var_path = '/corporate/subAccount/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubAccountDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update sub-account plan
    # This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\" to set the consumable in unlimited mode.
    # @param id [Integer] Id of the sub-account organization
    # @param sub_account_update_plan_request [SubAccountUpdatePlanRequest] Values to update a sub-account plan
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def corporate_sub_account_id_plan_put(id, sub_account_update_plan_request, opts = {})
      corporate_sub_account_id_plan_put_with_http_info(id, sub_account_update_plan_request, opts)
      nil
    end

    # Update sub-account plan
    # This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
    # @param id [Integer] Id of the sub-account organization
    # @param sub_account_update_plan_request [SubAccountUpdatePlanRequest] Values to update a sub-account plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def corporate_sub_account_id_plan_put_with_http_info(id, sub_account_update_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_id_plan_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasterAccountApi.corporate_sub_account_id_plan_put"
      end
      # verify the required parameter 'sub_account_update_plan_request' is set
      if @api_client.config.client_side_validation && sub_account_update_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'sub_account_update_plan_request' when calling MasterAccountApi.corporate_sub_account_id_plan_put"
      end
      # resource path
      local_var_path = '/corporate/subAccount/{id}/plan'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sub_account_update_plan_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_id_plan_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_id_plan_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate an IP to sub-accounts
    # This endpoint allows to associate an IP to sub-accounts
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSubAccountIpAssociatePostRequest] :corporate_sub_account_ip_associate_post_request 
    # @return [Object]
    def corporate_sub_account_ip_associate_post(opts = {})
      data, _status_code, _headers = corporate_sub_account_ip_associate_post_with_http_info(opts)
      data
    end

    # Associate an IP to sub-accounts
    # This endpoint allows to associate an IP to sub-accounts
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSubAccountIpAssociatePostRequest] :corporate_sub_account_ip_associate_post_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def corporate_sub_account_ip_associate_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_ip_associate_post ...'
      end
      # resource path
      local_var_path = '/corporate/subAccount/ip/associate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'corporate_sub_account_ip_associate_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_ip_associate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_ip_associate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dissociate an IP to sub-accounts
    # This endpoint allows to dissociate an IP from sub-accounts
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSubAccountIpDissociateDeleteRequest] :corporate_sub_account_ip_dissociate_delete_request 
    # @return [nil]
    def corporate_sub_account_ip_dissociate_delete(opts = {})
      corporate_sub_account_ip_dissociate_delete_with_http_info(opts)
      nil
    end

    # Dissociate an IP to sub-accounts
    # This endpoint allows to dissociate an IP from sub-accounts
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSubAccountIpDissociateDeleteRequest] :corporate_sub_account_ip_dissociate_delete_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def corporate_sub_account_ip_dissociate_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_ip_dissociate_delete ...'
      end
      # resource path
      local_var_path = '/corporate/subAccount/ip/dissociate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'corporate_sub_account_ip_dissociate_delete_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_ip_dissociate_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_ip_dissociate_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an API key for a sub-account
    # This endpoint will generate an API v3 key for a sub account
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSubAccountKeyPostRequest] :corporate_sub_account_key_post_request 
    # @return [CreateApiKeyResponse]
    def corporate_sub_account_key_post(opts = {})
      data, _status_code, _headers = corporate_sub_account_key_post_with_http_info(opts)
      data
    end

    # Create an API key for a sub-account
    # This endpoint will generate an API v3 key for a sub account
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSubAccountKeyPostRequest] :corporate_sub_account_key_post_request 
    # @return [Array<(CreateApiKeyResponse, Integer, Hash)>] CreateApiKeyResponse data, response status code and response headers
    def corporate_sub_account_key_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_key_post ...'
      end
      # resource path
      local_var_path = '/corporate/subAccount/key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'corporate_sub_account_key_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateApiKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_key_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new sub-account under a master account.
    # This endpoint will create a new sub-account under a master account
    # @param create_sub_account [CreateSubAccount] Request body with sub-account organization name
    # @param [Hash] opts the optional parameters
    # @return [CreateSubAccountResponse]
    def corporate_sub_account_post(create_sub_account, opts = {})
      data, _status_code, _headers = corporate_sub_account_post_with_http_info(create_sub_account, opts)
      data
    end

    # Create a new sub-account under a master account.
    # This endpoint will create a new sub-account under a master account
    # @param create_sub_account [CreateSubAccount] Request body with sub-account organization name
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSubAccountResponse, Integer, Hash)>] CreateSubAccountResponse data, response status code and response headers
    def corporate_sub_account_post_with_http_info(create_sub_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_post ...'
      end
      # verify the required parameter 'create_sub_account' is set
      if @api_client.config.client_side_validation && create_sub_account.nil?
        fail ArgumentError, "Missing the required parameter 'create_sub_account' when calling MasterAccountApi.corporate_sub_account_post"
      end
      # resource path
      local_var_path = '/corporate/subAccount'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_sub_account)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSubAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate SSO token to access sub-account
    # This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSubAccountSsoTokenPostRequest] :corporate_sub_account_sso_token_post_request 
    # @return [GetSsoToken]
    def corporate_sub_account_sso_token_post(opts = {})
      data, _status_code, _headers = corporate_sub_account_sso_token_post_with_http_info(opts)
      data
    end

    # Generate SSO token to access sub-account
    # This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
    # @param [Hash] opts the optional parameters
    # @option opts [CorporateSubAccountSsoTokenPostRequest] :corporate_sub_account_sso_token_post_request 
    # @return [Array<(GetSsoToken, Integer, Hash)>] GetSsoToken data, response status code and response headers
    def corporate_sub_account_sso_token_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_sub_account_sso_token_post ...'
      end
      # resource path
      local_var_path = '/corporate/subAccount/ssoToken'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'corporate_sub_account_sso_token_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetSsoToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_sub_account_sso_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_sub_account_sso_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend / cancel admin user invitation
    # This endpoint will allow the user to:  - Resend an admin user invitation - Cancel an admin user invitation 
    # @param action [String] Action to be performed (cancel / resend)
    # @param email [String] Email address of the recipient
    # @param [Hash] opts the optional parameters
    # @return [CorporateUserInvitationActionEmailPut200Response]
    def corporate_user_invitation_action_email_put(action, email, opts = {})
      data, _status_code, _headers = corporate_user_invitation_action_email_put_with_http_info(action, email, opts)
      data
    end

    # Resend / cancel admin user invitation
    # This endpoint will allow the user to:  - Resend an admin user invitation - Cancel an admin user invitation 
    # @param action [String] Action to be performed (cancel / resend)
    # @param email [String] Email address of the recipient
    # @param [Hash] opts the optional parameters
    # @return [Array<(CorporateUserInvitationActionEmailPut200Response, Integer, Hash)>] CorporateUserInvitationActionEmailPut200Response data, response status code and response headers
    def corporate_user_invitation_action_email_put_with_http_info(action, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_user_invitation_action_email_put ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling MasterAccountApi.corporate_user_invitation_action_email_put"
      end
      # verify enum value
      allowable_values = ["resend", "cancel"]
      if @api_client.config.client_side_validation && !allowable_values.include?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling MasterAccountApi.corporate_user_invitation_action_email_put"
      end
      # resource path
      local_var_path = '/corporate/user/invitation/{action}/{email}'.sub('{' + 'action' + '}', CGI.escape(action.to_s)).sub('{' + 'email' + '}', CGI.escape(email.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CorporateUserInvitationActionEmailPut200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_user_invitation_action_email_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_user_invitation_action_email_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke an admin user
    # This endpoint allows to revoke/remove an invited member of your Admin account
    # @param email [String] Email of the invited user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def corporate_user_revoke_email_delete(email, opts = {})
      corporate_user_revoke_email_delete_with_http_info(email, opts)
      nil
    end

    # Revoke an admin user
    # This endpoint allows to revoke/remove an invited member of your Admin account
    # @param email [String] Email of the invited user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def corporate_user_revoke_email_delete_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.corporate_user_revoke_email_delete ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling MasterAccountApi.corporate_user_revoke_email_delete"
      end
      # resource path
      local_var_path = '/corporate/user/revoke/{email}'.sub('{' + 'email' + '}', CGI.escape(email.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.corporate_user_revoke_email_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#corporate_user_revoke_email_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user activity logs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search.
    # @option opts [String] :end_date Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month.
    # @option opts [Integer] :limit Number of documents per page (default to 10)
    # @option opts [Integer] :offset Index of the first document in the page. (default to 0)
    # @return [GetAccountActivity]
    def get_account_activity(opts = {})
      data, _status_code, _headers = get_account_activity_with_http_info(opts)
      data
    end

    # Get user activity logs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search.
    # @option opts [String] :end_date Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month.
    # @option opts [Integer] :limit Number of documents per page (default to 10)
    # @option opts [Integer] :offset Index of the first document in the page. (default to 0)
    # @return [Array<(GetAccountActivity, Integer, Hash)>] GetAccountActivity data, response status code and response headers
    def get_account_activity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.get_account_activity ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling MasterAccountApi.get_account_activity, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling MasterAccountApi.get_account_activity, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/organization/activities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountActivity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.get_account_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#get_account_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of all admin users
    # This endpoint allows you to list all Admin users of your Admin account
    # @param [Hash] opts the optional parameters
    # @return [GetCorporateInvitedUsersList]
    def get_corporate_invited_users_list(opts = {})
      data, _status_code, _headers = get_corporate_invited_users_list_with_http_info(opts)
      data
    end

    # Get the list of all admin users
    # This endpoint allows you to list all Admin users of your Admin account
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCorporateInvitedUsersList, Integer, Hash)>] GetCorporateInvitedUsersList data, response status code and response headers
    def get_corporate_invited_users_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.get_corporate_invited_users_list ...'
      end
      # resource path
      local_var_path = '/corporate/invited/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCorporateInvitedUsersList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.get_corporate_invited_users_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#get_corporate_invited_users_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check admin user permissions
    # @param email [String] Email of the invited user.
    # @param [Hash] opts the optional parameters
    # @return [GetCorporateUserPermission]
    def get_corporate_user_permission(email, opts = {})
      data, _status_code, _headers = get_corporate_user_permission_with_http_info(email, opts)
      data
    end

    # Check admin user permissions
    # @param email [String] Email of the invited user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCorporateUserPermission, Integer, Hash)>] GetCorporateUserPermission data, response status code and response headers
    def get_corporate_user_permission_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.get_corporate_user_permission ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling MasterAccountApi.get_corporate_user_permission"
      end
      # resource path
      local_var_path = '/corporate/user/{email}/permissions'.sub('{' + 'email' + '}', CGI.escape(email.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCorporateUserPermission'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.get_corporate_user_permission",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#get_corporate_user_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of groups
    # This endpoint allows you to list all groups created on your Admin account.
    # @param [Hash] opts the optional parameters
    # @return [Array<GetSubAccountGroups200ResponseInner>]
    def get_sub_account_groups(opts = {})
      data, _status_code, _headers = get_sub_account_groups_with_http_info(opts)
      data
    end

    # Get the list of groups
    # This endpoint allows you to list all groups created on your Admin account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetSubAccountGroups200ResponseInner>, Integer, Hash)>] Array<GetSubAccountGroups200ResponseInner> data, response status code and response headers
    def get_sub_account_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.get_sub_account_groups ...'
      end
      # resource path
      local_var_path = '/corporate/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetSubAccountGroups200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.get_sub_account_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#get_sub_account_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send invitation to an admin user
    # `This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - `my_plan`:   - \"all\" - `api`:   - \"none\" - `user_management`:   - \"all\" - `app_management` | Not available in ENTv2:   - \"all\"  **Note**: - If `all_features_access: false` then only privileges are required otherwise if `true` then it's assumed that all permissions will be there for the invited admin user. 
    # @param invite_admin_user [InviteAdminUser] Payload to send an invitation
    # @param [Hash] opts the optional parameters
    # @return [CorporateGroupPost201Response]
    def invite_admin_user(invite_admin_user, opts = {})
      data, _status_code, _headers = invite_admin_user_with_http_info(invite_admin_user, opts)
      data
    end

    # Send invitation to an admin user
    # &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
    # @param invite_admin_user [InviteAdminUser] Payload to send an invitation
    # @param [Hash] opts the optional parameters
    # @return [Array<(CorporateGroupPost201Response, Integer, Hash)>] CorporateGroupPost201Response data, response status code and response headers
    def invite_admin_user_with_http_info(invite_admin_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MasterAccountApi.invite_admin_user ...'
      end
      # verify the required parameter 'invite_admin_user' is set
      if @api_client.config.client_side_validation && invite_admin_user.nil?
        fail ArgumentError, "Missing the required parameter 'invite_admin_user' when calling MasterAccountApi.invite_admin_user"
      end
      # resource path
      local_var_path = '/corporate/user/invitation/send'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(invite_admin_user)

      # return_type
      return_type = opts[:debug_return_type] || 'CorporateGroupPost201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"MasterAccountApi.invite_admin_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasterAccountApi#invite_admin_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
