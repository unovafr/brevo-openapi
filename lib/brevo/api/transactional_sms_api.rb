=begin
#SendinBlue API

#SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

The version of the OpenAPI document: 3.0.0
Contact: contact@sendinblue.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Brevo
  class TransactionalSMSApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all your SMS activity (unaggregated events)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of documents per page (default to 50)
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
    # @option opts [Integer] :offset Index of the first document of the page (default to 0)
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :phone_number Filter the report for a specific phone number
    # @option opts [String] :event Filter the report for specific events
    # @option opts [String] :tags Filter the report for specific tags passed as a serialized urlencoded array
    # @option opts [String] :sort Sort the results in the ascending/descending order of record creation (default to 'desc')
    # @return [GetSmsEventReport]
    def get_sms_events(opts = {})
      data, _status_code, _headers = get_sms_events_with_http_info(opts)
      data
    end

    # Get all your SMS activity (unaggregated events)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of documents per page (default to 50)
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
    # @option opts [Integer] :offset Index of the first document of the page (default to 0)
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :phone_number Filter the report for a specific phone number
    # @option opts [String] :event Filter the report for specific events
    # @option opts [String] :tags Filter the report for specific tags passed as a serialized urlencoded array
    # @option opts [String] :sort Sort the results in the ascending/descending order of record creation (default to 'desc')
    # @return [Array<(GetSmsEventReport, Integer, Hash)>] GetSmsEventReport data, response status code and response headers
    def get_sms_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionalSMSApi.get_sms_events ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TransactionalSMSApi.get_sms_events, must be smaller than or equal to 100.'
      end

      allowable_values = ["bounces", "hardBounces", "softBounces", "delivered", "sent", "accepted", "unsubscription", "replies", "blocked", "rejected"]
      if @api_client.config.client_side_validation && opts[:'event'] && !allowable_values.include?(opts[:'event'])
        fail ArgumentError, "invalid value for \"event\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/transactionalSMS/statistics/events'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'phoneNumber'] = opts[:'phone_number'] if !opts[:'phone_number'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSmsEventReport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TransactionalSMSApi.get_sms_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionalSMSApi#get_sms_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get your SMS activity aggregated over a period of time
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with startDate and endDate
    # @option opts [String] :tag Filter on a tag
    # @return [GetTransacAggregatedSmsReport]
    def get_transac_aggregated_sms_report(opts = {})
      data, _status_code, _headers = get_transac_aggregated_sms_report_with_http_info(opts)
      data
    end

    # Get your SMS activity aggregated over a period of time
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with startDate and endDate
    # @option opts [String] :tag Filter on a tag
    # @return [Array<(GetTransacAggregatedSmsReport, Integer, Hash)>] GetTransacAggregatedSmsReport data, response status code and response headers
    def get_transac_aggregated_sms_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionalSMSApi.get_transac_aggregated_sms_report ...'
      end
      # resource path
      local_var_path = '/transactionalSMS/statistics/aggregatedReport'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransacAggregatedSmsReport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TransactionalSMSApi.get_transac_aggregated_sms_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionalSMSApi#get_transac_aggregated_sms_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get your SMS activity aggregated per day
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :tag Filter on a tag
    # @option opts [String] :sort Sort the results in the ascending/descending order of record creation (default to 'desc')
    # @return [GetTransacSmsReport]
    def get_transac_sms_report(opts = {})
      data, _status_code, _headers = get_transac_sms_report_with_http_info(opts)
      data
    end

    # Get your SMS activity aggregated per day
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
    # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
    # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
    # @option opts [String] :tag Filter on a tag
    # @option opts [String] :sort Sort the results in the ascending/descending order of record creation (default to 'desc')
    # @return [Array<(GetTransacSmsReport, Integer, Hash)>] GetTransacSmsReport data, response status code and response headers
    def get_transac_sms_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionalSMSApi.get_transac_sms_report ...'
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/transactionalSMS/statistics/reports'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransacSmsReport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TransactionalSMSApi.get_transac_sms_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionalSMSApi#get_transac_sms_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send SMS message to a mobile number
    # @param send_transac_sms [SendTransacSms] Values to send a transactional SMS
    # @param [Hash] opts the optional parameters
    # @return [SendSms]
    def send_transac_sms(send_transac_sms, opts = {})
      data, _status_code, _headers = send_transac_sms_with_http_info(send_transac_sms, opts)
      data
    end

    # Send SMS message to a mobile number
    # @param send_transac_sms [SendTransacSms] Values to send a transactional SMS
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendSms, Integer, Hash)>] SendSms data, response status code and response headers
    def send_transac_sms_with_http_info(send_transac_sms, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionalSMSApi.send_transac_sms ...'
      end
      # verify the required parameter 'send_transac_sms' is set
      if @api_client.config.client_side_validation && send_transac_sms.nil?
        fail ArgumentError, "Missing the required parameter 'send_transac_sms' when calling TransactionalSMSApi.send_transac_sms"
      end
      # resource path
      local_var_path = '/transactionalSMS/sms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(send_transac_sms)

      # return_type
      return_type = opts[:debug_return_type] || 'SendSms'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"TransactionalSMSApi.send_transac_sms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionalSMSApi#send_transac_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
