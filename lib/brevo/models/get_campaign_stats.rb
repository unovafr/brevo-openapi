=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

The version of the OpenAPI document: 3.0.0
Contact: contact@brevo.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Brevo
  class GetCampaignStats
    # List Id of email campaign (only in case of get email campaign(s)(not for global stats))
    attr_accessor :list_id

    # Number of unique clicks for the campaign
    attr_accessor :unique_clicks

    # Number of total clicks for the campaign
    attr_accessor :clickers

    # Number of complaints (Spam reports) for the campaign
    attr_accessor :complaints

    # Number of delivered emails for the campaign
    attr_accessor :delivered

    # Number of sent emails for the campaign
    attr_accessor :sent

    # Number of softbounce for the campaign
    attr_accessor :soft_bounces

    # Number of harbounce for the campaign
    attr_accessor :hard_bounces

    # Number of unique openings for the campaign
    attr_accessor :unique_views

    # Recipients without any privacy protection option enabled in their email client
    attr_accessor :trackable_views

    # Rate of recipients without any privacy protection option enabled in their email client
    attr_accessor :trackable_views_rate

    # Rate of recipients without any privacy protection option enabled in their email client, applied to all delivered emails
    attr_accessor :estimated_views

    # Number of unsubscription for the campaign
    attr_accessor :unsubscriptions

    # Number of openings for the campaign
    attr_accessor :viewed

    # Number of deferred emails for the campaign
    attr_accessor :deferred

    # Total number of non-delivered campaigns for a particular campaign id.
    attr_accessor :return_bounce

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'list_id' => :'listId',
        :'unique_clicks' => :'uniqueClicks',
        :'clickers' => :'clickers',
        :'complaints' => :'complaints',
        :'delivered' => :'delivered',
        :'sent' => :'sent',
        :'soft_bounces' => :'softBounces',
        :'hard_bounces' => :'hardBounces',
        :'unique_views' => :'uniqueViews',
        :'trackable_views' => :'trackableViews',
        :'trackable_views_rate' => :'trackableViewsRate',
        :'estimated_views' => :'estimatedViews',
        :'unsubscriptions' => :'unsubscriptions',
        :'viewed' => :'viewed',
        :'deferred' => :'deferred',
        :'return_bounce' => :'returnBounce'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'list_id' => :'Integer',
        :'unique_clicks' => :'Integer',
        :'clickers' => :'Integer',
        :'complaints' => :'Integer',
        :'delivered' => :'Integer',
        :'sent' => :'Integer',
        :'soft_bounces' => :'Integer',
        :'hard_bounces' => :'Integer',
        :'unique_views' => :'Integer',
        :'trackable_views' => :'Integer',
        :'trackable_views_rate' => :'Float',
        :'estimated_views' => :'Integer',
        :'unsubscriptions' => :'Integer',
        :'viewed' => :'Integer',
        :'deferred' => :'Integer',
        :'return_bounce' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Brevo::GetCampaignStats` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Brevo::GetCampaignStats`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'list_id')
        self.list_id = attributes[:'list_id']
      end

      if attributes.key?(:'unique_clicks')
        self.unique_clicks = attributes[:'unique_clicks']
      else
        self.unique_clicks = nil
      end

      if attributes.key?(:'clickers')
        self.clickers = attributes[:'clickers']
      else
        self.clickers = nil
      end

      if attributes.key?(:'complaints')
        self.complaints = attributes[:'complaints']
      else
        self.complaints = nil
      end

      if attributes.key?(:'delivered')
        self.delivered = attributes[:'delivered']
      else
        self.delivered = nil
      end

      if attributes.key?(:'sent')
        self.sent = attributes[:'sent']
      else
        self.sent = nil
      end

      if attributes.key?(:'soft_bounces')
        self.soft_bounces = attributes[:'soft_bounces']
      else
        self.soft_bounces = nil
      end

      if attributes.key?(:'hard_bounces')
        self.hard_bounces = attributes[:'hard_bounces']
      else
        self.hard_bounces = nil
      end

      if attributes.key?(:'unique_views')
        self.unique_views = attributes[:'unique_views']
      else
        self.unique_views = nil
      end

      if attributes.key?(:'trackable_views')
        self.trackable_views = attributes[:'trackable_views']
      else
        self.trackable_views = nil
      end

      if attributes.key?(:'trackable_views_rate')
        self.trackable_views_rate = attributes[:'trackable_views_rate']
      end

      if attributes.key?(:'estimated_views')
        self.estimated_views = attributes[:'estimated_views']
      end

      if attributes.key?(:'unsubscriptions')
        self.unsubscriptions = attributes[:'unsubscriptions']
      else
        self.unsubscriptions = nil
      end

      if attributes.key?(:'viewed')
        self.viewed = attributes[:'viewed']
      else
        self.viewed = nil
      end

      if attributes.key?(:'deferred')
        self.deferred = attributes[:'deferred']
      end

      if attributes.key?(:'return_bounce')
        self.return_bounce = attributes[:'return_bounce']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @unique_clicks.nil?
        invalid_properties.push('invalid value for "unique_clicks", unique_clicks cannot be nil.')
      end

      if @clickers.nil?
        invalid_properties.push('invalid value for "clickers", clickers cannot be nil.')
      end

      if @complaints.nil?
        invalid_properties.push('invalid value for "complaints", complaints cannot be nil.')
      end

      if @delivered.nil?
        invalid_properties.push('invalid value for "delivered", delivered cannot be nil.')
      end

      if @sent.nil?
        invalid_properties.push('invalid value for "sent", sent cannot be nil.')
      end

      if @soft_bounces.nil?
        invalid_properties.push('invalid value for "soft_bounces", soft_bounces cannot be nil.')
      end

      if @hard_bounces.nil?
        invalid_properties.push('invalid value for "hard_bounces", hard_bounces cannot be nil.')
      end

      if @unique_views.nil?
        invalid_properties.push('invalid value for "unique_views", unique_views cannot be nil.')
      end

      if @trackable_views.nil?
        invalid_properties.push('invalid value for "trackable_views", trackable_views cannot be nil.')
      end

      if @unsubscriptions.nil?
        invalid_properties.push('invalid value for "unsubscriptions", unsubscriptions cannot be nil.')
      end

      if @viewed.nil?
        invalid_properties.push('invalid value for "viewed", viewed cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @unique_clicks.nil?
      return false if @clickers.nil?
      return false if @complaints.nil?
      return false if @delivered.nil?
      return false if @sent.nil?
      return false if @soft_bounces.nil?
      return false if @hard_bounces.nil?
      return false if @unique_views.nil?
      return false if @trackable_views.nil?
      return false if @unsubscriptions.nil?
      return false if @viewed.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          list_id == o.list_id &&
          unique_clicks == o.unique_clicks &&
          clickers == o.clickers &&
          complaints == o.complaints &&
          delivered == o.delivered &&
          sent == o.sent &&
          soft_bounces == o.soft_bounces &&
          hard_bounces == o.hard_bounces &&
          unique_views == o.unique_views &&
          trackable_views == o.trackable_views &&
          trackable_views_rate == o.trackable_views_rate &&
          estimated_views == o.estimated_views &&
          unsubscriptions == o.unsubscriptions &&
          viewed == o.viewed &&
          deferred == o.deferred &&
          return_bounce == o.return_bounce
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [list_id, unique_clicks, clickers, complaints, delivered, sent, soft_bounces, hard_bounces, unique_views, trackable_views, trackable_views_rate, estimated_views, unsubscriptions, viewed, deferred, return_bounce].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Brevo.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
