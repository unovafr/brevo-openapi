=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

The version of the OpenAPI document: 3.0.0
Contact: contact@brevo.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Brevo
  class GetProductDetails
    # Product ID for which you requested the details
    attr_accessor :id

    # Name of the product for which you requested the details
    attr_accessor :name

    # Creation UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ)
    attr_accessor :created_at

    # Last modification UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ)
    attr_accessor :modified_at

    # URL to the product
    attr_accessor :url

    # Absolute URL to the cover image of the product
    attr_accessor :image_url

    # Product identifier from the shop
    attr_accessor :sku

    # Price of the product
    attr_accessor :price

    # Category ID-s of the product
    attr_accessor :categories

    # Parent product id of the product
    attr_accessor :parent_id

    # S3 url of original image
    attr_accessor :s3_original

    # S3 thumbnail url of original image in 120x120 dimension for analytics section
    attr_accessor :s3_thumb_analytics

    # S3 thumbnail url of original image in 600x400 dimension for editor section
    attr_accessor :s3_thumb_editor

    # Meta data of product such as description, vendor, producer, stock level, etc.
    attr_accessor :meta_info

    # product deleted from the shop's database
    attr_accessor :is_deleted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'created_at' => :'createdAt',
        :'modified_at' => :'modifiedAt',
        :'url' => :'url',
        :'image_url' => :'imageUrl',
        :'sku' => :'sku',
        :'price' => :'price',
        :'categories' => :'categories',
        :'parent_id' => :'parentId',
        :'s3_original' => :'s3Original',
        :'s3_thumb_analytics' => :'s3ThumbAnalytics',
        :'s3_thumb_editor' => :'s3ThumbEditor',
        :'meta_info' => :'metaInfo',
        :'is_deleted' => :'isDeleted'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'created_at' => :'String',
        :'modified_at' => :'String',
        :'url' => :'String',
        :'image_url' => :'String',
        :'sku' => :'String',
        :'price' => :'Float',
        :'categories' => :'Array<String>',
        :'parent_id' => :'String',
        :'s3_original' => :'String',
        :'s3_thumb_analytics' => :'String',
        :'s3_thumb_editor' => :'String',
        :'meta_info' => :'Object',
        :'is_deleted' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Brevo::GetProductDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Brevo::GetProductDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'modified_at')
        self.modified_at = attributes[:'modified_at']
      else
        self.modified_at = nil
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'image_url')
        self.image_url = attributes[:'image_url']
      end

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'s3_original')
        self.s3_original = attributes[:'s3_original']
      end

      if attributes.key?(:'s3_thumb_analytics')
        self.s3_thumb_analytics = attributes[:'s3_thumb_analytics']
      else
        self.s3_thumb_analytics = nil
      end

      if attributes.key?(:'s3_thumb_editor')
        self.s3_thumb_editor = attributes[:'s3_thumb_editor']
      else
        self.s3_thumb_editor = nil
      end

      if attributes.key?(:'meta_info')
        self.meta_info = attributes[:'meta_info']
      end

      if attributes.key?(:'is_deleted')
        self.is_deleted = attributes[:'is_deleted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @modified_at.nil?
        invalid_properties.push('invalid value for "modified_at", modified_at cannot be nil.')
      end

      if @s3_thumb_analytics.nil?
        invalid_properties.push('invalid value for "s3_thumb_analytics", s3_thumb_analytics cannot be nil.')
      end

      if @s3_thumb_editor.nil?
        invalid_properties.push('invalid value for "s3_thumb_editor", s3_thumb_editor cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @name.nil?
      return false if @created_at.nil?
      return false if @modified_at.nil?
      return false if @s3_thumb_analytics.nil?
      return false if @s3_thumb_editor.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          created_at == o.created_at &&
          modified_at == o.modified_at &&
          url == o.url &&
          image_url == o.image_url &&
          sku == o.sku &&
          price == o.price &&
          categories == o.categories &&
          parent_id == o.parent_id &&
          s3_original == o.s3_original &&
          s3_thumb_analytics == o.s3_thumb_analytics &&
          s3_thumb_editor == o.s3_thumb_editor &&
          meta_info == o.meta_info &&
          is_deleted == o.is_deleted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, created_at, modified_at, url, image_url, sku, price, categories, parent_id, s3_original, s3_thumb_analytics, s3_thumb_editor, meta_info, is_deleted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Brevo.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
