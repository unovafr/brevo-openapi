=begin
#SendinBlue API

#SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

The version of the OpenAPI document: 3.0.0
Contact: contact@sendinblue.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Brevo
  class RequestContactImport
    # Mandatory if fileBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv
    attr_accessor :file_url

    # Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.
    attr_accessor :file_body

    # Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].
    attr_accessor :list_ids

    # URL that will be called once the import process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
    attr_accessor :notify_url

    attr_accessor :new_list

    # To blacklist all the contacts for email
    attr_accessor :email_blacklist

    # To disable email notification
    attr_accessor :disable_notification

    # To blacklist all the contacts for sms
    attr_accessor :sms_blacklist

    # To facilitate the choice to update the existing contacts
    attr_accessor :update_existing_contacts

    # To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes = true means the empty fields in your import will erase any attribute that currently contain data in SendinBlue, & emptyContactsAttributes = false means the empty fields will not affect your existing data ( only available if `updateExistingContacts` set to true )
    attr_accessor :empty_contacts_attributes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'file_url' => :'fileUrl',
        :'file_body' => :'fileBody',
        :'list_ids' => :'listIds',
        :'notify_url' => :'notifyUrl',
        :'new_list' => :'newList',
        :'email_blacklist' => :'emailBlacklist',
        :'disable_notification' => :'disableNotification',
        :'sms_blacklist' => :'smsBlacklist',
        :'update_existing_contacts' => :'updateExistingContacts',
        :'empty_contacts_attributes' => :'emptyContactsAttributes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'file_url' => :'String',
        :'file_body' => :'String',
        :'list_ids' => :'Array<Integer>',
        :'notify_url' => :'String',
        :'new_list' => :'RequestContactImportNewList',
        :'email_blacklist' => :'Boolean',
        :'disable_notification' => :'Boolean',
        :'sms_blacklist' => :'Boolean',
        :'update_existing_contacts' => :'Boolean',
        :'empty_contacts_attributes' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Brevo::RequestContactImport` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Brevo::RequestContactImport`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'file_url')
        self.file_url = attributes[:'file_url']
      end

      if attributes.key?(:'file_body')
        self.file_body = attributes[:'file_body']
      end

      if attributes.key?(:'list_ids')
        if (value = attributes[:'list_ids']).is_a?(Array)
          self.list_ids = value
        end
      end

      if attributes.key?(:'notify_url')
        self.notify_url = attributes[:'notify_url']
      end

      if attributes.key?(:'new_list')
        self.new_list = attributes[:'new_list']
      end

      if attributes.key?(:'email_blacklist')
        self.email_blacklist = attributes[:'email_blacklist']
      else
        self.email_blacklist = false
      end

      if attributes.key?(:'disable_notification')
        self.disable_notification = attributes[:'disable_notification']
      else
        self.disable_notification = false
      end

      if attributes.key?(:'sms_blacklist')
        self.sms_blacklist = attributes[:'sms_blacklist']
      else
        self.sms_blacklist = false
      end

      if attributes.key?(:'update_existing_contacts')
        self.update_existing_contacts = attributes[:'update_existing_contacts']
      else
        self.update_existing_contacts = true
      end

      if attributes.key?(:'empty_contacts_attributes')
        self.empty_contacts_attributes = attributes[:'empty_contacts_attributes']
      else
        self.empty_contacts_attributes = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          file_url == o.file_url &&
          file_body == o.file_body &&
          list_ids == o.list_ids &&
          notify_url == o.notify_url &&
          new_list == o.new_list &&
          email_blacklist == o.email_blacklist &&
          disable_notification == o.disable_notification &&
          sms_blacklist == o.sms_blacklist &&
          update_existing_contacts == o.update_existing_contacts &&
          empty_contacts_attributes == o.empty_contacts_attributes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [file_url, file_body, list_ids, notify_url, new_list, email_blacklist, disable_notification, sms_blacklist, update_existing_contacts, empty_contacts_attributes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Brevo.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
